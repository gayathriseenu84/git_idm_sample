<?php
define('MY_SELF', 1);
define('TILDE_REQUEST_DEFAULT_APPROVER', '206426150');
/**
 * Implementation of hook_menu().
 */
function idm_assets_menu() {
  $items = array ();

  $items['assets'] = array (
    'title' => 'Assets',
    'page callback' => '_idm_assets_list_assets',
    'access arguments' => array('access idm profile'),
    'menu_name' => 'main-menu', // This is the changed line.
    'type' => MENU_NORMAL_ITEM,
    'weight' => - 49
  );
  $items['request/assets/certificate'] = array (
    'title' => 'Request Assets Certificate',
	'page callback' => 'drupal_get_form',
    'page arguments' => array ('idm_request_assets_certificate'),
    'access callback' => 'idm_assets_certificate_access',
    'access arguments' => array('access idm profile'),
  );
  $items['request/assets/certificate/options/%'] = array (
    'title' => 'Request Assets Certificate options',
	'page callback' => '_idm_request_assets_certificate_options',
	'page arguments' => array (4),
	'access arguments' => array('access idm profile')
  );
  $items['request/assets/certificate/confirmation'] = array (
    'title' => 'Request Assets Certificate Confirmation',
	'page callback' => '_idm_request_assets_certificate_confirmation',
	'access arguments' => array('access idm profile')
  );
  $items['request/assets/tildeaccount/%'] = array (
    'title' => 'Request Assets Tilde Account',
    'page callback' => '_idm_request_assets_tilde_account',
    'page arguments' => array (3),
    'access arguments' => array('access idm profile'),
  );
  $items['request/accounts/%'] = array (
    'title' => 'Request Assets Tilde Account',
    'page callback' => '_idm_request_account',
    'page arguments' => array (2),
    'access arguments' => array('access idm profile'),
  );
  //Domain tilde account
  $items['request/assets/tilde'] = array (
    'title' => 'Create Domain Tilde account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('idm_request_assets_domain_tilde_account'),
    'access arguments' => array('access idm profile'),
  );
  // RSA
  $items['request/assets/rsa'] = array (
	'title' => 'Request Assets RSA',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_rsa'),
	'access arguments' => array('access idm profile')
  );
  $items['request/assets/rsa/options/%'] = array (
    'title' => 'Request RSA options',
	'page callback' => '_idm_request_assets_rsa_options',
	'page arguments' => array (4),
	'access arguments' => array('access idm profile')
  );
  //Personally owned Mobile Device Access
  $items['request/assets/mobiledevice'] = array (
    'title' => 'Personally owned Mobile Device Access',
	'page callback' => 'drupal_get_form',
	'page arguments' => array('idm_groups_personally_owned_mobile_access'),
	'access arguments' => array('access idm profile'),
  );
  //Download groups report
  $items['download_personal_mobile_instructions_pdf'] = array (
    'page callback' => 'idm_assets_download_personal_mobile_instructions_pdf',
    'access arguments' => array('access idm profile'),
    'type' => MENU_CALLBACK,
  );
  // Secure Remote Access
  $items['request/assets/remoteaccess'] = array (
	'title' => 'Request Secure Remote Access',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_secure_remote_access'),
	'access arguments' => array('access idm profile')
  );
	 // Secure Remote Access sailpoint
  /*$items['request/assets/remoteaccess_sailpoint'] = array (
	'title' => 'Request Secure Remote Access',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_secure_remote_access_sailpoint'),
	'access arguments' => array('access idm profile')
  );*/
	$items['rsa/approvals/list'] = array (
    'title' => 'RSA Approvals',
    'page callback' => 'rsa_approvals_list',
    'access arguments' => array('access idm profile')
  );
	$items['rsa_manager_approval/%'] = array (
    'title' => 'Manager Approval form',
		'page callback' => 'drupal_get_form',
		'page arguments' => array ('idm_rsa_manager_approval_sailpoint'),
    'access arguments' => array('access idm profile')
  );
	$items['rsa_vpnsupplier_approval/%'] = array (
    'title' => 'VPN Supplier Approval Form',
		'page callback' => 'drupal_get_form',
		'page arguments' => array ('idm_rsa_vpnsupplier_approval_sailpoint'),
    'access arguments' => array('access idm profile')
  );
  //dropbox changes
  $items['dropboxprovision'] = array (
    'title' => 'Dropbox Provision',
    'page callback' => 'idm_dropbox_provision',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
   );
  $items['dropboxdeprov'] = array (
    'title' => 'Dropbox DeProvision',
    'page callback' => 'idm_dropbox_deprovision',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    /*
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('idm_dropbox_deprovision'),
    'access callback' => 'idm_assets_dropbox_access',
    */
  );
 /* // Provisioning Request
  $items['request/assets/provisionrequest1'] = array (
	'title' => 'Provisioning Request',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_provisioning_request'),
	'access arguments' => array('access idm profile')
  );
  // Provisioning Request with next button
  $items['request/assets/provisionn-request1'] = array (
	'title' => 'Provisioning Request',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_provisioning_request_2'),
	'access arguments' => array('access idm profile')
  );

  // Wireless Attributes
  $items['request/assets/wireless-attributes1'] = array (
	'title' => 'Wireless Attributes',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_wireless_attributes'),
	'access arguments' => array('access idm profile')
  );*/
  // Wireless Attributes new
  $items['request/assets/wireless-attributess'] = array (
	'title' => 'Wireless Attributes',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_wireless_attributess'),
	'access callback' => 'idm_assets_access_wireless'
	//'access arguments' => array('access idm profile')
  );
  // Vroozi Profile Management
  $items['request/assets/vroozi-profile-mgtt'] = array (
	'title' => 'Vroozi Profile Management',
	'page callback' => 'drupal_get_form',
	'page arguments' => array ('idm_request_assets_vroozi_profile_mgtt'),
	'access callback' => 'idm_assets_access',
	//'access arguments' => array('access idm profile')
  );
  // Bulk Update for Wireless Attributes & Vroozi Profile Management
  $items['request/assets/bulkop'] = array (
    'title' => 'Bulk Operations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('idm_assets_bulk_operations_form'),
	'access callback' => 'idm_assets_access_wireless',
    //'access arguments' => array('administer idm assets'),
    'file' => 'assets.bulkoperations.inc'
  );
	$items['list/wireless-search/%'] = array (
    'page callback' => 'idm_assets_search_users_wireless',
		'page arguments' => array (2),
		'access arguments' => array('access idm profile'),
  );
	$items['list/wireless-search-sso/%'] = array (
    'page callback' => 'idm_assets_search_users_wireless_sso',
		'page arguments' => array (2),
		'access arguments' => array('access idm profile'),
  );
  return $items;
}


/**
 * Access Assets Callback method
 */
function idm_assets_access() {
  global $user;
  if ((in_array('Vroozi Administrator', $user->roles))) {
    return true;
  } else {
    return false;
  }
}

/**
 * Access Assets Callback for wireless administrator
 */
function idm_assets_access_wireless() {
  global $user;
  if ((in_array('Wireless Administrator', $user->roles))) {
    return true;
  } else {
    return false;
  }
}

function idm_dropbox_provision() {
  global $user;
  if ($user->uid == 0 ) {
    $destination = "dropboxprovision";
    drupal_goto('saml_login', array('query' => array('destination' => $destination)));
  } else {
	  $group_array = array();
	  $userid = empty($user->name) ? '' : $user->name;
	  $group_type = variable_get('dropbox_gtype', 'DST');
	  $group_id = variable_get('dropbox_gid', 'gr1006746');
         ctools_object_cache_set('api', 'group_info_'.$group_id, '');
	  $group_array = _idm_groups_get_group_info($group_type, $group_id);
	  /*
	  echo '<pre>';
	  print_r($group_array);
	  $userid = '900001877';
	  $group_array = _idm_groups_get_group_info('DST', 'gr0191651');
	  */
	  //$group_array = '';

	  $ssos = array();
	  if (array_key_exists("group_members",$group_array)) {
      foreach ($group_array['group_members'] as $key => $value) {
        $group_members_ssos[] = $value['sso'];
      }
      if (!empty($group_members_ssos)) {
        if (in_array($userid, $group_members_ssos)) {
        return drupal_get_form('idm_dropbox_provision_form');
        } else {
        drupal_set_title('Access Denied');
        $outputmsg = '<div class="messages messages--error">'.t('You are not authorized to access this page as you don\'t belong to the authorized group. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
        return ($outputmsg);
        }
      } else {
        drupal_set_title('Access Denied');
        $outputmsg = '<div class="messages messages--error">'.t('Either you are not authorized to access this page as you don\'t belong to the authorized group OR Identity management group API may be down at current moment. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
        return ($outputmsg);
      }
	  } else {
		  drupal_set_title('Access Denied');
		  $outputmsg = '<div class="messages messages--error">'.t('Identity management group API seems to be down at current moment. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
		  return ($outputmsg);
	  }
  }
}

function idm_dropbox_provision_form($form, &$form_state) {
  //drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  /*
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');

  $form['dropboxprovision'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'dropboxprovision-info'
		)
	  ),
  );
  */
  $form['dropboxprovision']['title'] = array(
      '#markup' => 'Drop Box provision',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['dropboxprovision']['comments'] = array(
      '#title' => t('Enter SSO in each line:'),
      '#type' => 'textarea',
	    '#resizable' => FALSE,
      '#required' => TRUE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '</div>'
  );
  $form['dropboxprovision']['send'] = array (
    '#type' => 'checkbox',
    '#default_value' => TRUE,
    '#title' => t('Send Email'),
    '#attributes' => array('class' => array('hover-grey')),
  );
  $form['dropboxprovision']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit Query'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	  '#prefix' => '<div class="submit-buttons-row" >',
    '#suffix' => '</div>',
  );

  $form['#validate'][] = 'idm_dropbox_provision_validate';

  return $form;
}

function idm_dropbox_provision_validate($form, $form_state) {
    global $user;
    $application = 'Dropbox';
    $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');
    $url .= '/internal/accounts';
    $method = 'POST';
    $output = array();
    if ($form_state['values']['comments'] != '') {
      foreach(explode("\r\n", $form_state['values']['comments']) as $sso) {
				if (is_numeric($sso)) {
					$send = $form_state['values']['send'];
					$user_json = json_encode(array('schemas' => array("urn:scim:schemas:core:1.0"), 'sso' => $sso, 'application' => $application, 'send_email' => $send));
					$result = idm_profile_execute_curl($url, $user_json, $method);

					//formatting result
					$error = json_decode($result, true);
					$errorCode = $error['errorCode'];
					$errorMessage = $error['errorMessage'];
					$detail = '';

					$message = "$application account request processed. Please watch your email inbox for an activation email.";  
					if ($errorCode == 200) {
						if ($errorCode != 429 && $errorCode != 200) {
							$message = $errorMessage;
							if (substr($message, 0, 15) == 'Following error') {
									$messageJson = substr($message, 161);
									$message = 'The following error occurred while trying to provision the account:';
									if (substr($messageJson, 0, 1) == '{') {
											$messageArr = json_decode($messageJson, true);
											$detail = $messageArr['error'];
									} else {
											$detail = $messageJson;
									}
							}
						}
					}
					//$output[$sso] = array('sso' => $sso, 'error' => $error, 'errorCode' => $errorCode, 'errorMessage' => $errorMessage, 'message' => $message, 'detail' => $detail);
					if($error['op_status'] == SUCCESS){
						$output[$sso] = array('sso' => $sso, 'message' => 'The requested action is successfully completed. The eamil is sent for the user sso id');        
					}else{
						$output[$sso] = array('sso' => $sso, 'errorCode' => $errorCode, 'errorMessage' => $errorMessage, 'message' => $message);
					}
				}
			}
    } else {
      drupal_set_message(t('Please provide at least one sso'));
    }
    /*
    echo '<pre>';
    print_r($output);
    exit;
    */
		if (!empty($output)) {
			drupal_set_message('<pre>'. print_r($output, TRUE) .'</pre>');
		}
}

function get_dropbox_users_to_remove($invited = false) {
  $other_database = array(
      'database' => 'idwarehouse',
      'username' => 'adw',
      'password' => 'adw',
      'host' => 'iam.mysql.inbcu.com',
      'driver' => 'mysql',
  );
  Database::addConnectionInfo('dropboxdb', 'default', $other_database);
  db_set_active('dropboxdb');

  // execute queries here
  $status = $invited ? 'invited' : 'active';
  /*$result = db_query("select a.displayname as dropboxid, a.owner, CONCAT(i.firstName, ' ', i.lastName) as fullname, a.email from account a inner join identity i on i.sso = a.owner and (i.ssoStatus = 'i' OR i.idStatus='inactive') where a.application='Dropbox' and a.status='$status' order by a.accountCreationDate DESC limit 100");*/
	$result = db_query("select a.displayname as dropboxid, a.status, a.owner, CONCAT(i.firstName, ' ', i.lastName) as fullname, a.email from account a inner join identity i on i.sso = a.owner and (i.ssoStatus = 'i' OR i.idStatus='inactive') where a.status IN('invited','active') and a.application='Dropbox' order by a.accountCreationDate DESC limit 100");

  $retval = array();
  foreach ($result as $row) {
    $retval[] = $row;
  }
  //db_close();
  //Switch back to the default connection when finished.
  db_set_active('default');
  watchdog("dropbox", "%emailtimestamp - The queries have been made  on ", array('%emailtimestamp' => date('l jS \of F Y h:i:s A')));
  return $retval;
}

function idm_dropbox_deprovision() {
  global $user;
  if ($user->uid == 0 ) {
    $destination = "dropboxdeprov";
    drupal_goto('saml_login', array('query' => array('destination' => $destination)));
  } else {
    $group_array = array();
    $userid = empty($user->name) ? '' : $user->name;
    $group_type = variable_get('dropbox_gtype', 'DST');
    $group_id = variable_get('dropbox_gid', 'gr1006746');
    ctools_object_cache_set('api', 'group_info_'.$group_id, '');
    $group_array = _idm_groups_get_group_info($group_type, $group_id);
    /*
    echo '<pre>';
    print_r($group_array);
    $userid = '900001877';
    $group_array = _idm_groups_get_group_info('DST', 'gr0191651');
    */
    //$group_array = [];

    $ssos = array();
    /*
    foreach ($group_array['group_members'] as $key => $value) {
      $group_members_ssos[] = $value['sso'];
    }
    if (!empty($group_members_ssos)) {
      if (in_array($userid, $group_members_ssos)) {
        return drupal_get_form('idm_dropbox_deprovision_form');
      } else {
        drupal_set_title('Access Denied');
        $outputmsg = '<div class="messages messages--error">'.t('You are not authorized to access this page as you don\'t belong to the authorized group.').'</div>';
        return ($outputmsg);
      }
    } else {
      drupal_set_title('Access Denied');
      $outputmsg = '<div class="messages messages--error">'.t('Identity management group API seems to be down at current moment. Please try after some time.').'</div>';
      return ($outputmsg);
    }
    */

    if (array_key_exists("group_members",$group_array)) {
      foreach ($group_array['group_members'] as $key => $value) {
        $group_members_ssos[] = $value['sso'];
      }
      if (!empty($group_members_ssos)) {
        if (in_array($userid, $group_members_ssos)) {
          return drupal_get_form('idm_dropbox_deprovision_form');
        } else {
          drupal_set_title('Access Denied');
          $outputmsg = '<div class="messages messages--error">'.t('You are not authorized to access this page as you don\'t belong to the authorized group. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
          return ($outputmsg);
        }
      } else {
        drupal_set_title('Access Denied');
        $outputmsg = '<div class="messages messages--error">'.t('Either you are not authorized to access this page as you don\'t belong to the authorized group OR Identity management group API may be down at current moment. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
        return ($outputmsg);
      }
    } else {
      drupal_set_title('Access Denied');
      $outputmsg = '<div class="messages messages--error">'.t('Identity management group API seems to be down at current moment. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.').'</div>';
      return ($outputmsg);
    }
  }
}

function idm_dropbox_deprovision_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/dropbox.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  /*
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  */

  $form['dropboxdeprov']['title'] = array(
      '#markup' => 'The following users have been disabled in SSO system but they still have an active NBCU-Dropbox account.',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div> <br />'
  );
  $form['dropboxdeprov']['selectall'] = array (
    '#type' => 'checkbox',
    '#value' => t('Select All'),
    //'#default_value' => TRUE,
    '#title' => t('Select All'),
    '#suffix' => '<hr />'
  );

  //$dropboxusers = get_dropbox_users_to_remove(isset($_GET['invited']) && $_GET['invited'] == '1' ? true : false);
  $dropboxusers = get_dropbox_users_to_remove(false);
  $dropboxvalue = array();
  foreach($dropboxusers as $dropboxuser) {
      $dboxid = $dropboxuser->dropboxid;
      $email = $dropboxuser->email;
      $fullname = $dropboxuser->fullname;
      $ownersso = $dropboxuser->owner;
      $dropboxvalue[$email] = $fullname.' ('.$ownersso.') - '.$email;
      $form['dropboxdeprov']['all'] = array(
        '#type' => 'checkboxes',
        '#options' => $dropboxvalue,
        //'#default_value' => TRUE,
        //'#default_value' => array(1, 3),
      );
  }
   $form['dropboxdeprov']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Delete Selected Dropbox Accounts'),
    '#attributes' => array('class' => array('small_button hover-blue')),
    '#prefix' => '<div class="submit-buttons-row" >',
  );
  $form['#validate'][] = 'idm_dropbox_deprovision_validate';
  return $form;
}

function dropbox_getmemberidbyemail($email) {
	//$url = 'https://api.dropbox.com/1/team/members/get_info';
	$url = 'https://api.dropboxapi.com/2/team/members/get_info';
	$method = 'POST';
	//$user_json = json_encode(array('email' => $email));
	$dropboxtoken = 'o7LZZwu68pYAAAAAAAAABXUUNcb30O1dHksYV3OxzuRHDYrwI68aJnMHMO0poxTG';

	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_PROXY, '10.40.32.20:80');
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array (
		"Content-Type: application/json",
		"Authorization: Bearer $dropboxtoken"
	));
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
	//curl_setopt($ch, CURLOPT_POSTFIELDS, $user_json);
	curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"members\":[{\".tag\":\"email\",\"email\":\"$email\"}]}");
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);
	curl_setopt($ch, CURLOPT_TIMEOUT, 180);

	$starttime = microtime(true);
	$result = curl_exec($ch);
	$endtime = microtime(true);
	$elapsed = sprintf("%.6f", $endtime - $starttime);

	$member = json_decode($result, true);
	/*if (isset($member['error'])) return null;
	return $member['profile']['member_id'];*/
	if (array_key_exists("id_not_found",$member[0])) {
		return null;
	} else {
		return $member[0]['profile']['team_member_id'];
	}
}

function idm_dropbox_deprovision_validate($form, $form_state) {
  $application = 'Dropbox';
  //$url = 'https://api.dropbox.com/1/team/members/remove';
	$url = 'https://api.dropboxapi.com/2/team/members/remove';
  $method = 'POST';
  $output = array();

  foreach($form_state['values']['all'] as $email) {
		if($email != '0') {
			//echo $email;
			$memberid = dropbox_getmemberidbyemail($email);
			//$memberid = 206463231;
			//echo "memberid for $email is: $memberid\n<br/>";
			if ($memberid == null) {
				drupal_set_message(t('!user User not on team.', array('!user' => $email)));
			} else {
				//$user_json = json_encode(array('member_id' => $memberid));
				$dropboxtoken = 'o7LZZwu68pYAAAAAAAAABXUUNcb30O1dHksYV3OxzuRHDYrwI68aJnMHMO0poxTG';
				//open connection
				$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, $url);
				curl_setopt($ch, CURLOPT_PROXY, '10.40.32.20:80');
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
				curl_setopt($ch, CURLOPT_HTTPHEADER, array (
				"Content-Type: application/json",
				"Authorization: Bearer $dropboxtoken"
				));
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
				//curl_setopt($ch, CURLOPT_POSTFIELDS, $user_json);
				curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"user\":{\".tag\":\"team_member_id\",\"team_member_id\":\"$memberid\"}}");
				curl_setopt($ch, CURLOPT_HEADER, 1);
				curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);
				curl_setopt($ch, CURLOPT_TIMEOUT, 180);
				// execute post
				$starttime = microtime(true);
				$result = curl_exec($ch);
				$endtime = microtime(true);
				$elapsed = sprintf("%.6f", $endtime - $starttime);

				$error = json_decode($result, true);
				$errorCode = $error['errorCode'];
				$errorMessage = $error['errorMessage'];
				$detail = '';

				$message = "$application account request processed. Please watch your email inbox for an activation email.";

				if ($errorCode == 200) {
					if ($errorCode != 429 && $errorCode != 200) {
						$message = $errorMessage;
						if (substr($message, 0, 15) == 'Following error') {
							$messageJson = substr($message, 161);
							$message = 'The following error occurred while trying to provision the account:';
							if (substr($messageJson, 0, 1) == '{') {
								$messageArr = json_decode($messageJson, true);
								$detail = $messageArr['error'];
							} else {
								$detail = $messageJson;
							}
						}
					}
				}
				$output[] = array('error' => $error, 'errorCode' => $errorCode, 'errorMessage' => $errorMessage, 'message' => $message, 'detail' => $detail);
			}
		}
  }
	if (!empty($output)) {
		drupal_set_message($output[0]['message']);
	}
}

/**
 * Callback for Assets.
 */
function _idm_assets_list_assets() {
  $content['info'] = array (
    '#type' => 'markup',
    '#markup' => _idm_assets_get_assets(),
    '#prefix' => '<div id="idm_assets">',
    '#suffix' => '</div><div class="clr"></div>'
  );
  return $content;
}

/**
 * Implementing hook_theme().
 */
function idm_assets_theme() {
  $themes = array (
	'assets' => array (
      'template' => 'assets',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    ),
	'assets_certificate_info' => array (
      'template' => 'assets_certificate_info',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    ),
		'rsa_manager_approval_info' => array (
      'template' => 'rsa_manager_approval_info',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    ),
	'assets_view_admin_account_profile' => array (
      'template' => 'assets_view_admin_account_profile',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    ),
	'assets_request_account' => array (
      'template' => 'assets_request_account',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    ),
    'mobiledevice' => array (
      'template' => 'mobiledevice',
      'render element' => 'form'
     ),
		 'get_rsa_approvals_list' => array (
      'template' => 'get_rsa_approvals_list',
      'variables' => array (
        'vars' => array (
          ''
        )
      )
    )
  );
  return $themes;
}
function _idm_assets_get_assets() {
/*
  ctools_include('object-cache');
  global $user;
  $userid = empty($user->name) ? '' : $user->name;
  $url = variable_get('rest_api_check_url');
  $filter = rawurlencode('id eq '.$userid.' and usertype eq domaintildeaccount');
  $url = $url . '/internal/users?filter='.$filter;
  $result = _idm_portal_get_api_data($url);
  if(!empty($result->data)) {
    $admin_account_info = json_decode($result->data);
    if(!empty($admin_account_info->results) && ($admin_account_info->results > 0)) {
      $account_info['custom_supervisorName'] = $admin_account_info->Resources[0]->custom_supervisorName;
      $account_info['custom_supervisorId'] = $admin_account_info->Resources[0]->custom_supervisorId;
      $account_info['name'] = $admin_account_info->Resources[0]->displayName;
      $account_info['employee_id'] = $admin_account_info->Resources[0]->employeeID;
      $account_info['employee_number'] = $admin_account_info->Resources[0]->employeeNumber;
      //$account_info['account_expires'] = $admin_account_info->Resources[0]->accountExpires;
      $milliseconds = $admin_account_info->Resources[0]->accountExpires;
      $seconds = $milliseconds / 1000;
      $account_info['account_expires'] = date("m/d/Y", $seconds);
      $account_info['user_name'] = $admin_account_info->Resources[0]->userName;
      $account_info['id'] = $admin_account_info->Resources[0]->id;
      $tilde_asset_request = "View";
      $tilde_asset_status_class = "icon_approve";
      ctools_object_cache_set('api', 'assets_tilde_account_info'.$userid, $account_info);
    }
    else {
      $tilde_asset_request = "Request";
      //$tilde_asset_status_class = "icon_alert";
      $tilde_asset_status_class = "";
    }
  }
  */

	$var = array();
	$asset_content = array(
/* IP-418 */
/*"Recommended For You" => array(
    "1" =>  array(
      "asset_title" => "Templates",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-templates",
      "asset_request" => "Request"
	),
    "2" =>  array(
      "asset_title" => "Role Change",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_approve",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_request" => "Request"
	),
    "3" =>  array(
      "asset_title" => "Security Service",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_ellipse",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	),
    "4" =>  array(
      "asset_title" => "File Share",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_warning",
      "asset_class" => "icon sprite-icons-file_share",
      "asset_request" => "Request"
	),
    "5" =>  array(
      "asset_title" => "Database",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-database",
      "asset_request" => "Request"
	),
    "6" =>  array(
      "asset_title" => "Wireless",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-wireless",
      "asset_request" => "Request"
	),
    "7" =>  array(
      "asset_title" => "Webex Meeting",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-webex_meeting",
      "asset_request" => "Request"
	),
    "8" =>  array(
      "asset_title" => "Server",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-server",
      "asset_request" => "Request"
	),
    "9" =>  array(
      "asset_title" => "Secure Remote Access",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	),
    "10" =>  array(
      "asset_title" => "Provisioning",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-provisioning",
      "asset_request" => "Request"
	)),*/

	/*"Top Requests" => array(
    "1" =>  array(
      "asset_title" => "Security Device",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-templates",
      "asset_request" => "Request"
	),
    "2" =>  array(
      "asset_title" => "Role Change",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_approve",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_request" => "Request"
	),
    "3" =>  array(
      "asset_title" => "Templates",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_ellipse",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	),
    "4" =>  array(
      "asset_title" => "File Share",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_warning",
      "asset_class" => "icon sprite-icons-file_share",
      "asset_request" => "Request"
	),
    "5" =>  array(
      "asset_title" => "Database",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-database",
      "asset_request" => "Request"
	)),*/

	/*"Applications" => array(
    "1" =>  array(
      "asset_title" => "Templates",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-templates",
      "asset_request" => "Request"
	),
    "2" =>  array(
      "asset_title" => "Role Change",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_approve",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_request" => "Request"
	),
    "3" =>  array(
      "asset_title" => "Security Device",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_ellipse",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	)),*/

	"Security" => array(
    "1" =>  array(
      "asset_title" => "Secure Remote Access",
      "asset_detail" => "Secure Remote Access is used to access NBCUniversal network when you are away from office. It uses a two factor authentication.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_link_class" => "",
      "asset_request" => "Request",
      "asset_url" => "/request/assets/remoteaccess"
	  //"asset_url" => "/request/assets/remoteaccess_sailpoint"
	),
	 "2" =>  array(
      "asset_title" => "RSA Awaiting Approval List",
      "asset_detail" => "RSA Awaiting Approval List",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-database",
      "asset_link_class" => "",
      "asset_request" => "Request",
      //"asset_url" => "/request/assets/remoteaccess"
	  "asset_url" => "/rsa/approvals/list"
	),
   /* "2" =>  array(
      "asset_title" => "Certificate",
      "asset_detail" => "The PKI (public key infrastructure) Certificate  identifies an individual and enables the use of encryption and digital signature services across a wide variety of applications.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-secure_remote_access",
      "asset_link_class" => "",
      "asset_request" => "Request",
      "asset_url" => "/request/assets/remoteaccess"
	),*/
    "3" =>  array(
      "asset_title" => "Domain Tilde Account",
      "asset_detail" => "Domain Tilde account provides administrative access to various domain and server services.",
      //"asset_status_class" => $tilde_asset_status_class,
       "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_link_class" => "",
      "asset_request" => "Request",
      //"asset_url" => "request/assets/tildeaccount/".$tilde_asset_request
      "asset_url" => "request/assets/tilde"
	)),
	"System Resources" => array(
   /* "1" =>  array(
      "asset_title" => "Templates",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-templates",
      "asset_request" => "Request"
	),
    "2" =>  array(
      "asset_title" => "Role Change",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_approve",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_request" => "Request"
	),
    "3" =>  array(
      "asset_title" => "Security Service",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_ellipse",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	),
    "4" =>  array(
      "asset_title" => "File Share",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_warning",
      "asset_class" => "icon sprite-icons-file_share",
      "asset_request" => "Request"
	),
    "5" =>  array(
      "asset_title" => "Database",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-database",
      "asset_request" => "Request"
	),
    "6" =>  array(
      "asset_title" => "Wireless",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-wireless",
      "asset_request" => "Request"
	),
    "7" =>  array(
      "asset_title" => "Webex Meeting",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-webex_meeting",
      "asset_request" => "Request"
	),
    "8" =>  array(
      "asset_title" => "Server",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-server",
      "asset_request" => "Request"
	),*/
    /*"9" =>  array(
      "asset_title" => "Provisioning",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-provisioning",
      "asset_request" => "Request"
	)*/
    "10" =>  array(
      "asset_title" => "Application Access",
      "asset_detail" => "Provides application access to many SOX L1 and L2 applications.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-templates",
      "asset_link_class" => "external_asset_link",
      "asset_request" => "Request",
      "asset_url" => variable_get('app_access_url','http://iam.inbcu.com/idm/user/processLaunch.jsp?newView=true&id=NBC_WF_Common_CallProvision&op_action=reqAccess&op_requesttype=New&redirect=0')
	),
    "11" =>  array(
      "asset_title" => "Server Access",
      "asset_detail" => "Use this to get access to various Windows and Linux servers.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-database",
      "asset_link_class" => "external_asset_link",
      "asset_request" => "Request",
      "asset_url" => "http://iam.inbcu.com/idm/user/processLaunch.jsp?newView=true&id=NBC_WF_Common_ManageIMSAccounts&op_reqappname=SERVERACCESS"
	)),

	"Office Productivity" => array(
    "1" =>  array(
      "asset_title" => "Personally Owned Mobile Device Access",
      "asset_detail" => "This will provide access to NBCUniversal mail in your personal Mobile Device access.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "",
      "asset_request" => "Request",
      "asset_url" => "request/assets/mobiledevice"
	)),

  "Other" => array (
    "1" =>  array (
      "asset_title" => "Application Registration - Role Change",
      "asset_detail" => "Application Registration - Role Change.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "external_asset_link",
      "asset_request" => "Request",
      "asset_url" =>  variable_get('app_reg_role_change','http://iam.inbcu.com/idm/user/processLaunch.jsp?newView=true&id=NBC_WF_APPREG_CallApplicationRegistration&op_action=appreg&op_requesttype=appregRolechng')
    ),
    "2" =>  array (
      "asset_title" => "Application Registration - Provisioning",
      "asset_detail" => "Application Registration - Provisioning.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "external_asset_link",
      "asset_request" => "Request",
      "asset_url" => variable_get('app_reg_provisioning','http://iam.inbcu.com/idm/user/processLaunch.jsp?newView=true&id=NBC_WF_APPREG_Prov_CallApplicationRegistration&op_action=appreg&op_requesttype=appregProv')
    ),
  ),

	/*"Personal Services" => array(
    "1" =>  array(
      "asset_title" => "Remote Voice",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_alert",
      "asset_class" => "icon sprite-icons-templates",
      "asset_request" => "Request"
	),
    "2" =>  array(
      "asset_title" => "Calling Card",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_approve",
      "asset_class" => "icon sprite-icons-role_change",
      "asset_request" => "Request"
	),
    "3" =>  array(
      "asset_title" => "Personal Fax",
      "asset_detail" => "Lorem ipsum dolor sit amet, adipiscing elit. Mauris ac orci viamet. Lorem ipsum dolor sit amet, consecte.",
      "asset_status_class" => "icon_ellipse",
      "asset_class" => "icon sprite-icons-security_device",
      "asset_request" => "Request"
	))*/
	);

  global $user;
  if (empty($userid)) {
    $userid = empty($user->name) ? '' : $user->name;
  }
  $userData = _idm_profile_get_user($userid);
  $userDataRoles = array();
  if(isset($userData['roles'])){
    foreach ($userData['roles'] as $key => $val) {
      $userDataRoles[] = $val->value;
    }
    if(in_array('Finance Admin', $userDataRoles)) {
      $asset_content["Other"]["3"] = array (
        "asset_title" => "Administer Financial Attributes",
        "asset_detail" => "Administer Financial Attributes.",
        "asset_status_class" => "",
        "asset_class" => "icon sprite-icons-mobile_access",
        "asset_link_class" => "external_asset_link",
        "asset_request" => "Request",
        "asset_url" => variable_get('admin_fin_attribute',' http://iam.inbcu.com/idm/NBC/worker/user/NBCTNESearchUser.jsp?&tandeApprover=')
      );
    }
	 if(in_array('Vroozi Administrator',$user->roles)) {
	  $asset_content["Other"]["4"] = array (
      "asset_title" => "Purchase Manager Profile Management",
      "asset_detail" => "Purchase Manager Profile Management.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "self_other_url",
      "asset_request" => "Request",
      "asset_url" => "/request/assets/vroozi-profile-mgtt"
	);
  }

  if(in_array('Wireless Administrator',$user->roles)) {
	  $asset_content["Other"]["5"] = array (
      "asset_title" => "Administer Wireless Attributes",
      "asset_detail" => "Administer Wireless Attributes.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "self_other_url",
      "asset_request" => "Request",
      "asset_url" => "/request/assets/wireless-attributess"
	);
	 $asset_content["Other"]["6"] = array (
      "asset_title" => "Bulk Loader - Wireless Attribute",
      "asset_detail" => "Bulk Loader - Wireless Attribute.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "self_other_url",
      "asset_request" => "Request",
      "asset_url" => "/request/assets/bulkop"
	);
  }
  }
  $asset_content["Other"]["7"] = array (
      "asset_title" => "Auditing and Reporting",
      "asset_detail" => "Auditing and Reporting.",
      "asset_status_class" => "",
      "asset_class" => "icon sprite-icons-mobile_access",
      "asset_link_class" => "external_asset_link",
      "asset_request" => "Request",
      "asset_url" => variable_get('audit_and_report_attribute','http://iam.inbcu.com/idm/user/processLaunch.jsp?newView=true&id=NBC_WF_ARR_CallMain&op_action=reqAccess&op_requesttype=New')
  );
  $var['renews_count'] = "2";
  $var['asset'] = $asset_content;

	return theme('assets', $var);
}
function idm_request_assets_certificate($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['cert'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'cert-info'
		)
	  ),
  );
  $form['cert']['title'] = array(
      '#markup' => 'Who is the certificate for ?',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['cert']['certificate-for'] = array(
      '#type' => 'radios',
	  '#default_value' =>  t('Myself'),
	  '#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	  '#default_value' => 1,
	  '#prefix' => '<div class="field-row certificate-for">',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['cert']['name'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#autocomplete_path' => 'autocomplete/employee',
      '#prefix' => '<div class="field-row search-name">',
      '#suffix' => '<div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>'
  );
  $form['assets'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'assets-info'
		)
	  ),
  );
  $form['assets']['title'] = array(
      '#markup' => 'Assets Details',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['assets']['certificate-type'] = array(
      '#title' => t('Certificate Type'),
      '#type' => 'select',
      '#options' => array('General' => 'General'),
    '#default_value' => 'General',
	  '#prefix' => '<div class="field-row certificate-type"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
  $form['assets']['certificate-usage'] = array(
      '#title' => t('Certificate Usage'),
      '#type' => 'select',
      '#options' => array('Authentication' => 'Authentication'),
    '#default_value' => 'Authentication',
	  '#prefix' => '<div class="field-row certificate-usage"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
  $form['assets']['asset-class'] = array(
      '#title' => t('Asset Class'),
      '#type' => 'select',
      /*'#options' => array('Device' => 'Device', 'Computer' => 'Computer'),
      '#default_value' => "Device",*/
      '#options' => array('Computer' => 'Computer'),
      '#default_value' => "Computer",
      '#prefix' => '<div class="field-row asset-class"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['assets']['asset-type'] = array(
      '#title' => t('Asset Type'),
      '#type' => 'select',
      /*'#options' => array('Mobile Phone' => 'Mobile Phone', 'Mobile Tablet' => 'Mobile Tablet' , 'Workstation' => 'Workstation'),
      '#default_value' => "Mobile Phone",*/
      '#options' => array('Workstation' => 'Workstation'),
      '#default_value' => "Workstation",
      '#prefix' => '<div class="field-row asset-type"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['assets']['make'] = array(
      '#title' => t('Make'),
      '#type' => 'select',
      /*'#options' => array('Apple' => 'Apple', 'Dell' => 'Dell'),
      '#default_value' => "Apple",*/
      '#options' => array('Dell' => 'Dell'),
      '#default_value' => "Dell",
      '#prefix' => '<div class="field-row make"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['assets']['model'] = array(
      '#title' => t('Model'),
      '#type' => 'select',
      /*'#options' => array('iPhone' => 'iPhone', 'iPad' => 'iPad', 'Latitude' => 'Latitude', 'Macbook Air' => 'Macbook Air'),
      '#default_value' => "iPhone",*/
      '#options' => array('Latitude' => 'Latitude'),
      '#default_value' => "Latitude",
      '#prefix' => '<div class="field-row model"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['assets']['asset-ownership'] = array(
      '#title' => t('Asset Ownership'),
      '#type' => 'select',
      '#options' => array('Corporate' => 'Corporate'),
      '#default_value' => "Corporate",
	  '#prefix' => '<div class="field-row asset-ownership"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
   $form['assets']['service-provider'] = array(
      '#title' => t('Service Provider'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row service-provider"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['assets']['os-version'] = array(
      '#title' => t('OS Version'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row os-version"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['assets']['wireless-number'] = array(
      '#title' => t('Wireless Number'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row wireless-number"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['assets']['personal-email'] = array(
      '#title' => t('Personal Email'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row personal-email"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['assets']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
      '#required' => FALSE,
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['assets']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  $form['assets']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );
  return $form;
}

function _idm_request_assets_certificate_options($asset_class_val = '', $asset_type_val = '', $asset_make_val = ''){
/*
	$assets = array (
	"Device" => array(
		"Mobile Phone" => array( "Apple" => array ("iPhone" => "iPhone")),
		"Mobile Tablet" => array("Apple" => array ("iPad" => "iPad")),
		),
	"Computer" => array (
		"Workstation" => array("Apple" => array ("Macbook Air" => "Macbook Air"), "Dell" => array ("Latitude" => "Latitude"))
		)
	);
  */
  $assets = array (
	"Computer" => array (
		"Workstation" => array("Dell" => array ("Latitude" => "Latitude"))
		)
	);
	$asset_type_options = "<select id='asset_type'>";
	if(trim($asset_class_val) !="" ) {
		$asset_class = trim($asset_class_val);
		$selectedflag = "selected = 'selected'";
		foreach ($assets[$asset_class] as $asset_type_key => $asset_type) {
			$asset_type_options .= "<option value='".$asset_type_key."' ".$selectedflag.">".$asset_type_key."</option>";
			$selectedflag = "";
			if(!isset($asset_type_default)) { $asset_type_default = $asset_type_key; }
		}
		$asset_type_options .= "</select>";
		print($asset_type_options);
	}
	$asset_make_options = "<select id='asset_make'>";
	if(trim($asset_type_val) !="" || (isset($asset_type_default) && $asset_type_default !="")) {
		$asset_class = trim($asset_class_val);
		$asset_type = (trim($asset_type_val) !="") ? trim($asset_type_val) : $asset_type_default;
		$selectedflag = "selected = 'selected'";
		foreach ($assets[$asset_class][$asset_type] as $asset_make_key => $asset_make) {
			$asset_make_options .= "<option value='".$asset_make_key."' ".$selectedflag.">".$asset_make_key."</option>";
			$selectedflag = "";
			if(!isset($asset_make_default)) { $asset_make_default = $asset_make_key; }
		}
		$asset_make_options .= "</select>";
		print($asset_make_options);
	}
	$asset_model_options = "<select id='asset_model'>";
	if(trim($asset_make_val) !="" || (isset($asset_make_default) && $asset_make_default !="")) {
		$asset_class = trim($asset_class_val);
		$asset_type = (trim($asset_type_val) !="") ? trim($asset_type_val) : $asset_type_default;
		$asset_make = (trim($asset_make_val) !="") ? trim($asset_make_val) : $asset_make_default;
		$selectedflag = "selected = 'selected'";
		foreach ($assets[$asset_class][$asset_type][$asset_make] as $asset_model_key => $asset_model) {
			$asset_model_options .= "<option value='".$asset_model_key."' ".$selectedflag.">".$asset_model_key."</option>";
			$selectedflag = "";
		}
		$asset_model_options .= "</select>";
		print($asset_model_options);
	}
}
function idm_request_assets_certificate_validate($form, $form_state){
  global $user;
  $request_info = new stdClass();
  $asset_info = array();
  $requested_for = $user->name;
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');

  if($form_state['values']['certificate-for'] != MY_SELF && !empty($form_state['values']['name'])){
      preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
      $requested_for = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
	  $info = _idm_profile_get_user($sso[1]);
      $address_work_country = $info['address']['work']['country'];
      if($info['usertype'] == 'contractor' || $address_work_country != 'US' || $address_work_country != 'UNITED STATES') {
        form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Requested for user should not be Contractor or International User !!!'));
        return;
      }
	  //Manage name calculation
	  $manager_sso = '';
	  $user_type = '';
	  $info['usertype'] = isset($info['usertype']) ? $info['usertype'] : '';
	  $user_type = $info['usertype'];
	  if ($user_type == 'employee') {
	    $manager_sso = $info['sso'];
	  } elseif ($user_type == 'contractor' || $user_type == 'functional') {
	    $manager_sso = $info['managerid'];
	  }
	  $selected_user_managerid = $manager_sso;
  }

  if($form_state['values']['certificate-for'] == '1') {
//	$message = 'Request has been submitted and is pending with your managers approval. Once the request is approved, you will receive an email with the access details.';
	$message = 'Request has been submitted. The selected user will receive an email with the access details.';
  }
  if($form_state['values']['certificate-for'] == '2') {
	if($user->name != $selected_user_managerid) {
	//  $message = "Request has been submitted and is pending with the manager's approval. Once the request is approved, the selected user will receive an email with the access details.";
        $message = 'Request has been submitted. The selected user will receive an email with the access details.';
		idm_notifications_clear_user_cache($selected_user_managerid);
	}
	else {
	  $message = 'Request has been submitted. The selected user will receive an email with the access details.';
	}
  }
	$url .= '/workflow/request/'.$requested_for.'/Certificate?requestor='.$user->name;

  $request_info->schemas = array (
		'urn:scim:schemas:core:1.0'
	);
  $key = 0;
  $asset_info[$key]->type = 'custom_certType';
  $asset_info[$key++]->value = $form_state['values']['certificate-type'];
  $asset_info[$key]->type  = 'custom_certUsage';
  $asset_info[$key++]->value = $form_state['values']['certificate-usage'];
  $asset_info[$key]->type = 'custom_assetClass';
  $asset_info[$key++]->value = $form_state['values']['asset-class'];
  $asset_info[$key]->type = 'custom_assetType';
  $asset_info[$key++]->value = $form_state['values']['asset-type'];
  $asset_info[$key]->type = 'custom_make';
  $asset_info[$key++]->value = $form_state['values']['make'];
  $asset_info[$key]->type = 'custom_model';
  $asset_info[$key++]->value = $form_state['values']['model'];
  $asset_info[$key]->type = 'custom_assetOwnership';
  $asset_info[$key++]->value = $form_state['values']['asset-ownership'];
  if(!empty($form_state['values']['service-provider'])){
    $asset_info[$key]->type = 'custom_serviceProvider';
    $asset_info[$key++]->value = $form_state['values']['service-provider'];
  }
  if(!empty($form_state['values']['os-version'])){
    $asset_info[$key]->type = 'custom_OSVersion';
    $asset_info[$key++]->value = $form_state['values']['os-version'];
  }
  if(!empty($form_state['values']['wireless-number'])){
    $asset_info[$key]->type = 'custom_wirelessNo';
    $asset_info[$key++]->value = $form_state['values']['wireless-number'];
  }
  if(!empty($form_state['values']['personal-email'])){
    $asset_info[$key]->type = 'personalEmail';
    $asset_info[$key++]->value = $form_state['values']['personal-email'];
  }
  if(!empty($form_state['values']['comments'])){
    $asset_info[$key]->type = 'custom_comments';
    $asset_info[$key++]->value = $form_state['values']['comments'];
  }
  $entitlements->type = 'application';
  $entitlements->value = 'Certificate';
  $entitlements->attributes = $asset_info;
  $request_info->entitlements = array($entitlements);
  $request_info->id = $requested_for;

  $user_json = json_encode($request_info);
	$method = 'POST';
  //print $user_json;exit;
  $result = idm_profile_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	//$info = curl_getinfo($ch);

	// returning result
  if(isset($result_obj->transaction) || isset($result_obj->custom_transactionId)){
    //drupal_set_message('Request has been submitted. Please allow up to 60 minutes for the data to flow to downstream applications.');
    //drupal_set_message($message);
    drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'. $message, $allowed_tags = array('img')));
  }elseif(!PROD){
    form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Service Error !!!'));
    //IP-1134
    //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">', $allowed_tags = array('img')));
    //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>'.'<br />USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($result, TRUE) . '</pre>', $allowed_tags = array('img')));
    //form_set_error('', t('Service Error !!!'));
    //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
    //drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
    //drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
  }
  drupal_goto();
}
function _idm_request_assets_certificate_confirmation(){

$asset_certificate_details = array (
	"Requestor" => "Veronica Jordan",
	"SSO" => "206111111",
	"Email" => "v.jordan@mail.com",
	"Manager/Sponsor" => "Lan Rogers (206000000)",
	"Application Name" => "Certificate",
	"Request Date" => "10/22/2013",
	"Certificate Type" => "General",
	"Certificate Usage" => "Authentication",
	"Asset Class" => "Device",
	"Asset Type" => "Mobile Phone",
	"Make" => "Apple",
	"Model" => "iPhone",
	"Asset Ownership" => "Corporate"
	);
	$var['certificate_info'] = $asset_certificate_details;
	return theme('assets_certificate_info', $var);

}

function _idm_request_assets_tilde_account($tilde_value) {
  global $user;
  $userid = empty($user->name) ? '' : $user->name;
  if ($tilde_value == 'view') {
    $account_info = ctools_object_cache_get('api', 'assets_tilde_account_info'.$userid);
    if(!empty($account_info)) {
      $var['info'] = $account_info;
      //echo '<pre>';
      //print_r($var['info']);
      return theme('assets_view_admin_account_profile', $var);
    } else {
      $url = variable_get('rest_api_check_url');
      $filter = rawurlencode('id eq '.$userid.' and usertype eq domaintildeaccount');
      $url = $url . '/internal/users?filter='.$filter;
      $result = _idm_portal_get_api_data($url);
      //echo '<pre>';
      //print_r($result->data);
      if(!empty($result->data)) {
        $admin_account_info = json_decode($result->data);
        if(!empty($admin_account_info->results) && ($admin_account_info->results > 0)) {
          $account_info['custom_supervisorName'] = $admin_account_info->Resources[0]->custom_supervisorName;
          $account_info['custom_supervisorId'] = $admin_account_info->Resources[0]->custom_supervisorId;
          $account_info['name'] = $admin_account_info->Resources[0]->displayName;
          $account_info['employee_id'] = $admin_account_info->Resources[0]->employeeID;
          $account_info['employee_number'] = $admin_account_info->Resources[0]->employeeNumber;
          //$account_info['account_expires'] = $admin_account_info->Resources[0]->accountExpires;
          $milliseconds = $admin_account_info->Resources[0]->accountExpires;
          $seconds = $milliseconds / 1000;
          $account_info['account_expires'] = date("m/d/Y", $seconds);
          $account_info['user_name'] = $admin_account_info->Resources[0]->userName;
          $account_info['id'] = $admin_account_info->Resources[0]->id;
          $var['info'] = $account_info;
          ctools_object_cache_set('api', 'assets_tilde_account_info'.$userid, $account_info);
          return theme('assets_view_admin_account_profile', $var);
        }
      }
    }
  }
}

function _idm_request_account($application){
  global $user;
  //echo $application;
  $sso = $user->name;
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');
  $url .= '/internal/accounts';
  $method = 'POST';
  if ($application == 'dropbox') $application = 'Dropbox';
  $user_json = json_encode(array('schemas' => array("urn:scim:schemas:core:1.0"), 'sso' => $sso, 'application' => $application, 'send_email' => true));
  //echo $user_json;
  $result = idm_profile_execute_curl($url, $user_json, $method);
  echo '<!--';
  print_r(json_decode($result, true));
  echo '-->';

  $error = json_decode($result, true);
  $errorCode = $error['errorCode'];
  $errorMessage = $error['errorMessage'];
  $detail = '';

  $message = "$application account request processed. Please watch your email inbox for an activation email.";

  if ($errorCode) { // ($errorCode == 429 || $errorCode == 400 || $errorCode == 500) {
    db_query("INSERT INTO {api_retry} (httpverb, url, payload, httpstatus, httpresponse, retries, status) VALUES ('POST', '/internal/accounts', '$user_json', '$errorCode', '" . mysql_real_escape_string($errorMessage) . "', 0, 'OPEN')");
	/*$nid = db_insert('api_retry')
	->fields(array(
	  'httpverb' => 'POST',
	  'url' => '/internal/accounts',
	  'payload' => $user_json,
	  'httpstatus' => $errorCode,
	  'httpresponse' => mysql_real_escape_string($errorMessage),
	  'retries' => 0,
	  'status' => 'OPEN',
	))
	->execute();*/
	if ($errorCode != 429 && $errorCode != 200) {
		$message = $errorMessage;
		if (substr($message, 0, 15) == 'Following error') {
			$messageJson = substr($message, 161);
			$message = 'The following error occurred while trying to provision the account:';
			if (substr($messageJson, 0, 1) == '{') {
				$messageArr = json_decode($messageJson, true);
				$detail = str_replace('_', ' ', $messageArr['error']);
			} else {
				$detail = $messageJson;
			}
		}
	}
  }

  $userid = empty($user->name) ? '' : $user->name;
  $var['info'] = $error;
  $var['info']['message'] = $message;
  $var['info']['detail'] = $detail;
  $var['info']['application'] = $application;
  return theme('assets_request_account', $var);
}

function idm_request_assets_domain_tilde_existance() {
  $tildeaccount_exist_flag = 0;
  global $user;
  $userid = empty($user->name) ? '' : $user->name;
  $url = variable_get('rest_api_check_url');
  $filter = rawurlencode('id eq '.$userid.' and usertype eq domaintildeaccount');
  $url = $url . '/internal/users?filter='.$filter;
  $result = _idm_portal_get_api_data($url);
  if(!empty($result->data)) {
    $admin_account_info = json_decode($result->data);
    if(!empty($admin_account_info->results) && ($admin_account_info->results > 0)) {
      $account_info['id'] = $admin_account_info->Resources[0]->id;
      if ($account_info['id'] != '') {
        $tildeaccount_exist_flag = 1;
      } else {
        $tildeaccount_exist_flag = 0;
      }
    }
  } else {
    $tildeaccount_exist_flag = 0;
  }
  return $tildeaccount_exist_flag;
}

/**
  * Function to create domain tilde account form
  */
function idm_request_assets_domain_tilde_account($form, &$form_state) {
  if(isset($_SESSION['legacy'])) {
    $external_url = variable_get('idm_waveset_create_tilde_account_url','https://sso.stg.inbcu.com/nbcucentral/app/pwchange.jsp');
    drupal_goto($external_url, array('external' => TRUE));
  } else {
    global $user;
    $profile_id = empty($user->name) ? '' : $user->name;
    drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
    $form['#attributes']['class'][] = 'myidentityform';
    $path = drupal_get_path('theme', 'idmtheme');
    drupal_add_js($path . '/js/jquery.maskedinput.min.js');
    drupal_add_js($path . '/js/jquery.validate.min.js');
    drupal_add_js($path . '/js/validate.js');

    $form['domain'] =  array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('domain-info')),
    );

    $tildeaccount_exist_flag = idm_request_assets_domain_tilde_existance();
    $someone_field_style =  $tildeaccount_exist_flag ? 'style="display:block !important;"': '';
    /*
    if ($tildeaccount_exist_flag == 1) {
      $title_suffix = '</h2></div><div style="text-align:left;margin-left:40%;font-family:rock-sans-normal,sans-serif;font-size:1.1em;position:relative;margin-top: -30px;"><h2><a href="/request/assets/tildeaccount/view" style="color:#434343">View Details</a></h2></div>';
    } else {
      $title_suffix = '</h2></div>';
    }
    */

    $form['domain']['title'] = array(
      '#markup' => 'Who is the request for ?',
      '#prefix' => '<div class="title"><h2>',
      //'#suffix' => $title_suffix,
      '#suffix' => '</h2></div><div id="view_tilde" style="display:none;"><input type="button" value="View Details" name="viewtilde" id="edit-view-tilde" class="hover-blue view_tilde_button"></div><div id="view_tilde_flag" style="display:none;">'.$tildeaccount_exist_flag.'</div>',
      //'#suffix' => '</h2></div><div id="view_tilde" style="text-align:left;margin-left:40%;font-family:rock-sans-normal,sans-serif;font-size:1.1em;position:relative;margin-top: -30px;display:none;"><h2><a href="/request/assets/tildeaccount/view" style="color:#434343">View Details</a></h2></div><div id="view_tilde_flag" style="display:none;">'.$tildeaccount_exist_flag.'</div>',
    );

    $form['domain']['request_for'] = array(
      '#type' => 'radios',
      //'#options' => $tildeaccount_exist_flag ? array(2 => t('Someone Else')) : array(1 => t('Myself'),2 => t('Someone Else')),
      '#options' => array(1 => t('Myself'),2 => t('Someone Else')),
      '#default_value' =>  $tildeaccount_exist_flag ? 2 : 1,
      '#prefix' => '<div class="field-row domain-request-for">',
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('styled')),
    );

    $form['domain']['name'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#autocomplete_path' => 'autocomplete/tildesomeoneelsename',
      '#prefix' => '<div class="field-row domain-search-name" '.$someone_field_style.'>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><!--div id="someoneelse_flag" style="display:none;">0</div--><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
      );
    $form['domain']['nam_hidden'] = array(
      '#type' => 'hidden',
      '#default_value' => 'not mgrselected',
      '#attributes' => array (
       'id' => 'nam_id'
      ),
    );
    $form['domain']['someoneelse_flag'] = array(
        '#type' => 'hidden',
        '#default_value' => 0,
        '#attributes' => array('id' => 'someoneelse_flag'),
    );

    $form['domaintilde'] =  array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('domain-info')),
    );

    $form['domaintilde']['detail'] = array(
        '#markup' => 'Account Details',
        '#prefix' => '<div class="title"><h2>',
        '#suffix' => '</h2></div>'
    );
  /*
    $form['domaintilde']['additional_approver'] = array(
      '#title' => t('Additional Approver'),
      '#type' => 'textfield',
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row domain-additional-approver"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '</div>',
    );
  */
    $form['domaintilde']['copy_profile'] = array(
      '#title' => t('Copy Profile'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#autocomplete_path' => 'autocomplete/tilde',
      '#prefix' => '<div class="field-row domain-copy-profile"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<label class="error" for="edit-copy-profile" generated="true" style="display: none;">Please select copy profile</label></div><!--div id="copy_profile_flag" style="display:none;">0</div-->',
    );
    $form['domaintilde']['pro_hidden'] = array(
      '#type' => 'hidden',
      '#default_value' => 'not proselected',
      '#attributes' => array (
       'id' => 'pro_id'
      ),
    );
    $form['domaintilde']['copy_profile_flag'] = array(
      '#type' => 'hidden',
      '#default_value' => 0,
      '#attributes' => array('id' => 'copy_profile_flag'),
    );
    $form['domaintilde']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
      '#required' => TRUE,
      '#default_value' => '',
      '#resizable' => FALSE,
      '#prefix' => '<div class="field-row domain-comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
    );

    $form['domaintilde']['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Submit'),
      //'#attributes' => array('class' => array('small_button hover-blue')),
      //onclick copy_profile_flag_validate validation
      //'#attributes' => array('class' => array('small_button hover-blue'), 'onClick' => 'copy_profile_flag_validate();return false;'),
      //'#attributes' => array('class' => array('small_button hover-blue'), 'onClick' => 'return copy_profile_flag_validate(event);'),
      '#attributes' => array('class' => array('small_button hover-blue')),
      '#prefix' => '<div class="submit-buttons-row" >',
    );

    $form['domaintilde']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey')),
      '#suffix' => '</div><div class="ajax_throbber" style="display: none;"><img src="/sites/all/themes/idmtheme/images/ajax-loader.gif"></div>',
    );
    return $form;
  }
}

/**
 * Callback function to validate and save group
 */
function idm_request_assets_domain_tilde_account_validate($form, &$form_state) {
  global $user;
  $requestor_id = empty($user->name) ? '' : $user->name;
  $request_for = $form_state['values']['request_for'];
  $name = $form_state['values']['name'];
  //$additional_approver = $form_state['values']['additional_approver'];
  $copy_profile = $form_state['values']['copy_profile'];
  $comments = $form_state['values']['comments'];

  //created-for name calculation
  $request_for_sso = '';
  $sso = '';
  $pos_r = '';
  if($form_state['values']['request_for'] == 2 && !empty($form_state['values']['request_for'])){
      //some one else manager case
      $pos_r = strpos($form_state['values']['name'], '(');
	  if ($pos_r !== false) {
	    preg_match('/[\w\s]+\(([\d]+)\)*/', $name, $sso);
	    $request_for_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
	  } else {
	    $request_for_sso = isset($form_state['values']['name'])? $form_state['values']['name'] : '';
      }
      if($form_state['values']['someoneelse_flag'] == 0) {
	      $result = idm_profile_tildesomeoneelsename_autocomplete($request_for_sso, $check = 'server');
		  $valid = explode("-", $result);
		  if($valid[0] == 0) {
			form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('You are requesting for invalid user !!!'));
			return;
		  } else {
	         $request_for_sso = $valid[1];
		  }
	  }
  } else {
    //Myself manager case
    $request_for_sso = $requestor_id;
  }
  //copy-profile name calculation
  $copy_profile_sso = '';
  $cp_sso = '';
  $pos_g = strpos($copy_profile, '(');
  if ($pos_g !== false) {
    preg_match('/[\w\s]+\(([\d]+)\)*/', $copy_profile, $cp_sso);
    $copy_profile_sso = $cp_sso[1];
  } else {
    $copy_profile_sso = $copy_profile;
  }
  if($form_state['values']['copy_profile_flag'] == 0) {
    $result = idm_profile_tilde_autocomplete($copy_profile_sso, $check = 'server');
  	$valid = explode("-", $result);
  	if($valid[0] == 0) {
  		form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('You have entered invalid copy profile user !!!'));
  		return;
  	} else {
  	   $copy_profile_sso = $valid[1];
  	}
  }

  //$copy_profile_sso = '600000095';

  $tilde = new stdClass();
  $tilde->schemas = array ('urn:scim:schemas:core:1.0');
  $tilde->entitlements = array();

  $entitlements[0] = array();
  $entitlements[0]['type'] = 'application';
  $entitlements[0]['value'] = 'TildeAD';

  $attributes = array();
  $attributes[0]['type'] = 'custom_copyprofileSSO';
  $attributes[0]['value'] = '~'.$copy_profile_sso;
  $attributes[1]['type'] = 'custom_comments';
  $attributes[1]['value'] = $comments;
  $entitlements[0]['attributes'] = $attributes;

  $tilde->entitlements = $entitlements;

  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest').'/workflow/request/'.$request_for_sso.'/TildeAD?requestor='.$requestor_id;
  $method = 'POST';
  $tilde_json = json_encode($tilde);
  $tilde_result = idm_profile_execute_curl($url, $tilde_json, $method);
  $tilde_result_obj = json_decode($tilde_result);
  //returning result
  if(isset($tilde_result_obj->custom_transactionId)){
      $approvers = explode(",", variable_get('tilde_request_approvers', TILDE_REQUEST_DEFAULT_APPROVER));
      foreach($approvers AS $approver){
       idm_notifications_clear_user_cache(trim($approver));
      }
      $success_message = "Your domain tilde account creation request has been sent for approval.";
      drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
      //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message.'<br />DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>'.'<br />USER JSON<pre>' . print_r($tilde_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($tilde_result, TRUE) . '</pre>', $allowed_tags = array('img')));
      //drupal_set_message($success_message);
      //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
      //drupal_set_message('USER JSON<pre>' . print_r($tilde_json, TRUE) . '</pre>');
      //drupal_set_message('RESULT<pre>' . print_r($tilde_result, TRUE) . '</pre>');
      drupal_goto('assets');
  } elseif(!PROD){
      form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Error occurred during new domain tilde account creation request. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.'));
      //IP-1134
      //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>'.'<br />USER JSON<pre>' . print_r($tilde_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($tilde_result, TRUE) . '</pre>', $allowed_tags = array('img')));
      //form_set_error('', t('Error occurred during new domain tilde account creation request. Please contact the <a href="mailto:identityservicessupportIDM@nbcuni.com">IdM Support Team</a> for assistance.'));
      //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
      //drupal_set_message('USER JSON<pre>' . print_r($tilde_json, TRUE) . '</pre>');
      //drupal_set_message('RESULT<pre>' . print_r($tilde_result, TRUE) . '</pre>');
  }
}

/**
  * Function to create RSA form
  */
function idm_request_assets_rsa($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');

  $form['rsa'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'rsa-info'
		)
	  ),
  );
  $form['rsa']['title'] = array(
      '#markup' => 'Who is the remote access for ?',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['rsa']['remote-access-for'] = array(
      '#type' => 'radios',
	  '#default_value' =>  t('Myself'),
	  '#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	  '#default_value' => 1,
	  '#prefix' => '<div class="field-row remote-access-for">',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['rsa']['name'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name">',
      '#suffix' => '<div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>'
  );
  $form['request-access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'rsa-info'
		)
	  ),
  );
  $form['request-access']['access-token'] = array(
      '#markup' => 'Request Access To Remote Access Token',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
 /* $form['request-access']['note'] = array(
      '#markup' => "Note: A soft token is free and the hard token will cost $50 to the recipient's department. If the recipient has a Mobile device, it is recommended to request a soft token.",
      '#prefix' => '<div class="field-row note"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['request-access']['type-of-token'] = array(
      '#title' => t('Does the recipient have a Mobile device'),
      '#type' => 'radios',
	  '#options' => array('soft' => t('Yes'),'hard' => t('No')),
	  '#prefix' => '<div class="field-row type-of-token"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );*/
  $form['request-access']['location'] = array(
      '#title' => t('Location'),
      '#type' => 'select',
      '#options' => array('' => '--Select a Location--', 'Florida' => 'Florida', 'London' => 'London', 'New Jersey' => 'New Jersey', 'New York' => 'New York', 'Other - FedEx' => 'Other - FedEx', 'Universal City' => 'Universal City', 'Washington' => 'Washington'),
      '#default_value' => '',
	  '#prefix' => '<div class="field-row location"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['request-access']['locationaddress'] = array(
      '#title' => t('Location Address'),
      '#type' => 'select',
      '#options' => array('' => '--Select an Address--'),
      '#default_value' => '',
	  '#prefix' => '<div class="field-row locationaddress"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
  $form['request-access']['fedexdeliveryaddress'] = array(
      '#title' => t('FedEx Delivery Address '),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row fedexdeliveryaddress"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );
  $form['request-access']['phoneno'] = array(
      '#title' => t('Phone No.'),
      '#type' => 'textfield',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row phoneno"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );
  $form['request-access']['typeofrequest'] = array(
      '#title' => t('Type of Request'),
      '#type' => 'select',
      '#options' => array('' => '--Select a Request Type--', 'New' => 'New', 'Replacement' => 'Replacement'),
      '#default_value' => '',
	  '#prefix' => '<div class="field-row typeofrequest"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	  '#chosen' => TRUE,
  );
  $form['request-access']['devicetype'] = array(
      '#title' => t('Device Type'),
      '#type' => 'select',
      '#options' => array('' => '--Select a Device Type--', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Windows Phone' => 'Windows Phone', 'Android' => 'Android', 'Laptop' => 'Laptop', 'Desktop' => 'Desktop'),
      '#default_value' => '',
	  '#prefix' => '<div class="field-row devicetype"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	  '#chosen' => TRUE,
  );
 /* $form['request-access']['type-of-token-request'] = array(
      '#title' => t('Type of Token Request'),
      '#type' => 'item',
      '#markup' => "<div class='request-description'>Type of token request</div>",
	  '#prefix' => '<div class="field-row type-of-token-request">',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );*/
  $form['request-access']['tokenrequest'] = array(
    '#type' => 'hidden',
    '#default_value' => 'Soft Token',
    '#attributes' => array ('id' => array ('tokenrequest')),
  );
  $form['request-access']['serialno'] = array(
      '#title' => t('Serial No. (Engraved on Back of the Token)'),
      '#type' => 'textfield',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row serialno">',
      '#suffix' => '</div>'
  );
  $form['request-access']['reasonreplacement'] = array(
      '#title' => t('Reason for Replacement'),
      '#type' => 'radios',
	  '#options' => array('1' => t('Reissue'),'2' => t('Expired')),
	  '#prefix' => '<div class="field-row reasonreplacement"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  /*$form['request-access']['budget-code'] = array(
      '#title' => t('Budget Code'),
      '#type' => 'item',
      '#markup' => "<div class='budget-description'>Budget code</div>",
	  '#prefix' => '<div class="field-row budget-code">',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );*/
  $form['request-access']['select-token'] = array(
      '#markup' => "You have selected a hard token. This will cost $50 to the recipient's department.",
      '#prefix' => '<div class="field-row select-token"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['request-access']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );
  $form['request-access']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  $form['request-access']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );
  return $form;
}

function _idm_request_assets_rsa_options($location_val = ''){
    if($location_val == 'Florida') {
		$location_address = array ("Florida" => 'Florida');
	}
    if($location_val == 'London') {
		$location_address = array ("London" => 'London');
	}
    if($location_val == 'New Jersey') {
		$location_address = array ("New Jersey" => 'New Jersey');
	}
    if($location_val == 'New York') {
		$location_address = array ("30 Rockefeller Plaza" => '30 Rockefeller Plaza',"437 Madison Ave" => '437 Madison Ave',"5 Time Square" => '5 Time Square',"75 Rockefeller Plaza" => '75 Rockefeller Plaza',"75 ninth Ave Chelsea Market" => '75 ninth Ave Chelsea Market');
	}
    if($location_val == 'Other - FedEx') {
		$location_address = array ("Other - FedEx" => 'Other - FedEx');
	}
    if($location_val == 'Universal City') {
		$location_address = array ("Universal City" => 'Universal City');
	}
    if($location_val == 'Washington') {
		$location_address = array ("Washington" => 'Washington');
	}
	$location_options = "<select id='locationaddress'>";
	$location_options .= "<option selected='selected' value=''>--Select an Address--</option>";
	if(trim($location_val) !="" ) {
		foreach ($location_address as $location_key => $location_value) {
			$location_options .= "<option value='".$location_key."'>".$location_value."</option>";
		}
		$location_options .= "</select>";
		print($location_options);
	}
}

/**
 * Callback function to validate and save RSA Token details
 */
function idm_request_assets_rsa_validate($form, &$form_state) {
  global $user;
  $requestor_id = empty($user->name) ? '' : $user->name;
  $remote_access_for = $form_state['values']['remote-access-for'];
  $devicetype = $form_state['values']['devicetype'];
  $typeofrequest = $form_state['values']['typeofrequest'];
  $tokenrequest = $form_state['values']['tokenrequest'];
  $comments = $form_state['values']['comments'];
  $reasonreplacement_val = $form_state['values']['reasonreplacement'];
  if($reasonreplacement_val == 1) {
	$reasonreplacement = t('Reissue');
  } else {
	$reasonreplacement = t('Expired');
  }

  //Remote access for name calculation
  $remote_access_for_sso = '';
  $sso = '';
  if($form_state['values']['remote-access-for'] == 2 && !empty($form_state['values']['name'])){
    //some one else case
    preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
    $remote_access_for_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
  } else {
    //Myself case
    $remote_access_for_sso = $requestor_id;
  }

  $info = _idm_profile_get_user($remote_access_for_sso);
  $selected_user_managerid = $info['managerid'];

  $rsa = new stdClass();
  $rsa->schemas = array ('urn:scim:schemas:core:1.0');
  $rsa->id = $requestor_id;
  $rsa->userName = $remote_access_for_sso;
  $rsa->entitlements = array();

  $entitlements[0] = array();
  $entitlements[0]['type'] = 'application';
  $entitlements[0]['value'] = 'RemoteAccessToken';

  $attributes = array();
  $attributes[0]['type'] = 'custom_deviceType';
  $attributes[0]['value'] = $devicetype;
  $attributes[1]['type'] = 'custom_requestType';
  $attributes[1]['value'] = $typeofrequest;
  $attributes[2]['type'] = 'custom_tokenType';
  $attributes[2]['value'] = $tokenrequest;
  $attributes[3]['type'] = 'custom_comments';
  $attributes[3]['value'] = $comments;
  if($typeofrequest == 'Replacement') {
    $attributes[4]['type'] = 'custom_rsaReplaceReason';
    $attributes[4]['value'] = $reasonreplacement;
  }

  $entitlements[0]['attributes'] = $attributes;
  $rsa->entitlements = $entitlements;
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest').'/workflow/request/'.$remote_access_for_sso.'/RemoteAccessToken?requestor='.$requestor_id;
  $method = 'POST';
  $rsa_json = json_encode($rsa);
  $rsa_result = idm_profile_execute_curl($url, $rsa_json, $method);
  $rsa_result_obj = json_decode($rsa_result);

  //returning result
  if(isset($rsa_result_obj->custom_transactionId)){  //approval needed
      if(!empty($selected_user_managerid)){
        idm_notifications_clear_user_cache($selected_user_managerid);
      }
      $success_message = "Your request has been created successfully";
      drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
      //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message.'<br />USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>', $allowed_tags = array('img')));
      //drupal_set_message($success_message);
      //drupal_set_message('USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>');
      //drupal_set_message('RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
      drupal_goto('assets');
  } elseif(!PROD){
      form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Error occurred during RSA Token request. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.'));
      //IP-1134
      //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'<br />USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>', $allowed_tags = array('img')));
      //form_set_error('', t('Error occurred during RSA Token request. Please contact the <a href="mailto:identityservicessupportIDM@nbcuni.com">IdM Support Team</a> for assistance.'));
      //drupal_set_message('USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>');
      //drupal_set_message('RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
  }
}
/**
  * Function to create personally owned mobile device access
  */
function idm_groups_personally_owned_mobile_access($form,&$form_state) {
  if(isset($_SESSION['legacy'])) {
    $external_url = variable_get('idm_waveset_create_personally_owned_mobile_account_url','https://sso.stg.inbcu.com/nbcucentral/app/pwchange.jsp');
    drupal_goto($external_url, array('external' => TRUE));
  } else {
    global $user;
    $profile_id = empty($user->name)?'':$user->name;
    drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
    $form['#attributes']['class'][] = 'myidentityform';
    $path = drupal_get_path('theme', 'idmtheme');
    drupal_add_js($path . '/js/jquery.maskedinput.min.js');
    drupal_add_js($path . '/js/jquery.validate.min.js');
    drupal_add_js($path . '/js/validate.js');
    $form['mobile'] =  array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('mobile-access')),
    );
    $form['mobile']['title'] = array(
      '#markup' => 'Predefined Approval Process',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
    );
    $device_options = array('' => 'Select a type of device', 'Apple' => 'Apple', 'Android' => 'Android', 'Windows' => 'Windows');
    $def_val = '';
    $form['mobile']['type_of_device'] = array(
      '#title' => t('Type of Device'),
      '#type' => 'select',
      '#required' => TRUE,
      //'#description' => '<div class="device-desc"><a href="" target="_blank">Android Devices are not approved by NBCUniversal Information Security   Policies</a></div>',
      '#options' => $device_options,
      '#default_value' => $def_val,
      '#prefix' => '<div class="field-row type_of_device"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div id="typeofdevice"><!--a href="#" target="_blank">Android Devices are not approved by NBCUniversal Information Security Policies</a--></div></div>',
      '#chosen' => TRUE,
    );
    $form['mobile']['email_address'] = array(
      '#title' => t('Preferred Personal Email Address for Enrollment'),
      '#type' => 'textfield',
     /* '#required' => TRUE,*/
      '#prefix' => '<div class="field-row mobile-email-address"><!--span title="This field is required." class="form-required">*</span--><span title="This field is required." class="form-required">&nbsp;&nbsp;</span>',
      '#suffix' => '<div id="deviceidinstructions"><!--a href="/download_personal_mobile_instructions_pdf" target="_blank">Click here for instructions on how to find the Device Id</a--></div></div>',
   );
    $form['mobile']['phone_number'] = array(
      '#title' => t('SMS Message Phone Number '),
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#prefix' => '<div class="field-row phone-number"><span title="This field is required." class="form-required">&nbsp;&nbsp;</span>',
      '#suffix' => '</div>',
    );
    $form['mobile']['device_policy_agreement'] = array(
      '#type' => 'radios',
      '#required' => TRUE,
      '#options' => array(1 => t('I Agree'),2 => t('I Disagree')),
      //'#default_value' => 1,
      '#prefix' => '<div class="field-row mobile-device-policy-agreement"><!--span title="This field is required." class="form-required">*</span--><!--div class="policy-title">Device Policy Agreement</div--><!--div class="description"><div style="font-family:Arial; width: 835px; height: 350px; background-color: white; overflow:scroll; overflow-x: hidden;padding-left: 4em;clear:right;margin-top:-3em;font-size: 11pt;"> <div style="font-size:14pt;font-weight:bold"> NBCUniversal <br> End User Agreement<br> Personally-owned Mobile Devices</div><br> <div style="font-size:10pt;color:red"> <b><i style="font-style: italic;font-weight:bold;">This service is currently available to exempt employees and is not available to part-time, hourly, <br> contract, temporary, contingent or other employee classes governed by collective bargaining <br> agreements. </i></b></div><br>By connecting my personally-owned mobile device to the NBCUniversal collaboration suite, <br> I understand that a security policy will be applied to my device to manage the following:<br><br><li style="margin-left: 4em;">Require the device to lock after a predetermined time of inactivity </li><li style="margin-left: 4em;">Require a password to gain access to the locked device </li><li style="margin-left: 4em;"> Automatically delete all data from the device (wipe) after too many invalid login attempts </li><li style="margin-left: 4em;"> To see all the security rules visit <a target="_blank" href="http://sc.ge.com/*ITPolicies_DeviceManagement">http://sc.ge.com/*ITPolicies_DeviceManagement</a> </li><div style="font-size:10pt;"><br> I also understand that under the terms of this agreement that:<br><br></div><font color="red"></font><li style="margin-left: 4em;"><font color="red"> NBCUniversal has the right to remotely wipe my personally-owned device in the event <br> that your device is lost, stolen or infected with malware. Wiping a device means that all <br> information/data (including personal data and applications) will be erased from the <br> device and the device will be reset to factory defaults.</font><font color="blue"></font></li><li style="margin-left: 4em;"><font color="blue"><b>Before using your personal mobile device for work purposes, NBCUniversal strongly suggests consulting your <br> carrier to ensure the appropriate voice and data plans have been selected.</b></font></li><li style="margin-left: 4em;"><font color="blue"><b>NBCUniversal will not reimburse you for any increased costs for data usage nor for any business calls you make <br> on your personal mobile device.</b></font></li><li style="margin-left: 4em;"><font color="blue"><b>If this personal mobile device will be replacing an existing company mobile device, make sure to <br> request cancellation of the existing company device to avoid duplicate wireless costs. Please submit a Wireless <br> Cancellation Request Form (<a target="_blank" href="http://sc.ge.com/*cancellation"><font color="blue">http://sc.ge.com/*cancellation</font></a>) to cancel service on your company mobile device or <br> contact your local Wireless Team for assistance.</b></font></li><li style="margin-left: 4em;">NBCUniversal is not responsible for backing up or restoring personal information from my device. </li><li style="margin-left: 4em;">Aside from data synchronized from approved NBCUniversal services I will not store any <br> NBCUniversal data locally on my device. <font color="red"></font></li><li style="margin-left: 4em;"><font color="red">NBCUniversal will not provide technical support for my device including items such as inability to sync calendars or <br> receive emails.</font></li><li style="margin-left: 4em;"> I will promptly notify The NBCUniversal IT Help Desk if my device is lost or stolen. </li><li style="margin-left: 4em;"> My device will only be used by me (the NBCUniversal employee) and will not be shared <br> with others such as family members or friends.</li><li style="margin-left: 4em;"> This service will allow me to access NBCUniversal email, calendar and contact <br> information.</li><li style="margin-left: 4em;">NBCUniversal has the right to physically or electronically inspect my device at any point in time.</li><li style="margin-left: 4em;">NBCUniversal has the right to disable access by my device to NBCUniversal resources at any time without <br> prior notice or consent. </li><li style="margin-left: 4em;">Any applications for the device must be purchased by the device owner and must be properly licensed prior to <br> being used for business purposes. </li><li style="margin-left: 4em;">NBCUniversal has the right to change or modify any of the above clauses. </li><li style="margin-left: 4em;"> Upon termination of employment with NBCUniversal my device will be wiped. <br><br><div style="font-size:10pt;"> Additional Information: <div style="font-size:10pt;"> I understand that approval is required from my Manager prior to account <br> activation.</div><br> <div style="font-size:10pt;"> By selecting the "I Agree" radio button and clicking "Continue" I agree to be bound by the terms <br> of this agreement.</div><br> </div></li></div--></div>',
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('styled')),
    );
    $form['mobile']['submit'] = array (
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#attributes' => array('class' => array('small_button hover-blue')),
      '#prefix' => '<div class="domain-submit-buttons" >',
    );
    $form['mobile']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey')),
      '#suffix' => '</div>',
    );
    $form['#theme'] = 'mobiledevice';
    return $form;
  }
}

 function idm_groups_personally_owned_mobile_access_validate($form, $form_state) {
   global $user;
   $loggedin_user = empty($user->name) ? '' : $user->name;
   $type_of_device = $form_state['values']['type_of_device'];
   $email_address = $form_state['values']['email_address'];
   $phone_number = $form_state['values']['phone_number'];
   $device_policy_agreement = $form_state['values']['device_policy_agreement'];

   if($device_policy_agreement != 1 ) {
    form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Please agree the Device Policy Agreement'));
    //form_set_error('', t('Please agree the Device Policy Agreement'));
    return;
   }
   $mobile = new stdClass();
   $mobile->schemas = array ('urn:scim:schemas:core:1.0');
   $mobile->entitlements = array();
   $key = 0;
   $entitlements[$key] = array();
   $entitlements[$key]['type'] = 'application';
   $entitlements[$key]['value'] = 'POMD';

   $attributes = array();
   $attributes[$key]['type'] = 'custom_mobDeviceType';
   $attributes[$key++]['value'] = $type_of_device;
   if(!empty($email_address)) {
     $attributes[$key]['type'] = 'personalEmail';
     $attributes[$key++]['value'] = $email_address;
   }
   if(!empty($phone_number)) {
     $attributes[$key]['type'] = 'phoneNumber';
     $attributes[$key++]['value'] = $phone_number;
   }

   $entitlements[0]['attributes'] = $attributes;

   $mobile->entitlements = $entitlements;
   $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest').'/workflow/request/'.$loggedin_user.'/POMD?requestor='.$loggedin_user;
   $method = 'POST';
   $mobile_json = json_encode($mobile);
   $mobile_result = idm_profile_execute_curl($url, $mobile_json, $method);
   $mobile_result_obj = json_decode($mobile_result);

   //returning result
   if(isset($mobile_result_obj->custom_transactionId)){
     $info = _idm_profile_get_user($loggedin_user);
     idm_notifications_clear_user_cache($info['managerid']);
     $success_message = "Your request has been created successfully";
     drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
     //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message.'<br />USER JSON<pre>' . print_r($mobile_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($mobile_result, TRUE) . '</pre>', $allowed_tags = array('img')));
     //drupal_set_message($success_message);
     //drupal_set_message('USER JSON<pre>' . print_r($mobile_json, TRUE) . '</pre>');
     //drupal_set_message('RESULT<pre>' . print_r($mobile_result, TRUE) . '</pre>');
     drupal_goto('assets');
   }elseif(!PROD){
       form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Error occurred during personally owned mobile device access request. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.'));
       //IP-1134
       //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'<br />USER JSON<pre>' . print_r($mobile_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($mobile_result, TRUE) . '</pre>', $allowed_tags = array('img')));
       //form_set_error('', t('Error occurred during personally owned mobile device access request. Please contact the <a href="mailto:identityservicessupportIDM@nbcuni.com">IdM Support Team</a> for assistance.'));
       //drupal_set_message('USER JSON<pre>' . print_r($mobile_json, TRUE) . '</pre>');
       //drupal_set_message('RESULT<pre>' . print_r($mobile_result, TRUE) . '</pre>');
   }
 }

/**
 * Method to download the personal mobile instructions pdf
 */
function idm_assets_download_personal_mobile_instructions_pdf() {
  $header_des = "Content-Disposition: attachment; filename=mobiledeviceidlookup.pdf";
  $header_type = "Content-type: application/pdf";
  $pdf_path = drupal_get_path('module', 'idm_assets'). '/mobiledeviceidlookup.pdf';
  header($header_des);
  header($header_type);
  readfile($pdf_path);
}

/**
 * Callback for accessing certificate page
 */
 /*function idm_assets_certificate_access() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
	 echo "<pre>";
	 print_r($info);
	 exit;
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
   if (in_array('Contractor', $user->roles) || ($address_work_country != 'US' && $address_work_country != 'UNITED STATES')) {
     return false;
   } else {
     return true;
   }
   $location_id = empty($info['location_id']) ? '' : $info['location_id'];
   if (in_array('Contractor', $user->roles) || !preg_match("/^(US|IDMUS|6040000|PR|CC)/",$location_id)) {
		return false;
   } else {
		return true;
   }

 }*/
 function idm_assets_certificate_access() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
   if (in_array('Employee', $user->roles)) {
     return true;
   } else {
     return false;
   }
 }

  function idm_assets_logineduser_employeetype() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
   if (in_array('Employee', $user->roles)) {
     return "Employee";
   }  else if (in_array('Contractor', $user->roles)) {
		 return "Contractor";
	 } else if (in_array('Functional', $user->roles)) {
		 return "Functional";
	 }
 }

 function idm_assets_certificate_us_access() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
	 if (in_array('Employee', $user->roles) && ($address_work_country == 'US')) {
     return true;
   } else {
     return false;
   }
 }

 function idm_assets_certificate_international_access() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
	 if (in_array('Employee', $user->roles) && ($address_work_country != 'US')) {
     return true;
   } else {
     return false;
   }
 }

 function idm_assets_employee_locationid() {
   global $user;
   $profile_id = empty($user->name) ? '' : $user->name;
   $info = _idm_profile_get_user($profile_id);
   return $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
 }

function startsWith($haystack, $needle) {
    // search backwards starting from haystack length characters from the end
    return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;
}

 /**
  * Function to create secure remote access form
  */
function idm_request_assets_secure_remote_access($form, &$form_state) {
  global $user;
  $loggedinuserid = empty($user->name) ? '' : $user->name;
  //$loggedinuserinfo = _idm_profile_get_user($loggedinuserid);
  //$loggedinuserid = '501932558';
  //$loggedinuserid = '501922112';//contractor
  /*
  echo '<pre>';
  print_r($loggedinuserinfo);
  exit;
  */
  $request_profile = _idm_profile_get_user($loggedinuserid);
	if($request_profile['managerid']!='') {
  $worker_device_account_flag_array = idm_assets_worker_device_account_validation($loggedinuserid);
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  $form['remote_access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );
  $rsa_help_link = variable_get("rsa_help_link","https://wiki.nbcuni.ge.com/pages/viewpage.action?pageId=80946512&preview=/80946512/80946514/New%20RSA%20Token%20Request%20Process_Ver1.1.docx");
  $form['remote_access']['title'] = array(
    '#markup' => 'Request Secure Remote Access',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '<a href="'. $rsa_help_link .'" target="_blank"><img class="rsa-help"  src="/'.drupal_get_path('theme', 'idmtheme').'/images/help-small.png"></a></h2></div>'
  );
  //$loggedinuserinfo['usertype'] = 'contractor';
  //$worker_device_account_flag = 'device';
  //if (in_array('Employee', $user->roles) || in_array('device', $user->roles)) {
  /*if (strtolower($worker_device_account_flag_array[0]) == 'employee' || strtolower($worker_device_account_flag_array[1]) == 'device') {
    $remote_access_for_options = array(1 => t('Myself'),2 => t('Someone Else'));
  } else {
    $remote_access_for_options = array(2 => t('Someone Else'));
  }*/
  $form['remote_access']['remote_access_for'] = array(
    '#type' => 'radios',
    '#title' => t('Who is the remote access for'),
	'#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	'#default_value' => 1,
	'#prefix' => '<div class="field-row remote-access-for"><span title="This field is required." class="form-required"></span>',
    '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['remote_access']['someoneelse_flag'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
    '#attributes' => array('id' => 'someoneelse_flag'),
  );
  $form['remote_access']['name'] = array(
    '#type' => 'textfield',
    '#title' => t(" "),
    '#autocomplete_path' => 'autocomplete/name',
    //'#autocomplete_path' => 'autocomplete/nameanddeviceaccount',
    '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
    '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
    '#default_value' => ''
  );
  $form['mgr']['nam_hidden'] = array(
    '#type' => 'hidden',
    '#default_value' => 'mgrselected',
    '#attributes' => array (
     'id' => 'nam_id'
    ),
  );
  $form['request_access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'rsa-info'
		)
	  ),
  );
  /*if(idm_assets_certificate_access()) {
	  $form['request_access']['connect_remotely_options'] = array(
	      '#title' => t('I need to connect remotely on my'),
	      '#type' => 'radios',
		  '#options' => array('1' => t('NBCU-issued Windows laptop'),'2' => t('NBCU-issued Mac laptop'),'3' => t('Home/Personal Windows laptop'),'4' => t('Home/Personal Mac')),
		  '#prefix' => '<div class="field-row connect-remotely-options"><span title="This field is required." class="form-required"></span>',
	      '#suffix' => '</div>',
		  '#attributes' => array('class' => array('styled')),
	  );
	  } else {
	  $form['request_access']['connect_remotely_options'] = array(
	      '#title' => t('I need to connect remotely on my'),
	      '#type' => 'radios',
		  '#options' => array('1' => t('NBCU-issued Windows laptop'),'2' => t('NBCU-issued Mac laptop'),'3' => t('Home/Personal Windows laptop'),'4' => t('Home/Personal Mac')),
		  '#prefix' => '<div class="field-row connect-remotely-options" style="display: none;"><span title="This field is required." class="form-required"></span>',
	      '#suffix' => '</div>',
		  '#attributes' => array('class' => array('styled')),
	  );
  }*/
	if(idm_assets_certificate_access()) {
		$form['request_access']['connect_remotely_options'] = array(
	      '#title' => t('I need to connect remotely on my'),
	      '#type' => 'radios',
		  //'#options' => array('1' => t('NBCU-issued Windows laptop'),'2' => t('NBCU-issued Mac laptop'),'3' => t('Home/Personal Windows laptop'),'4' => t('Home/Personal Mac')),
			'#options' => array('1' => t('NBCU-issued Windows laptop certificate'),'2' => t('NBCU-issued Mac laptop certificate'),'3' => t('NBCU-issued Mac laptop'),'4' => t('Home/Personal Windows laptop'),'5' => t('Home/Personal Mac')),
		  '#prefix' => '<div class="field-row connect-remotely-options">',
	      '#suffix' => '<label for="connect_remotely_options" generated="true" class="error" style="display: none; left:19.5em; position:relative; top:0;">Please select remote connect option</label></div>',
		  '#attributes' => array('class' => array('styled')),
	  );
	} else {
		$form['request_access']['connect_remotely_options'] = array(
	      '#title' => t('I need to connect remotely on my'),
	      '#type' => 'radios',
		  //'#options' => array('1' => t('NBCU-issued Windows laptop'),'2' => t('NBCU-issued Mac laptop'),'3' => t('Home/Personal Windows laptop'),'4' => t('Home/Personal Mac')),
			'#options' => array('1' => t('NBCU-issued Windows laptop certificate'),'2' => t('NBCU-issued Mac laptop certificate'),'3' => t('NBCU-issued Mac laptop'),'4' => t('Home/Personal Windows laptop'),'5' => t('Home/Personal Mac')),
		  '#prefix' => '<div class="field-row connect-remotely-options" style="display: none;">',
	      '#suffix' => '<label for="connect_remotely_options" generated="true" class="error" style="display: none; left:19.5em; position:relative; top:0;">Please select remote connect option</label></div>',
		  '#attributes' => array('class' => array('styled')),
	  );
	}

  if(idm_assets_certificate_access()) {
	  $form['request_access']['receive_type'] = array(
	    '#type' => 'item',
	    '#title' => t(''),
	    '#markup' => '<span class="accesstype1" style="display:none;">The selected user will be receiving an Authentication Certificate</span><span class="accesstype2" style="display:none;">The selected user will be receiving an RSA Soft Token</span><span class="accesstype3" style="display:none;">Remote Access Token is not allowed  for HPA</span>',
	    '#prefix' => '<div class="field-row receive_type">',
	    '#suffix' => '</div>',
	  );
  } else {
	  $form['request_access']['receive_type'] = array(
      '#type' => 'item',
      '#title' => t(''),
      '#markup' => '<span class="accesstype1" style="display:none;">The selected user will be receiving an Authentication Certificate</span><span class="accesstype2">The selected user will be receiving an RSA Soft Token</span><span class="accesstype3" style="display:none;">Remote Access Token is not allowed  for HPA</span>',
      '#prefix' => '<div class="field-row receive_type">',
      '#suffix' => '</div>',
	  );
  }
  if(idm_assets_certificate_access()) {
	  $form['request_access']['typeofrequest'] = array(
      '#title' => t('Type of Request'),
      '#type' => 'select',
      '#options' => array('' => 'Select a Request Type', 'New' => 'New', 'Replacement' => 'Replacement'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row typeofrequest" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
  } else {
	  $form['request_access']['typeofrequest'] = array(
      '#title' => t('Type of Request'),
      '#type' => 'select',
      '#options' => array('' => 'Select a Request Type', 'New' => 'New', 'Replacement' => 'Replacement'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row typeofrequest"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
  }
  if(idm_assets_certificate_access()) {
	  $form['request_access']['devicetype'] = array(
      '#title' => t('Token Device Type'),
      '#type' => 'select',
      //'#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Mac desktop/laptop' => 'Mac desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row devicetype" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
  } else {
	  $form['request_access']['devicetype'] = array(
      '#title' => t('Token Device Type'),
      '#type' => 'select',
      //'#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Mac desktop/laptop' => 'Mac desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row devicetype"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
  }
  $form['request-access']['tokenrequest'] = array(
    '#type' => 'hidden',
    '#default_value' => 'Soft Token',
    '#attributes' => array ('id' => array ('tokenrequest')),
  );
	  /*$form['request_access']['reasonreplacement'] = array(
	      '#title' => t('Reason for Replacement'),
	      '#type' => 'radios',
		  '#options' => array('1' => t('Reissue'),'2' => t('Expired')),
		  '#prefix' => '<div class="field-row reasonreplacement" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	      '#suffix' => '</div>',
		  '#attributes' => array('class' => array('styled')),
	  );*/
   if(idm_assets_certificate_access()) {
	  $form['request_access']['personal_email'] = array(
      '#title' => t('Personal Email'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row personal-email" style="display:none;"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
	  );
  } else {
	  $form['request_access']['personal_email'] = array(
      '#title' => t('Personal Email'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row personal-email"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
	  );
  }
 /* $form['request_access']['certificate-type'] = array(
      '#title' => t('Certificate Type'),
      '#type' => 'select',
      '#options' => array('General' => 'General'),
      '#default_value' => 'General',
	  '#prefix' => '<div class="field-row certificate-type" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['certificate-usage'] = array(
      '#title' => t('Certificate Usage'),
      '#type' => 'select',
      '#options' => array('Authentication' => 'Authentication'),
    '#default_value' => 'Authentication',
	  '#prefix' => '<div class="field-row certificate-usage" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['asset-class'] = array(
      '#title' => t('Asset Class'),
      '#type' => 'select',
      '#options' => array('Computer' => 'Computer'),
      '#default_value' => "Computer",
      '#prefix' => '<div class="field-row asset-class" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['asset-type'] = array(
      '#title' => t('Asset Type'),
      '#type' => 'select',
      '#options' => array('Workstation' => 'Workstation'),
      '#default_value' => "Workstation",
      '#prefix' => '<div class="field-row asset-type" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['make'] = array(
      '#title' => t('Make'),
      '#type' => 'select',
      '#options' => array('Dell' => 'Dell'),
      '#default_value' => "Dell",
      '#prefix' => '<div class="field-row make" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['model'] = array(
      '#title' => t('Model'),
      '#type' => 'select',
      '#options' => array('Latitude' => 'Latitude'),
      '#default_value' => "Latitude",
      '#prefix' => '<div class="field-row model" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div></div>',
      '#chosen' => TRUE,
  );
  $form['request_access']['asset-ownership'] = array(
      '#title' => t('Asset Ownership'),
      '#type' => 'select',
      '#options' => array('Corporate' => 'Corporate'),
      '#default_value' => "Corporate",
	  '#prefix' => '<div class="field-row asset-ownership" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#chosen' => TRUE,
  );
   $form['request_access']['service-provider'] = array(
      '#title' => t('Service Provider'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row service-provider" style="display:none;"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['request_access']['os-version'] = array(
      '#title' => t('OS Version'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row os-version" style="display:none;"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );
  $form['request_access']['wireless-number'] = array(
      '#title' => t('Wireless Number'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row wireless-number" style="display:none;"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
  );*/
  
   /*$form['remote_access']['name'] = array(
      '#type' => 'textfield',
      '#title' => t(" "),
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );*/
  $form['request_access']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );

	$idm_assets_logineduser_employeetype = idm_assets_logineduser_employeetype();

	$form['request-access']['loggedinusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => $idm_assets_logineduser_employeetype,
	    '#attributes' => array ('id' => array ('loggedinusertype')),
	);

	if($idm_assets_logineduser_employeetype=='Contractor') {
		$form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => 'rsaapi',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	} else {
		$form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => '',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	}

  /*if(idm_assets_certificate_access()) {
	  $form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => '',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	  $form['request-access']['loggedinusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => 'Employee',
	    '#attributes' => array ('id' => array ('loggedinusertype')),
	  );
  } else {
	  $form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => 'rsaapi',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	  $form['request-access']['loggedinusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => 'Contractor',
	    '#attributes' => array ('id' => array ('loggedinusertype')),
	  );
  }*/
   $form['request-access']['selectedusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => '',
	    '#attributes' => array ('id' => array ('selectedusertype')),
  );
  $form['request-access']['remoteconnect'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('remoteconnect')),
  );
  $form['request-access']['typereq'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('typereq')),
  );

	$employee_locationid = idm_assets_employee_locationid();

	$form['request-access']['employee_locationid'] = array(
    '#type' => 'hidden',
    '#default_value' => $employee_locationid,
    '#attributes' => array ('id' => array ('employee_locationid')),
  );

  $form['request-access']['replacereason'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('replacereason')),
  );
  $form['request_access']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  if(!isset($_SESSION['legacy'])) {
    $cancel_url = variable_get('rsa_cancel_redirect', '/assets');
	  $form['request_access']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	  $form['request-access']['cancel-redirect'] = array(
      '#type' => 'hidden',
      '#default_value' => $cancel_url,
      '#attributes' => array ('id' => array ('cancel-redirect')),
	  );
  } else {
	  $cancel_url = variable_get('rsa_cancel_redirect', '/assets');
	  $form['request_access']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	  $form['request-access']['cancel-redirect'] = array(
      '#type' => 'hidden',
      '#default_value' => $cancel_url,
      '#attributes' => array ('id' => array ('cancel-redirect')),
	  );
  }
  } else {
	 $form['request_access'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">There is some issue with IDM API please contact IDM Team </div></div>'
	);
	}
  return $form;
}

function idm_request_assets_secure_remote_access_validate($form, $form_state) {
  global $user;
  $request_info = new stdClass();
  $asset_info = array();
  $requested_for = $user->name;
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');

  //if($form_state['values']['connect_remotely_options'] == 1) {  // certificate API
  if($form_state['values']['apitype'] == 'certificateapi') {  // certificate API
	  if($form_state['values']['remote_access_for'] == 2 && !empty($form_state['values']['name'])) {
      //preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
      //$requested_for = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
      //some one else case
      $pos_r = strpos($form_state['values']['name'], '(');
      if ($pos_r !== false) {
        preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
        $requested_for = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
      } else {
        $requested_for = isset($form_state['values']['name'])? $form_state['values']['name'] : '';
      }
      if($form_state['values']['someoneelse_flag'] == 0) {
        $result = idm_profile_name_autocomplete($requested_for, $check = 'server');
        $valid = explode("-", $result);
        if($valid[0] == 0) {
          form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('You are requesting for invalid user !!!'));
          return;
        } else {
          $requested_for = $valid[1];
        }
      }

      $info = _idm_profile_get_user($requested_for);
      $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
      $info_usertype = empty($info['usertype']) ? '' : $info['usertype'];
      /*
      //if($info_usertype == 'contractor' || $address_work_country != 'US' || $address_work_country != 'UNITED STATES') {
      //form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Requested for user should not be Contractor or International User !!!'));
      //return;
      //}
      */
      //Manage name calculation
      $manager_sso = '';
      $user_type = '';
      $info['usertype'] = isset($info['usertype']) ? $info['usertype'] : '';
      $user_type = $info['usertype'];
      if ($user_type == 'employee') {
        $manager_sso = $info['sso'];
      } elseif ($user_type == 'contractor' || $user_type == 'functional') {
        $manager_sso = $info['managerid'];
      }
      $selected_user_managerid = $manager_sso;
	  }

		if($form_state['values']['loggedinusertype'] == 'Contractor' && $form_state['values']['remote_access_for'] == 1) {
			$message = 'Request has been submitted and is pending for validation. Once the request is validated and approved, you will receive an email with the access details.';
		}

		if($form_state['values']['selectedusertype'] == 'Contractor') {
			$message = 'Request has been submitted and is pending for validation. Once the request is validated and approved, you will receive an email with the access details.';
		}
		if($form_state['values']['selectedusertype'] == 'Functional') {
			$message = 'Request has been submitted. The selected user will receive an email with the access details.';
		}
		if($form_state['values']['selectedusertype'] == 'Daily Hire') {
			$message = 'Request has been submitted. The selected user will receive an email with the access details.';
		}
	  if(($form_state['values']['loggedinusertype'] == 'Employee' || $form_state['values']['loggedinusertype'] == 'Functional') && $form_state['values']['remote_access_for'] == 1) {
		  $message = 'Request has been submitted. The selected user will receive an email with the access details.';
	  }

	  if($form_state['values']['selectedusertype'] == 'Employee') {
		  if($user->name != $selected_user_managerid) {
		    //$message = "Request has been submitted and is pending with the manager's approval. Once the request is approved, the selected user will receive an email with the access details.";
        $message = 'Request has been submitted. The selected user will receive an email with the access details.';
			  idm_notifications_clear_user_cache($selected_user_managerid);
		  } else {
		    $message = 'Request has been submitted. The selected user will receive an email with the access details.';
		  }
	  }
	  $url .= '/workflow/request/'.$requested_for.'/Certificate?requestor='.$user->name;

	  $request_info->schemas = array (
			'urn:scim:schemas:core:1.0'
		);
	  $key = 0;
	  $asset_info[$key] = new stdClass();
	  $asset_info[$key]->type = 'custom_certType';
    //$asset_info[$key++]->value = $form_state['values']['certificate-type'];
	  $asset_info[$key++]->value = 'General';
	  $asset_info[$key]->type  = 'custom_certUsage';
    //$asset_info[$key++]->value = $form_state['values']['certificate-usage'];
	  $asset_info[$key++]->value = 'Authentication';
	  $asset_info[$key]->type = 'custom_assetClass';
    //$asset_info[$key++]->value = $form_state['values']['asset-class'];
	  $asset_info[$key++]->value = 'Computer';
	  $asset_info[$key]->type = 'custom_assetType';
    //$asset_info[$key++]->value = $form_state['values']['asset-type'];
	  $asset_info[$key++]->value = 'Workstation';
	  $asset_info[$key]->type = 'custom_make';
    //$asset_info[$key++]->value = $form_state['values']['make'];
		if($form_state['values']['remoteconnect']==1) {
			$asset_info[$key++]->value = 'Dell';
		}

		if($form_state['values']['remoteconnect']==2) {
			$asset_info[$key++]->value = 'Mac';
		}

	  $asset_info[$key]->type = 'custom_model';
    //$asset_info[$key++]->value = $form_state['values']['model'];
		if($form_state['values']['remoteconnect']==1) {
			$asset_info[$key++]->value = 'Latitude';
		}

		if($form_state['values']['remoteconnect']==2) {
			$asset_info[$key++]->value = 'Macbook Air';
		}

	  $asset_info[$key]->type = 'custom_assetOwnership';
    //$asset_info[$key++]->value = $form_state['values']['asset-ownership'];
	  $asset_info[$key++]->value = 'Corporate';
	  if(!empty($form_state['values']['service-provider'])){
	    $asset_info[$key]->type = 'custom_serviceProvider';
	    $asset_info[$key++]->value = $form_state['values']['service-provider'];
	  }
	  if(!empty($form_state['values']['os-version'])){
	    $asset_info[$key]->type = 'custom_OSVersion';
	    $asset_info[$key++]->value = $form_state['values']['os-version'];
	  }
	  if(!empty($form_state['values']['wireless-number'])){
	    $asset_info[$key]->type = 'custom_wirelessNo';
	    $asset_info[$key++]->value = $form_state['values']['wireless-number'];
	  }
	  if(!empty($form_state['values']['personal-email'])){
	    $asset_info[$key]->type = 'personalEmail';
	    $asset_info[$key++]->value = $form_state['values']['personal-email'];
	  }
	  if(!empty($form_state['values']['comments'])){
	    $asset_info[$key]->type = 'custom_comments';
	    $asset_info[$key++]->value = $form_state['values']['comments'];
	  }
	  $entitlements = new stdClass();
	  $entitlements->type = 'application';
	  $entitlements->value = 'Certificate';
	  $entitlements->attributes = $asset_info;
	  $request_info->entitlements = array($entitlements);
	  $request_info->id = $user->name;
    $request_info->userName = $requested_for;
	  $user_json = json_encode($request_info);
	  $method = 'POST';

	  $result = idm_profile_execute_curl($url, $user_json, $method);
	  $result_obj = json_decode($result);
		//$info = curl_getinfo($ch);

		//returning result
	  if(isset($result_obj->transaction) || isset($result_obj->custom_transactionId)) {
	    drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'. $message, $allowed_tags = array('img')));
	    drupal_goto('assets');
	  } elseif(!PROD){
	    form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Service Error !!!'));
      //IP-1134
	    //drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>'.'<br />USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>'.'<br />RESULT<pre>' . print_r($result, TRUE) . '</pre>', $allowed_tags = array('img')));
	    //form_set_error('', t('Service Error !!!'));
	    //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
	    //drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
	    //drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
	  }
  }
  //if($form_state['values']['connect_remotely_options'] == 2 || $form_state['values']['connect_remotely_options'] == 3 || $form_state['values']['connect_remotely_options'] == 4) {  // RSA API
  if($form_state['values']['apitype'] == 'rsaapi') {  // RSA API
	  /*added the functionalities RSA sailpoint start*/
	  if($form_state['values']['remote_access_for']==2){
		preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
		$request_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
		}
		if($form_state['values']['remote_access_for']==1){
			$request_sso = $user->name;
		}
		if($form_state['values']['personal_email']!='') {
			$personal_email = $form_state['values']['personal_email'];
		} else {
			$personal_email = "NA";
		}
		$request_profile = _idm_profile_get_user($request_sso);
		if($request_profile['usertype']=='contractor') {
			$check_status_supplier = check_approved_suppliers($request_profile['custom_company']);
			if($check_status_supplier=='supplier not found') {
				$isapprovedvendor = "False";
			} else {
				$isapprovedvendor = "True";
			}
		} else {
			$isapprovedvendor = "NA";
		}
	//$check_status_supplier = check_approved_suppliers($supplier_name);
	//if($request_profile['usertype']=='contractor' && $check_status_supplier=='supplier not found') {
		$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
		$account = new stdClass();
		$name = new stdClass();
		$name->identityName = $request_sso;
		$name->requestType = $form_state['values']['typeofrequest'];
		$name->deviceType = $form_state['values']['devicetype'];
		$name->personalEmail = $personal_email;
		$name->comments = $form_state['values']['comments'];
		$name->requesterFromRSA = $user->name;
		$name->isApprovedVendor = $isapprovedvendor;
		$account->workflowArgs = $name;
		$user_json = json_encode($account);
		/*echo "<pre>";
		print_r($user_json);
		exit;*/
		$url .= '/identityiq/rest/workflows/Workflow_NBCU_RSA_Drupal/launch';
		$method = 'POST';
		$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
	  $result_obj = json_decode($result);

		if($result_obj->requestID!='') {
		 $success_message = "Request has been submitted and you will recieve an email with further details.";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		drupal_goto('assets');
		}
		if($result_obj->errors!='') {
			//drupal_set_message(t($result_obj->errors[0]), 'warning');
			form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Service Error !!!'));
		}
	  /*add the functinalities RSA sailpoint end*/
  }
}


/**
  * Function to create secure remote access form for sailpoint
  */
function idm_request_assets_secure_remote_access_sailpoint($form, &$form_state) {
  global $user;
  $loggedinuserid = empty($user->name) ? '' : $user->name;
  //$loggedinuserinfo = _idm_profile_get_user($loggedinuserid);
  //$loggedinuserid = '501932558';
  //$loggedinuserid = '501922112';//contractor
  /*
  echo '<pre>';
  print_r($loggedinuserinfo);
  exit;
  */
	$request_profile = _idm_profile_get_user($loggedinuserid);
	if($request_profile['managerid']!='') {
  $worker_device_account_flag_array = idm_assets_worker_device_account_validation($loggedinuserid);
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  $form['remote_access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );
  $rsa_help_link = variable_get("rsa_help_link","https://wiki.nbcuni.ge.com/pages/viewpage.action?pageId=80946512&preview=/80946512/80946514/New%20RSA%20Token%20Request%20Process_Ver1.1.docx");
  $form['remote_access']['title'] = array(
    '#markup' => 'Request Secure Remote Access',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '<a href="'. $rsa_help_link .'" target="_blank"><img class="rsa-help"  src="/'.drupal_get_path('theme', 'idmtheme').'/images/help-small.png"></a></h2></div>'
  );
  $form['remote_access']['remote_access_for'] = array(
    '#type' => 'radios',
    '#title' => t('Who is the remote access for'),
	'#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	'#default_value' => 1,
	'#prefix' => '<div class="field-row remote-access-for"><span title="This field is required." class="form-required"></span>',
    '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['remote_access']['someoneelse_flag'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
    '#attributes' => array('id' => 'someoneelse_flag'),
  );
  $form['remote_access']['name'] = array(
    '#type' => 'textfield',
    '#title' => t(" "),
    '#autocomplete_path' => 'autocomplete/name',
    //'#autocomplete_path' => 'autocomplete/nameanddeviceaccount',
    '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
    '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><!--<button class="small_button hover-blue" onclick="javascript: return false;">Search</button>--></div>',
    '#default_value' => ''
  );
  $form['mgr']['nam_hidden'] = array(
    '#type' => 'hidden',
    '#default_value' => 'mgrselected',
    '#attributes' => array (
     'id' => 'nam_id'
    ),
  );
  $form['request_access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'rsa-info'
		)
	  ),
  );
 
  $form['request_access']['typeofrequest'] = array(
      '#title' => t('Type of Request'),
      '#type' => 'select',
      '#options' => array('' => 'Select a Request Type', 'New' => 'New', 'Replacement' => 'Replacement'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row typeofrequest"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
   $form['request_access']['devicetype'] = array(
      '#title' => t('Token Device Type'),
      '#type' => 'select',
      //'#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Mac desktop/laptop' => 'Mac desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#options' => array('' => 'Select a Device Type', 'BlackBerry' => 'BlackBerry', 'BlackBerry10' => 'BlackBerry10', 'iOS(iPad/iPhone)' => 'iOS(iPad/iPhone)', 'Android phone/tablet' => 'Android phone/tablet', 'Windows desktop/laptop' => 'Windows desktop/laptop', 'Windows Phone' => 'Windows Phone'),
      '#default_value' => '',
      '#prefix' => '<div class="field-row devicetype"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
      '#chosen' => TRUE,
	  );
  $form['request-access']['tokenrequest'] = array(
    '#type' => 'hidden',
    '#default_value' => 'Soft Token',
    '#attributes' => array ('id' => array ('tokenrequest')),
  );
   $form['request_access']['personal_email'] = array(
      '#title' => t('Personal Email'),
      '#type' => 'textfield',
      '#required' => FALSE,
      '#prefix' => '<div class="field-row personal-email"><span title="This field is required." class="form-required">&nbsp&nbsp</span>',
      '#suffix' => '</div>'
	  );
  $form['request_access']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );

	$idm_assets_logineduser_employeetype = idm_assets_logineduser_employeetype();

	$form['request-access']['loggedinusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => $idm_assets_logineduser_employeetype,
	    '#attributes' => array ('id' => array ('loggedinusertype')),
	);

	if($idm_assets_logineduser_employeetype=='Contractor') {
		$form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => 'rsaapi',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	} else {
		$form['request-access']['apitype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => '',
	    '#attributes' => array ('id' => array ('apitype')),
	  );
	}

   $form['request-access']['selectedusertype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => '',
	    '#attributes' => array ('id' => array ('selectedusertype')),
  );
  $form['request-access']['remoteconnect'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('remoteconnect')),
  );
  $form['request-access']['typereq'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('typereq')),
  );

	$employee_locationid = idm_assets_employee_locationid();

	$form['request-access']['employee_locationid'] = array(
    '#type' => 'hidden',
    '#default_value' => $employee_locationid,
    '#attributes' => array ('id' => array ('employee_locationid')),
  );

  $form['request-access']['replacereason'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('replacereason')),
  );
  $form['request_access']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  if(!isset($_SESSION['legacy'])) {
    $cancel_url = variable_get('rsa_cancel_redirect', '/assets');
	  $form['request_access']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	  $form['request-access']['cancel-redirect'] = array(
      '#type' => 'hidden',
      '#default_value' => $cancel_url,
      '#attributes' => array ('id' => array ('cancel-redirect')),
	  );
  } else {
	  $cancel_url = variable_get('rsa_cancel_redirect', '/assets');
	  $form['request_access']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	  $form['request-access']['cancel-redirect'] = array(
      '#type' => 'hidden',
      '#default_value' => $cancel_url,
      '#attributes' => array ('id' => array ('cancel-redirect')),
	  );
  }
	} else {
	 $form['request_access'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">There is some issue with IDM API please contact IDM Team </div></div>'
	);
	}
  return $form;
}


function idm_request_assets_secure_remote_access_sailpoint_validate($form, $form_state) {
	global $user;
	/*echo "<pre>";
	print_r($form_state['values']);*/
	
  if($form_state['values']['remote_access_for']==2){
		preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
		$request_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
	}
	if($form_state['values']['remote_access_for']==1){
		$request_sso = $user->name;
	}
	if($form_state['values']['personal_email']!='') {
		$personal_email = $form_state['values']['personal_email'];
	} else {
		$personal_email = "NA";
	}
	$request_profile = _idm_profile_get_user($request_sso);
	
	if($request_profile['usertype']=='contractor') {
		$check_status_supplier = check_approved_suppliers($request_profile['custom_company']);
		if($check_status_supplier=='supplier not found') {
			$isapprovedvendor = "False";
		} else {
			$isapprovedvendor = "True";
		}
	} else {
		$isapprovedvendor = "NA";
	}
	//$check_status_supplier = check_approved_suppliers($supplier_name);
	//if($request_profile['usertype']=='contractor' && $check_status_supplier=='supplier not found') {	
	
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
  
	$account = new stdClass();
	$name = new stdClass();
	$name->identityName = $request_sso;
	$name->requestType = $form_state['values']['typeofrequest'];
	$name->deviceType = $form_state['values']['devicetype'];
	$name->personalEmail = $personal_email;
	$name->comments = $form_state['values']['comments'];
	$name->requesterFromRSA = $user->name;
	$name->isApprovedVendor = $isapprovedvendor;
	$account->workflowArgs = $name;
	$user_json = json_encode($account);
	/*echo "<pre>";
	print_r($user_json);
	exit;*/
	$url .= '/identityiq/rest/workflows/Workflow_NBCU_RSA_Drupal/launch';
	$method = 'POST';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);

if($result_obj->requestID!='') {
	 $success_message = "Request has been submitted and you will recieve an email with further details.";
	drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
	drupal_goto('assets');
}
if($result_obj->errors!='') {
	drupal_set_message(t($result_obj->errors[0]), 'warning');
	drupal_goto('assets');
}
	

}

/**
 * Implements hook_cron().
 *
 * dropbox cron
 */
//function idm_assets_cron() {
function idm_assets_cron() {
  $output = array();
  $application = 'Dropbox';
  //$url = 'https://api.dropbox.com/1/team/members/remove';
	$url = 'https://api.dropboxapi.com/2/team/members/remove';
  $method = 'POST';

  $dropboxusers = get_dropbox_users_to_remove(false);
  $dropboxemail = array();
  foreach($dropboxusers as $dropboxuser) {
    $fullname = $dropboxuser->fullname;
    $ownersso = $dropboxuser->owner;
    $email = $dropboxuser->email;
    //$dropboxemail[$email] = $email;
    //$dropboxvalue[$fullname.' ('.$ownersso.') - '.$email] = $fullname.' ('.$ownersso.') - '.$email;
    $memberid = dropbox_getmemberidbyemail($email);
    //echo "memberid for $email is: $memberid\n<br/>";
    watchdog("dropboxcron", "%emailtimestamp - memberid for %email is: %memberid", array('%email' => $email, '%memberid' => $memberid, '%emailtimestamp' => date('l jS \of F Y h:i:s A')));
    if ($memberid == null) {
      watchdog("dropboxcron", "%emailtimestamp - User not on team. %emailOne", array('%emailOne' => $email, '%emailtimestamp' => date('l jS \of F Y h:i:s A')));
    } else {
      $dropboxvalue[$fullname.' ('.$ownersso.') - '.$email] = $fullname.' ('.$ownersso.') - '.$email;

      //$user_json = json_encode(array('member_id' => $memberid));
      $dropboxtoken = 'o7LZZwu68pYAAAAAAAAABXUUNcb30O1dHksYV3OxzuRHDYrwI68aJnMHMO0poxTG';
      //open connection
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_PROXY, '10.40.32.20:80');
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
      curl_setopt($ch, CURLOPT_HTTPHEADER, array (
      "Content-Type: application/json",
      "Authorization: Bearer $dropboxtoken"
      ));
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
      //curl_setopt($ch, CURLOPT_POSTFIELDS, $user_json);
			curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"user\":{\".tag\":\"team_member_id\",\"team_member_id\":\"$memberid\"}}");
      curl_setopt($ch, CURLOPT_HEADER, 1);
      curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 15);
      curl_setopt($ch, CURLOPT_TIMEOUT, 180);
      // execute post
      $starttime = microtime(true);
      $result = curl_exec($ch);
      $endtime = microtime(true);
      $elapsed = sprintf("%.6f", $endtime - $starttime);

      $error = json_decode($result, true);
      $errorCode = $error['errorCode'];
      $errorMessage = $error['errorMessage'];
      $detail = '';

      $message = "$application account request processed. Please watch your email inbox for an activation email.";

      if ($errorCode == 200) {
        if ($errorCode != 429 && $errorCode != 200) {
          $message = $errorMessage;
          if (substr($message, 0, 15) == 'Following error') {
            $messageJson = substr($message, 161);
            $message = 'The following error occurred while trying to provision the account:';
            if (substr($messageJson, 0, 1) == '{') {
              $messageArr = json_decode($messageJson, true);
              $detail = $messageArr['error'];
            } else {
              $detail = $messageJson;
            }
          }
        }
      }
      $output[] = array('error' => $error, 'errorCode' => $errorCode, 'errorMessage' => $errorMessage, 'message' => $message, 'detail' => $detail);
      watchdog("dropboxcron", "%emailtimestamp - <pre>@print_r</pre>", array('@print_r' => print_r($output, TRUE), '%emailtimestamp' => date('l jS \of F Y h:i:s A')));
    }
  }
  if (!empty($dropboxvalue)) {
    $comma_separated_name_sso_emails = implode("\n",$dropboxvalue);
    //$from = 'nbcuniidmsupportteam@nbcuni.com';
    //$to = 'meenu.gupta@igate.com';
    $from = variable_get('dropbox_cron_sender_ids','nbcuniidmsupportteam@nbcuni.com');
    $to = variable_get('dropbox_cron_recipients_ids','vijayan.natarajan@capgemini.com');
    $subject = t('IDM Dropbox Users Decommissioning');
    //$body = t('Below users have been decommissioned from IDM Dropbox: ').'<p></p>';
    $message = '';
    $message .= '<h2>'.t('Below users have been decommissioned from IDM Dropbox: ').'</h2> '  . "\r\n";
    foreach($dropboxvalue as $dropboxvalueeach) {
      $message .= $dropboxvalueeach. "\r\n";
    }

    $params = array(
      'body' => nl2br($message),
      'subject' => $subject,
    );
    variable_get('mail_system', array('default-system' => 'HTMLMailSystem'));
    $mail = drupal_mail('idm_assets', 'dropbox_email_decommissioning_cron', $to, language_default(), $params, $from, TRUE);
    $mail_result = empty($mail) ? NULL : $mail['result'];
    //$mail_result = FALSE;
    if($mail_result) {
      watchdog("dropboxcron", "%emailtimestamp - Dropbox decommissioning mail has been sent", array('%emailtimestamp' => date('l jS \of F Y h:i:s A')));
      echo $message;
    }
  } else {
    $from = variable_get('dropbox_cron_sender_ids','nbcuniidmsupportteam@nbcuni.com');
    $to = variable_get('dropbox_cron_recipients_ids','vijayan.natarajan@capgemini.com');
    $subject = t('IDM Dropbox Users Decommissioning');
    $message = '';
    $message .= '<h2>'.t('There is no user to be decommissioned.').'</h2> '  . "\r\n";

    $params = array(
      'body' => nl2br($message),
      'subject' => $subject,
    );
    variable_get('mail_system', array('default-system' => 'HTMLMailSystem'));
    $mail = drupal_mail('idm_assets', 'dropbox_email_decommissioning_cron', $to, language_default(), $params, $from, TRUE);
    $mail_result = empty($mail) ? NULL : $mail['result'];
    watchdog("dropboxcron", "%emailtimestamp - Dropbox decommissioning no mail was sent as the users are not on team", array('%emailtimestamp' => date('l jS \of F Y h:i:s A')));
  }
}

function idm_assets_mail($key,&$message,$params) {
  switch ($key) {
    case 'dropbox_email_decommissioning_cron':
      $message['headers'] = array_merge(
				$message['headers'],
					array(
					  'MIME-Version' => '1.0',
					  'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
					  'Content-Transfer-Encoding' => '8Bit',
					  'X-Mailer' => 'Drupal'
					)
			);
			$message['subject'] = t($params['subject']);
			$message['body'][] = $params['body'];
			break;
  }
}

 /**
  * Function to create provisioning request form
  */
function idm_request_assets_provisioning_request($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  $form['request'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'request-info'
		)
	  ),
  );
  $form['request']['title'] = array(
      '#markup' => 'Provisioning Request',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['request']['request_for'] = array(
      '#type' => 'radios',
      '#title' => t('Request for'),
	  '#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	  '#default_value' => 1,
	  '#prefix' => '<div class="field-row request-for"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['request']['someoneelse_flag'] = array(
      '#type' => 'hidden',
      '#default_value' => 0,
      '#attributes' => array('id' => 'someoneelse_flag'),
  );
  $form['request']['name'] = array(
      '#type' => 'textfield',
      '#title' => t(" "),
      //'#required' => TRUE,
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );
  $form['mgr']['nam_hidden'] = array(
      '#type' => 'hidden',
      '#default_value' => 'mgrselected',
      '#attributes' => array (
       'id' => 'nam_id'
      ),
  );
  $form['request_access'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'rsa-info'
		)
	  ),
  );
  $form['request_access']['application_name'] = array(
	 '#title' => t('Application Name'),
	 '#type' => 'select',
	 '#options' => array('' => 'Select an application name ',
	                    'AST' => 'AST',
	                    'BlackBerry' => 'BlackBerry',
	                    'CAMBAR' => 'CAMBAR',
	                    'CSP' => 'CSP',
	                    'Cafe - iSeries (Prod)' => 'Cafe - iSeries (Prod)',
	                    'Cafe - iSeries (QA)' => 'Cafe - iSeries (QA)',
	                    'EATEC' => 'EATEC',
	                    'F&L CPG - iSeries (Prod)' => 'F&L CPG - iSeries (Prod)',
	                    'F&L CPG - iSeries (QA)' => 'F&L CPG - iSeries (QA)',
	                    'F&L Digital Platforms - iSeries (Prod)' => 'F&L Digital Platforms - iSeries (Prod)',
	                    'F&L Digital Platforms - iSeries (QA)' => 'F&L Digital Platforms - iSeries (QA)',
	                    'F&L TV - iSeries (Prod)' => 'F&L TV - iSeries (Prod)',
	                    'F&L TV - iSeries (QA)' => 'F&L TV - iSeries (QA)',
	                    'F&L Women and Lifestyle- iSeries (Prod)' => 'F&L Women and Lifestyle- iSeries (Prod)',
	                    'F&L Women and Lifestyle- iSeries (QA)' => 'F&L Women and Lifestyle- iSeries (QA)',
	                    'FLIX (DEV & QA)' => 'FLIX (DEV & QA)',
	                    'FLIX (PROD)' => 'FLIX (PROD)',
	                    'Film Pacing' => 'Film Pacing',
	                    'Focus Features F Logic System - iSeries (Prod)' => 'Focus Features F Logic System - iSeries (Prod)',
	                    'Focus Features F Logic System - iSeries (QA)' => 'Focus Features F Logic System - iSeries (QA)',
	                    'Forecaster' => 'Forecaster',
	                    'Global VPF' => 'Global VPF',
	                    'HP ICE/SIM' => 'HP ICE/SIM',
	                    'IRIS' => 'IRIS',
	                    'Medea Affiliate Stations' => 'Medea Affiliate Stations',
	                    'Medea INTL UNI' => 'Medea INTL UNI',
					    'Medea RSN' => 'Medea RSN',
					    'Medea US' => 'Medea US',
					    'MediaBroker' => 'MediaBroker',
                        'Non-Linear Scheduling System' => 'Non-Linear Scheduling System',
                        'PARIS' => 'PARIS',
                        'Report.Web' => 'Report.Web',
                        'SAP HCM' => 'SAP HCM',
                        'SAP HCM NON PROD' => 'SAP HCM NON PROD',
                        'ScheduALL Production Services' => 'ScheduALL Production Services',
                        'ScheduALL Sound' => 'ScheduALL Sound',
                        'ScheduALL Tech Ops' => 'ScheduALL Tech Ops',
                        'ScheduALL WWCS' => 'ScheduALL WWCS',
                        'Series Life Cycle' => 'Series Life Cycle',
                        'ShowTracker' => 'ShowTracker',
                        'Sintec OnAir' => 'Sintec OnAir',
                        'StartOver' => 'StartOver',
                        'TNE' => 'TNE',
                        'TVRocs' => 'TVRocs',
                        'TVRocs Local LITE' => 'TVRocs Local LITE',
                        'Title Mapping Tool' => 'Title Mapping Tool',
                        'WebScheduler' => 'WebScheduler',
                        'YARDI' => 'YARDI'
                ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row application_name"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['role'] = array(
	 '#title' => t('Role'),
	 '#type' => 'select',
	 '#options' => array('' => 'Select a Role ',
	                    'AMS Analyst' => 'AMS Analyst',
	                    'AMS Billing' => 'AMS Billing'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row role" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['model'] = array(
	 '#title' => t('Model'),
	 '#type' => 'select',
	 '#options' => array('' => 'Select a Model ',
	                    'Warehouse Inquiry Only Model' => 'Warehouse Inquiry Only Model',
	                    'Warehouse Lead Model' => 'Warehouse Lead Model',
	                    'Warehouse Lead RF Model' => 'Warehouse Lead RF Model',
	                    'Warehouse Management Model' => 'Warehouse Management Model',
	                    'Warehouse Management RF Model' => 'Warehouse Management RF Model',
	                    'Warehouse RF User Model' => 'Warehouse RF User Model',
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row model" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['company_access'] = array(
	 '#title' => t('Company Access'),
	 '#type' => 'select',
	 '#options' => array('Option1' => 'Option1',
	                    'Option2' => 'Option2',
	                    'Option3' => 'Option3',
	                    'Option4' => 'Option4',
	               ),
	 '#default_value' => '',
	 '#multiple' => TRUE,
	 '#size' => 5,
	 '#prefix' => '<div class="field-row company-access" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 //'#chosen' => TRUE,
  );
  $form['request_access']['copy_profile'] = array(
    '#title' => t('Copy Profile'),
    '#type' => 'textfield',
    '#required' => TRUE,
    //'#autocomplete_path' => 'autocomplete/tilde',
    '#prefix' => '<div class="field-row copy-profile" style="display:none;"><span title="This field is required." class="form-required">*</span>',
    '#suffix' => '<label class="error" for="edit-copy-profile" generated="true" style="display: none;">Please select copy profile</label></div><!--div id="copy_profile_flag" style="display:none;">0</div-->',
  );
  $form['request_access']['eatec_model'] = array(
	 '#title' => t('Model'),
	 '#type' => 'select',
	 '#options' => array('' => 'Select a Model ',
	                    'Accounts Payable' => 'Accounts Payable',
	                    'Administrator' => 'Administrator',
	                    'Finance' => 'Finance',
	                    'Ingredient Control PK/PB' => 'Ingredient Control PK/PB',
	                    'Inventory Control' => 'Inventory Control',
	                    'Operations' => 'Operations',
	                    'Sourcing' => 'Sourcing',
	                    'Sourcing Training' => 'Sourcing Training',
	                    'Warehouse' => 'Warehouse',
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row eatec-model" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['essbase_add_in'] = array(
	 '#title' => t('Essbase Add-in'),
	 '#type' => 'select',
	 '#options' => array('' => 'Please select an Option',
	                    'Yes' => 'Yes',
	                    'No' => 'No'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row essbase-add-in" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '<!--div class="ajax_throbber"><img src="/'.drupal_get_path('theme', 'idmtheme').'/images/ajax-loader.gif"></div--></div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['flix_group'] = array(
     '#markup' => l('Click here to view the list of available FLIX Groups', 'node/'),
	 '#prefix' => '<div class="field-row flix-group" style="display:none;"><span title="This field is required." class="form-required"></span>
		<div class="form-item form-type-select form-item-flix-group">
            <label for="edit-flix-group">Flix Group(s)</label>
		</div><br>',
	 '#suffix' => '</div>',
  );
  $form['request_access']['filmpacing_groupname'] = array(
	 '#title' => t('FilmPacing GroupName - Description'),
	 '#type' => 'select',
	 '#options' => array('Option1' => 'Option1',
	                    'Option2' => 'Option2',
	                    'Option3' => 'Option3',
	                    'Option4' => 'Option4',
	               ),
	 '#default_value' => '',
	 '#multiple' => TRUE,
	 '#size' => 5,
	 '#prefix' => '<div class="field-row filmpacing-groupname" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 //'#chosen' => TRUE,
  );
  $form['request_access']['territory'] = array(
	 '#title' => t('Territory'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Territory--',
	                    'Australia' => 'Australia',
	                    'Austria' => 'Austria',
	                    'Bahrain' => 'Bahrain',
	                    'Belgium' => 'Belgium',
	                    'Canada' => 'Canada',
	                    'Denmark' => 'Denmark',
	                    'Dubai/UAE' => 'Dubai/UAE',
	                    'Finland' => 'Finland',
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row territory" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['required_access'] = array(
      '#type' => 'checkboxes',
      '#options' => array(1 => t('SIMApplicationAccess'),2 => t('SupportEmailAccess')),
      //'#options' => drupal_map_assoc(array(t('SIMApplicationAccess'), t('SupportEmailAccess'))),
      //'#default_value' => 1,
      '#prefix' => '<div class="field-row required-access" style="display:none;">',
      '#suffix' => '</div>',
     // '#attributes' => array('class' => array('styled')),
  );
  $form['request_access']['iris_role'] = array(
	 '#title' => t('Role'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Role--',
	                    'Business User Standard Music Rts' => 'Business User Standard Music Rts',
	                    'IRIS Administrator' => 'IRIS Administrator',
	                    'IRIS Analyst' => 'IRIS Analyst',
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row iris-role" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['medea_affiliate_role'] = array(
	 '#title' => t('Role'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Role--',
	                    'Affiliate Finance' => 'Affiliate Finance',
	                    'Affiliate Finance - Read only' => 'Affiliate Finance - Read only',
	                    'Affiliate Legal' => 'Affiliate Legal',
	                    'Affiliate Relations' => 'Affiliate Relations',
	                    'System Administrators' => 'System Administrators'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row medea-affiliate-role" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['report_document'] = array(
	 '#title' => t('Select a Report Department'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Report Department--',
	                    'Benefits' => 'Benefits',
	                    'HR' => 'HR',
	                    'Payroll' => 'Payroll'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row report-document" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['benefits_report'] = array(
	 '#title' => t('Select a Benefits Report'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Benefits Report--',
	                    'IATSE 401K Contribution File' => 'IATSE 401K Contribution File',
	                    'MBEN297 - EMPLOYEE BENEFIT NTERFACE ADP' => 'MBEN297 - EMPLOYEE BENEFIT NTERFACE ADP',
	                    'MBEN298 - COBRA INTERFACE FILE TO ADP' => 'MBEN298 - COBRA INTERFACE FILE TO ADP'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row benefits-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['hr_report'] = array(
	 '#title' => t('Select a HR Report'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a HR Report--',
	                    'Background Check 60-Day Report' => 'Background Check 60-Day Report',
	                    'MPER004 - EMERGENCY CONTACTS REPORT' => 'MPER004 - EMERGENCY CONTACTS REPORT',
	                    'MPER541 - HR TO TIMEKEEPER INTERFACE' => 'MPER541 - HR TO TIMEKEEPER INTERFACE',
	                    'OHR SAP Reconciliation' => 'OHR SAP Reconciliation',
	                    'ZHR231 - HR BACKGROUND REPORT' => 'ZHR231 - HR BACKGROUND REPORT'
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row hr-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['payroll_report'] = array(
	 '#title' => t('Select a Payroll Report'),
	 '#type' => 'select',
	 '#options' => array('' => '--Select a Payroll Report--',
	                    'MGLX02U - GENERAL LEDGER INTERFACE' => 'MGLX02U - GENERAL LEDGER INTERFACE',
	                    'MPAY045A - EMPL.POLITICAL ACT.DED' => 'MPAY045A - EMPL.POLITICAL ACT.DED',
	                    'MPAY287 - UCS TOURS PAYROLL REGISTER' => 'MPAY287 - UCS TOURS PAYROLL REGISTER',
	                    'MPAY298 - PAYROLL TRANSCRIPT' => 'MPAY298 - PAYROLL TRANSCRIPT',
	               ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row payroll-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['request_access']['report_section'] = array(
	 '#title' => t('Select a Report Section (if Applicable)'),
	 '#type' => 'textfield',
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row report-section" style="display:none;"><span title="This field is required." class="form-required"></span>',
	 '#suffix' => '</div>',
  );
  $form['request_access']['report_access'] = array(
      '#title' => t('Do you wish to Add or Delete Report Access?'),
      '#type' => 'radios',
      '#required' => TRUE,
      '#options' => array(1 => t('Add'),2 => t('Delete')),
      //'#default_value' => 1,
      '#prefix' => '<div class="field-row report-access" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('styled')),
  );
  $form['request_access']['showtracker_role'] = array(
	 '#title' => t('Role(s)'),
	 '#type' => 'select',
	 '#options' => array('ActorAttributes Admin' => 'ActorAttributes Admin',
	                    'ActorAttributes Update' => 'ActorAttributes Update',
	                    'ActorAttributes View' => 'ActorAttributes View',
	                    'Business Affairs Administrator' => 'Business Affairs Administrator',
	               ),
	 '#default_value' => '',
	 '#multiple' => TRUE,
	 '#size' => 5,
	 '#prefix' => '<div class="field-row showtracker-role" style="display:none;"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 //'#chosen' => TRUE,
  );
  $form['request_access']['additional_request_details'] = array(
      '#title' => t('Additional Request Details'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row additional-request-details" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );
  $form['request_access']['yardi_role'] = array(
      '#title' => t('Role'),
      '#type' => 'radios',
      '#required' => TRUE,
      '#options' => array(1 => t('Admin'),2 => t('User')),
      //'#default_value' => 1,
      '#prefix' => '<div class="field-row yardi-role" style="display:none;"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>',
      '#attributes' => array('class' => array('styled')),
  );
  $form['request_access']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
  );
  $form['request-access']['reportdepartment'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
    '#attributes' => array ('id' => array ('reportdepartment')),
  );
  $form['request_access']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  $form['request_access']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );
  return $form;
}


function idm_request_assets_provisioning_request_validate($form, $form_state){
  global $user;
  $request_info = new stdClass();
  $asset_info = array();
  $requested_for = $user->name;
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');

	  $requestor_id = empty($user->name) ? '' : $user->name;
	  $request_for = empty($form_state['values']['request_for']) ? '' : $form_state['values']['request_for'];
	  $application_name = $form_state['values']['application_name'];
	  $comments = $form_state['values']['comments'];

	  //Remote access for name calculation
	  $remote_access_for_sso = '';
	  $sso = '';
	  if($form_state['values']['request_for'] == 2 && !empty($form_state['values']['name'])){
	    //some one else case
	    //preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
	    //$remote_access_for_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
	      $pos_r = strpos($form_state['values']['name'], '(');
		  if ($pos_r !== false) {
		    preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['name'], $sso);
		    $request_for_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['name'];
		  } else {
		    $request_for_sso = isset($form_state['values']['name'])? $form_state['values']['name'] : '';
	      }
	      if($form_state['values']['someoneelse_flag'] == 0) {
		      $result = idm_profile_name_autocomplete($request_for_sso, $check = 'server');
			  $valid = explode("-", $result);
			  if($valid[0] == 0) {
				form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('You are requesting for invalid user !!!'));
				return;
			  } else {
		         $request_for_sso = $valid[1];
			  }
		  }
	  } else {
	    //Myself case
	    $request_for_sso = $requestor_id;
	  }

	  $info = _idm_profile_get_user($request_for_sso);
	  $selected_user_managerid = $info['managerid'];

	  if($form_state['values']['request_for'] == 1) {
	     $message = "Request has been submitted and is pending with your managers approval. Once the request is approved, you will receive an email with the access details.";
	  }
	  if($form_state['values']['request_for'] == 2) {
		if($user->name != $selected_user_managerid) {
			$message = "Request has been submitted and is pending with the manager's approval. Once the request is approved, the selected user will receive an email with the access details.";
		}
		else {
		  $message = "Request has been submitted. The selected user will receive an email with the access details.";
		}
	  }
	  $provision_request = new stdClass();
	  $provision_request->schemas = array ('urn:scim:schemas:core:1.0');
	  $provision_request->id = $requestor_id;
	  $provision_request->userName = $request_for_sso;
	  $provision_request->entitlements = array();

	  $entitlements[0] = array();
	  $entitlements[0]['type'] = 'application';
	  $entitlements[0]['value'] = $application_name;

	  $attributes = array();
	  $key = 0;
	  $attributes[$key]['type'] = 'custom_deviceType';
	  $attributes[$key++]['value'] = $devicetype;
	  $attributes[$key]['type'] = 'custom_requestType';
	  $attributes[$key++]['value'] = $typeofrequest;
	  $attributes[$key]['type'] = 'custom_tokenType';
	  $attributes[$key++]['value'] = $tokenrequest;
	  $attributes[$key]['type'] = 'custom_comments';
	  $attributes[$key++]['value'] = $comments;
	  if($application_name == 'Medea INTL UNI') {
	    $attributes[$key]['type'] = 'custom_role';
	    $attributes[$key++]['value'] = $form_state['values']['role'];
	  }
	  if($personalemail) {
        $attributes[$key]['type'] = 'personalEmail';
        $attributes[$key++]['value'] = $personalemail;
      }
	  $entitlements[0]['attributes'] = $attributes;
	  $rsa->entitlements = $entitlements;
	  $url .= '/workflow/request/'.$remote_access_for_sso.'/RemoteAccessToken?requestor='.$requestor_id;
	  $method = 'POST';
	  $rsa_json = json_encode($rsa);
	  $rsa_result = idm_profile_execute_curl($url, $rsa_json, $method);
	  $rsa_result_obj = json_decode($rsa_result);

	  //returning result
	  if(isset($rsa_result_obj->custom_transactionId)){  //approval needed
	      if(!empty($selected_user_managerid)){
	        idm_notifications_clear_user_cache($selected_user_managerid);
	      }
	      $success_message = $message;
        drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
	      //drupal_set_message('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message.'<br/><br/>USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>'.'<br/>RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
	      //drupal_set_message($success_message);
	      //drupal_set_message('USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>');
	      //drupal_set_message('RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
	      drupal_goto('assets');
	  } elseif(!PROD){
	      form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Error occurred during RSA Token request. Please contact the <a href="mailto:'.variable_get('idm_contact_emailid','identityservicessupportIDM@nbcuni.com').'">IdM Support Team</a> for assistance.'));
	      //IP-1134
        //drupal_set_message('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.'<br/><br/>USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>'.'<br/>RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
	      //form_set_error('', t('Error occurred during RSA Token request. Please contact the <a href="mailto:identityservicessupportIDM@nbcuni.com">IdM Support Team</a> for assistance.'));
	      //drupal_set_message('USER JSON<pre>' . print_r($rsa_json, TRUE) . '</pre>');
	      //drupal_set_message('RESULT<pre>' . print_r($rsa_result, TRUE) . '</pre>');
	  }
}

/*function idm_request_assets_wireless_attributes($form, &$form_state) {
    if(isset($form_state['values'])) {
        $currstep = $form_state['step'] + 1;
    } else {
        $currstep = 0;
    }
    $form_state['step'] = $currstep;
    $allsteps = getForm();
    $currform =  $allsteps[$currstep];

    return $currform;
}*/

function getForm() {

  $form = array();
  $step1 = array();

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $step1['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));
  $step1['wireless'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'wireless-info'
		)
	  ),
  );
  $step1['wireless']['title'] = array(
      '#markup' => 'Wireless Attributes',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $step1['wireless']['name'] = array(
      '#type' => 'textfield',
      '#title' => t("Search for a user"),
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );
  $step1['wireless']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Select'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
  );
  $step1['wireless']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );
  //return $form;

    $form[] = $step1;
    $step2['#attributes']['class'][] = 'myidentityform';
	$step2['wireless'] =  array(
		  '#type' => 'fieldset',
		  '#attributes' => array (
			'class' => array (
				'wireless-info'
			)
		  ),
	);
	$step2['wireless']['title'] = array(
	    '#markup' => 'Wireless Attributes',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    $step2['wireless']['userid']=array(
        '#type'=>'textfield',
        '#title'=>t('User ID'),
        '#prefix' => '<div class="field-row userid"><span title="This field is required." class="form-required">*</span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label></div>',
        '#default_value' => '206426150',
        '#disabled' => TRUE,
      );
	$step2['wireless']['firstname'] = array(
	    '#type' => 'item',
	    '#title'=> t('First Name'),
	    '#markup'=> '<label>Drupal</label>',
	    '#prefix' => '<div class="field-row firstname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$step2['wireless']['lastname'] = array(
	    '#type' => 'item',
	    '#title'=> t('Last Name'),
	    '#markup'=> '<label>UITesting</label>',
	    '#prefix' => '<div class="field-row lastname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$step2['wireless']['fullname'] = array(
	    '#type' => 'item',
	    '#title'=> t('Full Name'),
	    '#markup'=> '<label>UITesting, Drupal</label>',
	    '#prefix' => '<div class="field-row fullname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$step2['wireless']['email'] = array(
	    '#type' => 'item',
	    '#title'=> t('Email'),
	    '#markup'=> '<label>test@igate.com</label>',
	    '#prefix' => '<div class="field-row email"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
    $step2['wireless']['company_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Company Code'),
        '#prefix' => '<div class="field-row company-code"><span title="This field is required." class="form-required">*</span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a companycode</label></div>',
        '#default_value' => '9999',
      );
    /*$step2['wireless']['mfc']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless MFC'),
        '#prefix' => '<div class="field-row mfc"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a mfc</label></div>',
        '#default_value' => '',
      );*/
    $step2['wireless']['profit_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Profit Center'),
        '#prefix' => '<div class="field-row profit-center"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Profit center</label></div>',
        '#default_value' => 'gggg',
      );
	  $step2['wireless']['wireless_cost_object'] = array(
	     // '#title' => t('Role'),
	      '#type' => 'radios',
	      '#required' => TRUE,
	      '#options' => array(1 => t('Wireless cost Object')),
	      //'#default_value' => 1,
	      '#prefix' => '<div class="field-row wireless-cost-object"><span title="This field is required." class="form-required"></span>',
	      '#suffix' => '</div>',
	      '#attributes' => array('class' => array('styled')),
	  );
    $step2['wireless']['cost_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Cost Center'),
        '#prefix' => '<div class="field-row cost-center" style="display: none;"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Cost center</label></div>',
        '#default_value' => '',
      );
    $step2['wireless']['wbse_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless WBSE Center'),
        '#prefix' => '<div class="field-row wbse-center" style="display: none;"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a WBSE center</label></div>',
        '#default_value' => '',
      );
    $step2['wireless']['internal_order']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Internal Order'),
        '#prefix' => '<div class="field-row internal-order" style="display: none;"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Internal Order</label></div>',
        '#default_value' => '',
      );
    $step2['wireless']['gl_account_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless GL Account Code'),
        '#prefix' => '<div class="field-row internal-order"><span title="This field is required." class="form-required">*</span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a GL Account Code</label></div>',
        '#default_value' => '1234',
      );
    $step2['wireless']['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array('class' => array('small_button hover-blue')),
	    '#prefix' => '<div class="submit-buttons-row" >',
    );
  $step2['wireless']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );

    $form[] = $step2;
    return $form;
}


/*function idm_request_assets_wireless_attributes_submit($form, &$form_state) {

    $form_state['storedvalues'][$form_state['step']] = $form_state['values'];
    if($form_state['step'] + 1 != getNumberOfSteps()) {
        $form_state['rebuild'] = TRUE;
    } else {
        $finalformvalues=array();
        $currStep = 0;
        foreach (getForm() as $step) {
            foreach ($step as $key => $value) {
                if(strcmp($key,"submit") != 0) {
                    $finalformvalues[$key] = $form_state['storedvalues'][$currStep][$key];
                }
            }
            $currStep++;
        }
        //Store the values from $finalformvalues in database or file etc

    }

}*/

/*function getNumberOfSteps() {
    return count(getForm());
}*/

/*  function idm_request_assets_wireless_attributes_validate($form, $form_state) {

    switch ($form_state['step']) {
        case '0':
            if(empty($form_state['values']['name']))
             form_set_error('name','Name cannot be empty');
            break;

        case '1':
            if(filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL) == false)
                 form_set_error('email','Email is not valid');
            break;

        default:
            break;
    }
    //echo '<pre>';
    //print_r($form);
}*/

function _ajax_example_get_first_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
    array(
      t(''),
      t('Advertising Standards'),
      t('Ad Sales National'),
      t('Ad Sales DR-NY'),
      t('CFS'),
      t('Promo'),
      t('Comm Operations'),
      t('Research'),
      t('Pricing & Planning'),
      t('Commercial Innovation'),
    )
  );
}

function ajax_example_dependent_dropdown_callback($form, $form_state) {
return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#dropdown-second-replace", render($form['provisioning']['sintec_onair_role'])),
      ajax_command_replace("#dropdown-third-replace", render($form['provisioning']['sintec_onair_property'])),
      array('command' => 'showregion'),
    )
  );

  //return $form['provisioning']['sintec_onair_role'];
}

/**
 * Function for handling ajax request
 */

function _ajax_example_get_second_dropdown_options($key = '') {
  $options = array(
    t('Advertising Standards') => drupal_map_assoc(
      array(
        t('Advertising Standards'),
      )
    ),
    t('Ad Sales National') => drupal_map_assoc(
      array(
        t('Account Executive'),
        t('Sales Assistant'),
        t('Sales Planner'),
      )
    ),
    t('Ad Sales DR-NY') => drupal_map_assoc(
      array(
        t('Account Executive'),
        t('Sales Assistant'),
        t('Sales Planner'),
      )
    ),
    t('CFS') => drupal_map_assoc(
      array(
        t('Billing'),
        t('Collections'),
      )
    ),
    t('Promo') => drupal_map_assoc(
      array(
        t('Promo Scheduler'),
      )
    ),
    t('Comm Operations') => drupal_map_assoc(
      array(
        t('Copy Editor'),
        t('Log Editor'),
        t('Program Scheduler'),
        t('Promo Music'),
        t('WebScheduler Support'),
      )
    ),
    t('Research') => drupal_map_assoc(
      array(
        t('Research'),
      )
    ),
    t('Pricing & Planning') => drupal_map_assoc(
      array(
        t('Planning Management'),
        t('Pricing Management'),
      )
    ),
    t('Commercial Innovation') => drupal_map_assoc(
      array(
        t('READ_ONLY'),
      )
    ),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

function _ajax_example_get_third_dropdown_options($key = '') {
  $options = array(
    t('Advertising Standards') => drupal_map_assoc(
      array(
        t('aaaa'),
      )
    ),
    t('Ad Sales National') => drupal_map_assoc(
      array(
        t('bbb'),
        t('bb'),
        t('b'),
      )
    ),
    t('Ad Sales DR-NY') => drupal_map_assoc(
      array(
        t('Account Executive'),
        t('Sales Assistant'),
        t('Sales Planner'),
      )
    ),
    t('CFS') => drupal_map_assoc(
      array(
        t('Billing'),
        t('Collections'),
      )
    ),
    t('Promo') => drupal_map_assoc(
      array(
        t('Promo Scheduler'),
      )
    ),
    t('Comm Operations') => drupal_map_assoc(
      array(
        t('Copy Editor'),
        t('Log Editor'),
        t('Program Scheduler'),
        t('Promo Music'),
        t('WebScheduler Support'),
      )
    ),
    t('Research') => drupal_map_assoc(
      array(
        t('Research'),
      )
    ),
    t('Pricing & Planning') => drupal_map_assoc(
      array(
        t('Planning Management'),
        t('Pricing Management'),
      )
    ),
    t('Commercial Innovation') => drupal_map_assoc(
      array(
        t('READ_ONLY'),
      )
    ),
  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}

function idm_request_assets_provisioning_request_2($form, &$form_state) {

  // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    return idm_request_assets_provisioning_request_form_page_two($form, $form_state);
  }

  // Otherwise we build page 1.
  $form_state['page_num'] = 1;

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));
  $form['provisioning'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'provisioning-info'
		)
	  ),
  );
  $form['provisioning']['title'] = array(
      '#markup' => 'Provisioning Request',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
	$form['provisioning']['request_for'] = array(
      '#type' => 'radios',
      '#title' => t('Request for'),
	  '#options' => array(1 => t('Myself'),2 => t('Someone Else')),
	  '#default_value' => 1,
	  '#prefix' => '<div class="field-row request-for"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
  $form['provisioning']['someoneelse_flag'] = array(
      '#type' => 'hidden',
      '#default_value' => 0,
      '#attributes' => array('id' => 'someoneelse_flag'),
  );
  $form['provisioning']['name'] = array(
      '#type' => 'textfield',
      '#title' => t(" "),
      //'#required' => TRUE,
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );
  $form['provisioning']['nam_hidden'] = array(
      '#type' => 'hidden',
      '#default_value' => 'mgrselected',
      '#attributes' => array (
       'id' => 'nam_id'
      ),
  );
  $form['provisioning']['application_name'] = array(
	 '#title' => t('Application Name'),
	 '#type' => 'select',
	 '#options' => array('' => 'Select an application name ',
	                    'AST' => 'AST',
	                    'BlackBerry' => 'BlackBerry',
	                    'CAMBAR' => 'CAMBAR',
	                    'CSP' => 'CSP',
	                    'Cafe - iSeries (Prod)' => 'Cafe - iSeries (Prod)',
	                    'Cafe - iSeries (QA)' => 'Cafe - iSeries (QA)',
	                    'EATEC' => 'EATEC',
	                    'F&L CPG - iSeries (Prod)' => 'F&L CPG - iSeries (Prod)',
	                    'F&L CPG - iSeries (QA)' => 'F&L CPG - iSeries (QA)',
	                    'F&L Digital Platforms - iSeries (Prod)' => 'F&L Digital Platforms - iSeries (Prod)',
	                    'F&L Digital Platforms - iSeries (QA)' => 'F&L Digital Platforms - iSeries (QA)',
	                    'F&L TV - iSeries (Prod)' => 'F&L TV - iSeries (Prod)',
	                    'F&L TV - iSeries (QA)' => 'F&L TV - iSeries (QA)',
	                    'F&L Women and Lifestyle- iSeries (Prod)' => 'F&L Women and Lifestyle- iSeries (Prod)',
	                    'F&L Women and Lifestyle- iSeries (QA)' => 'F&L Women and Lifestyle- iSeries (QA)',
	                    'FLIX (DEV & QA)' => 'FLIX (DEV & QA)',
	                    'FLIX (PROD)' => 'FLIX (PROD)',
	                    'Film Pacing' => 'Film Pacing',
	                    'Focus Features F Logic System - iSeries (Prod)' => 'Focus Features F Logic System - iSeries (Prod)',
	                    'Focus Features F Logic System - iSeries (QA)' => 'Focus Features F Logic System - iSeries (QA)',
	                    'Forecaster' => 'Forecaster',
	                    'Global VPF' => 'Global VPF',
	                    'HP ICE/SIM' => 'HP ICE/SIM',
	                    'IRIS' => 'IRIS',
	                    'Medea Affiliate Stations' => 'Medea Affiliate Stations',
	                    'Medea INTL UNI' => 'Medea INTL UNI',
					    'Medea RSN' => 'Medea RSN',
					    'Medea US' => 'Medea US',
					    'MediaBroker' => 'MediaBroker',
                        'Non-Linear Scheduling System' => 'Non-Linear Scheduling System',
                        'PARIS' => 'PARIS',
                        'Report.Web' => 'Report.Web',
                        'SAP HCM' => 'SAP HCM',
                        'SAP HCM NON PROD' => 'SAP HCM NON PROD',
                        'ScheduALL Production Services' => 'ScheduALL Production Services',
                        'ScheduALL Sound' => 'ScheduALL Sound',
                        'ScheduALL Tech Ops' => 'ScheduALL Tech Ops',
                        'ScheduALL WWCS' => 'ScheduALL WWCS',
                        'Series Life Cycle' => 'Series Life Cycle',
                        'ShowTracker' => 'ShowTracker',
                        'Sintec OnAir' => 'Sintec OnAir',
                        'StartOver' => 'StartOver',
                        'TNE' => 'TNE',
                        'TVRocs' => 'TVRocs',
                        'TVRocs Local LITE' => 'TVRocs Local LITE',
                        'Title Mapping Tool' => 'Title Mapping Tool',
                        'WebScheduler' => 'WebScheduler',
                        'YARDI' => 'YARDI'
                ),
	 '#default_value' => '',
	 '#prefix' => '<div class="field-row application_name"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
	 '#chosen' => TRUE,
  );
  $form['provisioning']['next'] = array (
    '#type' => 'submit',
    '#value' => t('Next'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
    '#submit' => array('idm_request_assets_provisioning_request_form_next_submit'),
    '#validate' => array('idm_request_assets_provisioning_request_form_next_validate'),
  );
  $form['provisioning']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );

 return $form;
}

/**
 * Returns the form for the second page of idm_request_assets_provisioning_request_form().
 */
function idm_request_assets_provisioning_request_form_page_two($form, &$form_state) {

  $app_name = isset($form_state['page_values']['1']['application_name']) ? $form_state['page_values']['1']['application_name'] : '';

    $form['#attributes']['class'][] = 'myidentityform';
	$form['request-profile'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'request-profile'
		)
	  ),
	);
	$form['request-profile']['title'] = array(
	    '#markup' => 'Request Profile',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
	$form['request-profile']['requestdate'] = array(
	    '#type' => 'item',
	    '#title'=> t('Request Date'),
	    '#markup'=> '<label>Dec-10-2015</label>',
	    '#prefix' => '<div class="field-row requestdate"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['request-profile']['requestedby'] = array(
	    '#type' => 'item',
	    '#title'=> t('Requested By'),
	    '#markup'=> '<label>RV, Mohan (206453163)</label>',
	    '#prefix' => '<div class="field-row requestedby"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['request-profile']['appl_name'] = array(
	    '#type' => 'item',
	    '#title'=> t('Application Name'),
	    '#markup'=> '<label>AST</label>',
	    '#prefix' => '<div class="field-row appl_name"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['request-profile']['appl_group'] = array(
	    '#type' => 'item',
	    '#title'=> t('Application Group'),
	    '#markup'=> '<label>Parks</label>',
	    '#prefix' => '<div class="field-row appl_group"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['request-profile']['access_type'] = array(
	    '#type' => 'item',
	    '#title'=> t('Access Type'),
	    '#markup'=> '<label>NEW Access</label>',
	    '#prefix' => '<div class="field-row access_type"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'user-profile'
		)
	  ),
	);
	$form['user-profile']['title'] = array(
	    '#markup' => 'User Profile',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
	$form['user-profile']['ssoid'] = array(
	    '#type' => 'item',
	    '#title'=> t('SSO ID'),
	    '#markup'=> '<label>206453163</label>',
	    '#prefix' => '<div class="field-row ssoid"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['firstname'] = array(
	    '#type' => 'item',
	    '#title'=> t('First Name'),
	    '#markup'=> '<label>Mohan</label>',
	    '#prefix' => '<div class="field-row firstname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['lastname'] = array(
	    '#type' => 'item',
	    '#title'=> t('Last Name'),
	    '#markup'=> '<label>RV</label>',
	    '#prefix' => '<div class="field-row lastname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['email'] = array(
	    '#type' => 'item',
	    '#title'=> t('Email'),
	    '#markup'=> '<label>Mohan.RV@nbcuni.com</label>',
	    '#prefix' => '<div class="field-row email"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['manager'] = array(
	    '#type' => 'item',
	    '#title'=> t('Manager / Sponsor'),
	    '#markup'=> '<label>Wadia, Peter (206046032)</label>',
	    '#prefix' => '<div class="field-row manager"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['phone'] = array(
	    '#type' => 'item',
	    '#title'=> t('Direct Phone'),
	    '#markup'=> '<label>Not Available</label>',
	    '#prefix' => '<div class="field-row phone"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['job_function'] = array(
	    '#type' => 'item',
	    '#title'=> t('Job Function'),
	    '#markup'=> '<label>Information Technology</label>',
	    '#prefix' => '<div class="field-row job-function"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['user-profile']['job_title'] = array(
	    '#type' => 'item',
	    '#title'=> t('Job Title'),
	    '#markup'=> '<label>Not Available</label>',
	    '#prefix' => '<div class="field-row job-title"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['provisioning'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'request-info'
		)
	  ),
	);
	$form['provisioning']['title'] = array(
	    '#markup' => 'Request Access',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
	if($app_name == 'AST') {
	    $form['provisioning']['role'] = array(
		'#title' => t('Role'),
		'#type' => 'select',
		'#options' => array('' => 'Select a Role ',
		                    'AMS Analyst' => 'AMS Analyst',
		                    'AMS Billing' => 'AMS Billing'
		               ),
		'#default_value' => '',
		'#prefix' => '<div class="field-row role"><span title="This field is required." class="form-required">*</span>',
		'#suffix' => '</div>',
		'#chosen' => TRUE,
	    );
    }
	if($app_name == 'CAMBAR') {
	  $form['provisioning']['model'] = array(
		 '#title' => t('Model'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select a Model ',
		                    'Warehouse Inquiry Only Model' => 'Warehouse Inquiry Only Model',
		                    'Warehouse Lead Model' => 'Warehouse Lead Model',
		                    'Warehouse Lead RF Model' => 'Warehouse Lead RF Model',
		                    'Warehouse Management Model' => 'Warehouse Management Model',
		                    'Warehouse Management RF Model' => 'Warehouse Management RF Model',
		                    'Warehouse RF User Model' => 'Warehouse RF User Model',
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row model"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}
	if($app_name == 'CSP') {
	  $form['provisioning']['company_access'] = array(
		 '#title' => t('Company Access'),
		 '#type' => 'select',
		 '#options' => array('Option1' => 'Option1',
		                    'Option2' => 'Option2',
		                    'Option3' => 'Option3',
		                    'Option4' => 'Option4',
		               ),
		 '#default_value' => '',
		 '#multiple' => TRUE,
		 '#size' => 5,
		 '#prefix' => '<div class="field-row company-access"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 //'#chosen' => TRUE,
	  );
	}
	if($app_name == 'Cafe - iSeries (Prod)' || $app_name == 'Cafe - iSeries (QA)' || $app_name == 'F&L CPG - iSeries (QA)' || $app_name == 'F&L Digital Platforms - iSeries (Prod)' || $app_name == 'F&L Digital Platforms - iSeries (QA)' || $app_name == 'F&L TV - iSeries (Prod)' || $app_name == 'F&L TV - iSeries (QA)' || $app_name == 'F&L Women and Lifestyle- iSeries (Prod)' || $app_name == 'F&L Women and Lifestyle- iSeries (QA)' || $app_name == 'Focus Features F Logic System - iSeries (Prod)' || $app_name == 'Focus Features F Logic System - iSeries (QA)') {
	  $form['provisioning']['copy_profile'] = array(
	    '#title' => t('Copy Profile'),
	    '#type' => 'textfield',
	    '#required' => TRUE,
	    //'#autocomplete_path' => 'autocomplete/tilde',
	    '#prefix' => '<div class="field-row copy-profile"><span title="This field is required." class="form-required">*</span>',
	    '#suffix' => '<label class="error" for="edit-copy-profile" generated="true" style="display: none;">Please select copy profile</label></div><!--div id="copy_profile_flag" style="display:none;">0</div-->',
	  );
	}
	if($app_name == 'EATEC') {
	  $form['provisioning']['eatec_model'] = array(
		 '#title' => t('Model'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select a Model ',
		                    'Accounts Payable' => 'Accounts Payable',
		                    'Administrator' => 'Administrator',
		                    'Finance' => 'Finance',
		                    'Ingredient Control PK/PB' => 'Ingredient Control PK/PB',
		                    'Inventory Control' => 'Inventory Control',
		                    'Operations' => 'Operations',
		                    'Sourcing' => 'Sourcing',
		                    'Sourcing Training' => 'Sourcing Training',
		                    'Warehouse' => 'Warehouse',
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row eatec-model"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}
	if($app_name == 'FLIX (DEV & QA)' || $app_name == 'FLIX (PROD)') {
	  $form['provisioning']['essbase_add_in'] = array(
		 '#title' => t('Essbase Add-in'),
		 '#type' => 'select',
		 '#options' => array('' => 'Please select an Option',
		                    'Yes' => 'Yes',
		                    'No' => 'No'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row essbase-add-in"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	  $form['provisioning']['flix_group'] = array(
	     '#markup' => l('Click here to view the list of available FLIX Groups', 'node/'),
		 '#prefix' => '<div class="field-row flix-group"><span title="This field is required." class="form-required"></span>
			<div class="form-item form-type-select form-item-flix-group">
	            <label for="edit-flix-group">Flix Group(s)</label>
			</div><br>',
		 '#suffix' => '</div>',
	  );
	}
	if($app_name == 'Film Pacing') {
	  $form['provisioning']['filmpacing_groupname'] = array(
		 '#title' => t('FilmPacing GroupName - Description'),
		 '#type' => 'select',
		 '#options' => array('Option1' => 'Option1',
		                    'Option2' => 'Option2',
		                    'Option3' => 'Option3',
		                    'Option4' => 'Option4',
		               ),
		 '#default_value' => '',
		 '#multiple' => TRUE,
		 '#size' => 5,
		 '#prefix' => '<div class="field-row filmpacing-groupname"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 //'#chosen' => TRUE,
	  );
	}
	if($app_name == 'Global VPF') {
	  $form['provisioning']['territory'] = array(
		 '#title' => t('Territory'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Territory--',
		                    'Australia' => 'Australia',
		                    'Austria' => 'Austria',
		                    'Bahrain' => 'Bahrain',
		                    'Belgium' => 'Belgium',
		                    'Canada' => 'Canada',
		                    'Denmark' => 'Denmark',
		                    'Dubai/UAE' => 'Dubai/UAE',
		                    'Finland' => 'Finland',
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row territory"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}  
	if($app_name == 'HP ICE/SIM') {
	  $form['provisioning']['required_access'] = array(
	      '#type' => 'checkboxes',
	      '#options' => array(1 => t('SIMApplicationAccess'),2 => t('SupportEmailAccess')),
	      //'#options' => drupal_map_assoc(array(t('SIMApplicationAccess'), t('SupportEmailAccess'))),
	      //'#default_value' => 1,
	      '#prefix' => '<div class="field-row required-access">',
	      '#suffix' => '</div>',
	     // '#attributes' => array('class' => array('styled')),
	  );
	}
	if($app_name == 'IRIS') {
	  $form['provisioning']['iris_role'] = array(
		 '#title' => t('Role'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Role--',
		                    'Business User Standard Music Rts' => 'Business User Standard Music Rts',
		                    'IRIS Administrator' => 'IRIS Administrator',
		                    'IRIS Analyst' => 'IRIS Analyst',
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row iris-role"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}
	if($app_name == 'Medea Affiliate Stations') {
	  $form['provisioning']['medea_affiliate_role'] = array(
		 '#title' => t('Role'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Role--',
		                    'Affiliate Finance' => 'Affiliate Finance',
		                    'Affiliate Finance - Read only' => 'Affiliate Finance - Read only',
		                    'Affiliate Legal' => 'Affiliate Legal',
		                    'Affiliate Relations' => 'Affiliate Relations',
		                    'System Administrators' => 'System Administrators'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row medea-affiliate-role"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}
	if($app_name == 'Medea INTL UNI' || $app_name == 'Medea RSN' || $app_name == 'Medea US') {
	  $form['provisioning']['role'] = array(
		 '#title' => t('Role'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select a Role ',
		                    'AMS Analyst' => 'AMS Analyst',
		                    'AMS Billing' => 'AMS Billing'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row role"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	}
	if($app_name == 'Report.Web') {
	  $form['provisioning']['report_document'] = array(
		 '#title' => t('Select a Report Department'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Report Department--',
		                    'Benefits' => 'Benefits',
		                    'HR' => 'HR',
		                    'Payroll' => 'Payroll'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row report-document"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	  $form['provisioning']['benefits_report'] = array(
		 '#title' => t('Select a Benefits Report'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Benefits Report--',
		                    'IATSE 401K Contribution File' => 'IATSE 401K Contribution File',
		                    'MBEN297 - EMPLOYEE BENEFIT NTERFACE ADP' => 'MBEN297 - EMPLOYEE BENEFIT NTERFACE ADP',
		                    'MBEN298 - COBRA INTERFACE FILE TO ADP' => 'MBEN298 - COBRA INTERFACE FILE TO ADP'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row benefits-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	  $form['provisioning']['hr_report'] = array(
		 '#title' => t('Select a HR Report'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a HR Report--',
		                    'Background Check 60-Day Report' => 'Background Check 60-Day Report',
		                    'MPER004 - EMERGENCY CONTACTS REPORT' => 'MPER004 - EMERGENCY CONTACTS REPORT',
		                    'MPER541 - HR TO TIMEKEEPER INTERFACE' => 'MPER541 - HR TO TIMEKEEPER INTERFACE',
		                    'OHR SAP Reconciliation' => 'OHR SAP Reconciliation',
		                    'ZHR231 - HR BACKGROUND REPORT' => 'ZHR231 - HR BACKGROUND REPORT'
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row hr-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	  $form['provisioning']['payroll_report'] = array(
		 '#title' => t('Select a Payroll Report'),
		 '#type' => 'select',
		 '#options' => array('' => '--Select a Payroll Report--',
		                    'MGLX02U - GENERAL LEDGER INTERFACE' => 'MGLX02U - GENERAL LEDGER INTERFACE',
		                    'MPAY045A - EMPL.POLITICAL ACT.DED' => 'MPAY045A - EMPL.POLITICAL ACT.DED',
		                    'MPAY287 - UCS TOURS PAYROLL REGISTER' => 'MPAY287 - UCS TOURS PAYROLL REGISTER',
		                    'MPAY298 - PAYROLL TRANSCRIPT' => 'MPAY298 - PAYROLL TRANSCRIPT',
		               ),
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row payroll-report" style="display:none;"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
	  $form['provisioning']['report_section'] = array(
		 '#title' => t('Select a Report Section (if Applicable)'),
		 '#type' => 'textfield',
		 '#default_value' => '',
		 '#prefix' => '<div class="field-row report-section"><span title="This field is required." class="form-required"></span>',
		 '#suffix' => '</div>',
	  );
	  $form['provisioning']['report_access'] = array(
	      '#title' => t('Do you wish to Add or Delete Report Access?'),
	      '#type' => 'radios',
	      '#required' => TRUE,
	      '#options' => array(1 => t('Add'),2 => t('Delete')),
	      //'#default_value' => 1,
	      '#prefix' => '<div class="field-row report-access"><span title="This field is required." class="form-required">*</span>',
	      '#suffix' => '</div>',
	      '#attributes' => array('class' => array('styled')),
	  );
	}
    if($app_name == 'BlackBerry' || $app_name == 'Forecaster' || $app_name == 'PARIS' || $app_name == 'Report.Web' || $app_name == 'ScheduALL Production Services' || $app_name == 'ScheduALL Sound' || $app_name == 'ScheduALL Tech Ops' || $app_name == 'ScheduALL WWCS' || $app_name == 'Series Life Cycle' || $app_name == 'StartOver' || $app_name == 'TVRocs' || $app_name == 'TVRocs Local LITE' || $app_name == 'Title Mapping Tool') {
		$form['provisioning']['additional_request_details'] = array(
		      '#title' => t('Additional Request Details'),
		      '#type' => 'textarea',
			  '#resizable' => FALSE,
		      '#prefix' => '<div class="field-row additional-request-details"><span title="This field is required." class="form-required">*</span>',
		      '#suffix' => '</div>'
		);
	}
	if($app_name == 'ShowTracker') {
	  $form['provisioning']['showtracker_role'] = array(
		 '#title' => t('Role(s)'),
		 '#type' => 'select',
		 '#options' => array('ActorAttributes Admin' => 'ActorAttributes Admin',
		                    'ActorAttributes Update' => 'ActorAttributes Update',
		                    'ActorAttributes View' => 'ActorAttributes View',
		                    'Business Affairs Administrator' => 'Business Affairs Administrator',
		               ),
		 '#default_value' => '',
		 '#multiple' => TRUE,
		 '#size' => 5,
		 '#prefix' => '<div class="field-row showtracker-role"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 //'#chosen' => TRUE,
	  );
	}
	if($app_name == 'Sintec OnAir') {
  // Get the list of options to populate the first dropdown.
  $options_first = _ajax_example_get_first_dropdown_options();
  $selected = isset($form_state['values']['organization']) ? $form_state['values']['organization'] : key($options_first);	
	  $form['provisioning']['organization'] = array(
		 '#title' => t('Organization'),
		 '#type' => 'select',
		/* '#options' => array('' => 'select an organization',
		                    'Advertising Standards' => 'Advertising Standards',
		                    'Ad Sales National' => 'Ad Sales National',
		                    'Ad Sales DR-NY' => 'Ad Sales DR-NY',
		                    'CFS' => 'CFS',
		                    'Promo' => 'Promo',
		                    'Comm Operations' => 'Comm Operations',
		                    'Research' => 'Research',
		                    'Pricing & Planning' => 'Pricing & Planning',
		                    'Commercial Innovation' => 'Commercial Innovation',
		               ),*/
		'#options' => $options_first,
		'#ajax' => array(
        // When 'event' occurs, Drupal will perform an ajax request in the
        // background. Usually the default value is sufficient (eg. change for
        // select elements), but valid values include any jQuery event,
        // most notably 'mousedown', 'blur', and 'submit'.
        'event' => 'change',
        'callback' => 'ajax_example_dependent_dropdown_callback',
        //'wrapper' => 'dropdown-second-replace',
        'wrapper' => array('dropdown-second-replace', 'dropdown-third-replace'),
         ),
		 '#default_value' => '',
		 '#size' => 5,
		 '#prefix' => '<div class="field-row organization"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	  );
  $form['provisioning']['sintec_onair_role'] = array(
    '#type' => 'select',
   // '#title' => $options_first[$selected] . ' ' . t('Role'),
    '#title' => t('Role'),
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
	 '#prefix' => '<div class="field-row sintec-onair-role" id="dropdown-second-replace"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _ajax_example_get_second_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['sintec_onair_role']) ? $form_state['values']['sintec_onair_role'] : '',
	 '#multiple' => TRUE,
	 '#size' => 5,
  );
	  $form['provisioning']['sintec_onair_property'] = array(
		 '#title' => t('Property'),
		 '#type' => 'select',
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
	 '#prefix' => '<div class="field-row sintec-onair-property" id="dropdown-third-replace"><span title="This field is required." class="form-required">*</span>',
	 '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _ajax_example_get_third_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['sintec_onair_property']) ? $form_state['values']['sintec_onair_property'] : '',
	 '#multiple' => TRUE,
	 '#size' => 5,
		 //'#chosen' => TRUE,
	  );
	  $form['provisioning']['sintec_onair_region'] = array(
		 '#title' => t('Region'),
		 '#type' => 'select',
		 '#options' => array('Chicago' => 'Chicago',
		                    'Detroit' => 'Detroit',
		                    'London' => 'London',
		                    'Los Angeles' => 'Los Angeles',
		                    'New York' => 'New York'
		               ),
		 '#default_value' => '',
		 '#multiple' => TRUE,
		 '#size' => 5,
		 '#prefix' => '<div class="field-row sintec-onair-region" style="display: none;"><span title="This field is required." class="form-required">*</span>',
		 '#suffix' => '</div>',
		 //'#chosen' => TRUE,
	  );
	}
	if($app_name == 'YARDI') {
	  $form['provisioning']['yardi_role'] = array(
	      '#title' => t('Role'),
	      '#type' => 'radios',
	      '#required' => TRUE,
	      '#options' => array(1 => t('Admin'),2 => t('User')),
	      //'#default_value' => 1,
	      '#prefix' => '<div class="field-row yardi-role"><span title="This field is required." class="form-required">*</span>',
	      '#suffix' => '</div>',
	      '#attributes' => array('class' => array('styled')),
	  );
	}
    $form['provisioning']['comments'] = array(
      '#title' => t('Comments'),
      '#type' => 'textarea',
	  '#resizable' => FALSE,
      '#prefix' => '<div class="field-row comments"><span title="This field is required." class="form-required">*</span>',
      '#suffix' => '</div>'
    );
    $form['provisioning']['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array('class' => array('small_button hover-blue')),
	    '#prefix' => '<div class="submit-buttons-row" >',
        '#submit' => array('idm_request_assets_provisioning_request_form_page_two_submit'),
    );
    $form['provisioning']['cancel'] = array (
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#attributes' => array('class' => array('small_button hover-grey')),
        '#suffix' => '</div>',
    );

/*  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('idm_request_assets_provisioning_request_form_page_two_submit'),
  );*/
 /* $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('<< Back'),
    '#submit' => array('idm_request_assets_provisioning_request_form_page_two_back'),
    // We won't bother validating the required 'color' field, since they
    // have to come back to this page to submit anyway.
    '#limit_validation_errors' => array(),
  );*/
  return $form;
}


/**
 * Validate handler for the next button on first page.
 */
function idm_request_assets_provisioning_request_form_next_validate($form, &$form_state) {
//  $year_of_birth = $form_state['values']['year_of_birth'];
//  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    //form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
  //}
}

/**
 * Submit handler for idm_request_assets_provisioning_request_form_form() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function idm_request_assets_provisioning_request_form_next_submit($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  $form_state['page_values'][1] = $form_state['values'];

  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
}

/**
 * Back button handler submit handler.
 *
 * Since #limit_validation_errors = array() is set, values from page 2
 * will be discarded. We load the page 1 values instead.
 */
function idm_request_assets_provisioning_request_form_page_two_back($form, &$form_state) {
  $form_state['values'] = $form_state['page_values'][1];
  $form_state['page_num'] = 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * The page 2 submit handler.
 *
 * This is the final submit handler. Gather all the data together and output
 * it in a drupal_set_message().
 */
function idm_request_assets_provisioning_request_form_page_two_submit($form, &$form_state) {
  // Normally, some code would go here to alter the database with the data
  // collected from the form. Instead sets a message with drupal_set_message()
  // to validate that the code worked.
  $page_one_values = $form_state['page_values'][1];
  drupal_set_message(t('The form has been submitted. name="@first @last", year of birth=@year_of_birth',
  array('@first' => $page_one_values['first'], '@last' => $page_one_values['last'], '@year_of_birth' => $page_one_values['year_of_birth'])));

  if (!empty($page_one_values['first2'])) {
    drupal_set_message(t('Second name: name="@first @last", year of birth=@year_of_birth',
    array('@first' => $page_one_values['first2'], '@last' => $page_one_values['last2'], '@year_of_birth' => $page_one_values['year_of_birth2'])));
  }
  drupal_set_message(t('And the favorite color is @color', array('@color' => $form_state['values']['color'])));
}

function idm_request_assets_wireless_attributess($form, &$form_state) {

  // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    return idm_request_assets_wireless_attributess_form_page_two($form, $form_state);
  }

  // Otherwise we build page 1.
  $form_state['page_num'] = 1;

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
	/*drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/history.js');*/
	drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/showResults.1.1.2.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));
  $form['wireless'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'wireless-info'
		)
	  ),
  );
  $form['wireless']['title'] = array(
      '#markup' => 'Wireless Attributes',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  /*$form['wireless']['name'] = array(
      '#type' => 'textfield',
      '#title' => t("Search for a user"),
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );*/
	/*updated wireless user search listing*/
	$form['wireless']['name'] = array(
      '#type' => 'textfield',
      '#title' => t("Search for a user"),
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<div class="icon-search_icon"></div><div id="search-application" class="small_button hover-blue" onclick="myFunction(arg=2)">Search</div></div>',
      '#default_value' => ''
  );
	/*updated wireless user search listing*/
  $form['wireless']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Select'),
    '#attributes' => array('class' => array('small_button hover-blue')),
		'#prefix' => '<div class="submit-buttons-row submit-search-buttons">',
    '#submit' => array('idm_request_assets_wireless_attributess_form_next_submit'),
    '#validate' => array('idm_request_assets_wireless_attributess_form_next_validate'),
  );
  $form['wireless']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );
		$form['wireless']['usersearchlist'] = array(
		'#markup' => '<div id="myTableContainer" style="clear:both;display:none">
		<div style="display: none;">
			<div class="showResults template">
				<div class="result-show">
					<div class="check-bg"><div id="%id%" class="backg">&nbsp;</div></div>
					<div class="result-id">%id%</div>
					<div class="result-firstname">%firstname%</div>
					<div class="result-lastname">%lastname%</div>
					<div class="result-email">%email%</div>
				</div>
			</div>
		</div>
		<div id="searchResult">
				<div class="title-select">Select</div>
				<div class="title-sso">SSO</div>
				<div class="title-firstname">First Name</div>
				<div class="title-lastname">Last Name</div>
				<div class="title-email">Email</div>
				<div class="noresult-found">No Results Found</div>
		<div id="searchResults">
		</div>
		</div>
		<div class="msg_stmt" style="clear:both;">If you are unable to find your requested user, Please try your search with a SSO ID</div>
		<div class="pagination" style="clear:both"></div>
		<div class="wireless-usersearch-submit"><input type="button" class="search-list-submit" name="search-list-submit" value="Continue"/><input type="button" class="search-list-cancel" name="search-list-cancel" value="Cancel"/></div>
	</div>',
			);
			$form['wireless']['usersearchlist_hidden'] = array(
	    '#type' => 'hidden',
	    '#default_value' =>'',
	    '#attributes' => array (
	      'id' => 'search_user_hidden'
				),
			);
 return $form;
}

/**
 * Method for get the Wireless User Profile details.
 *
 * @param String $userid
 */
function _idm_profile_get_user_wireless($userid) {

  global $user;
  $requestor = $user->name;
  if(empty($userid)) return;

  ctools_include('object-cache');
  $profile_data = ctools_object_cache_get('api', 'profile_data_wireless'.$userid);
  if(!empty($profile_data_wireless)){
    return $profile_data_wireless;
  }
  $url = variable_get('rest_api_check_url').'/internal/users';
  $url_get = $url . '/' . $userid. '/' .'wireless?requestor='.$requestor;
  $result = _idm_portal_get_api_data($url_get);
 // echo "<pre>";
//  print_r($result);
  $return = _idm_profile_format_user_info_wireless(json_decode($result->data));
  ctools_object_cache_set('api', 'profile_data_wireless'.$userid, $return);
  return $return;
}

function _idm_profile_format_user_info_wireless($data) {
  global $user;
  $userinfo = array();
  $userinfo['id'] = !empty($data->id) ? $data->id : "";
  $userinfo['telecomaccountcode'] = (empty($data->telecomaccountcode)) ? '' : $data->telecomaccountcode;
  $userinfo['telecomcompanycode'] = (empty($data->telecomcompanycode)) ? '' : $data->telecomcompanycode;
  $userinfo['telecomcostcenter'] = (empty($data->telecomcostcenter)) ? '' : $data->telecomcostcenter;
  $userinfo['telecomcostobjecttype'] = (empty($data->telecomcostobjecttype)) ? '' : $data->telecomcostobjecttype;
  $userinfo['telecomcurrency'] = (empty($data->telecomcurrency)) ? '' : $data->telecomcurrency;
  $userinfo['telecominternalorder'] = (empty($data->telecominternalorder)) ? '' : $data->telecominternalorder;
  $userinfo['telecommfc'] = (empty($data->telecommfc)) ? '' : $data->telecommfc;
  $userinfo['telecomprofitcenter'] = (empty($data->telecomprofitcenter)) ? '' : $data->telecomprofitcenter;
  $userinfo['telecomwbse'] = (empty($data->telecomwbse)) ? '' : $data->telecomwbse;

  return $userinfo;
}
function idm_assets_search_users_wireless($string, $check = 'client') {
	global $user;
  $matches = array();
  $solr_base = variable_get('emp_dir_solr','http://dev.idmportal.inbcu.com:8080/solr/collection1');
  //$url = $solr_base."/select?q=category:worker%20AND%20%28usertype:Employee%20OR%20usertype:Contractor%29%20AND%20title:*".urlencode($string)."*&wt=json&indent=true";
  $url = $solr_base."/select?q=category:worker%20AND%20title:*".urlencode($string)."*&rows=30&wt=json&indent=true";
  $response_obj = drupal_http_request($url);
  $response = $response_obj->data;
  $docs = json_decode($response)->response->docs;

	foreach ($docs as $key => $value) {
   unset($docs[$key]->supervisorid);
	 unset($docs[$key]->usertype);
	 unset($docs[$key]->hastilde);
	 unset($docs[$key]->locationid);
	 unset($docs[$key]->category);
	 unset($docs[$key]->url);
	 unset($docs[$key]->_version_);
	 unset($docs[$key]->_version_);
	 $first_arr = explode("(",$docs[$key]->title[0]);
	 $docs[$key]->firstname = strstr($first_arr[0],' ',true);
	 $docs[$key]->lastname = strstr($first_arr[0],' ');
	 $docs[$key]->radio = "";
	 if(!isset($docs[$key]->email)) {
		$docs[$key]->email = "not defined";
	 }
	 //$docs[$key]->title[0] = $first_arr[0];
	}
	/*echo "<pre>";
	print_r($docs);
	exit;*/
  $numofrecords = json_decode($response)->response->numFound;
	drupal_json_output($docs);
}

function idm_assets_search_users_wireless_sso($string, $check = 'client') {
	global $user;
  $matches = array();
  $solr_base = variable_get('emp_dir_solr','http://dev.idmportal.inbcu.com:8080/solr/collection1');
  //$url = $solr_base."/select?q=category:worker%20AND%20%28usertype:Employee%20OR%20usertype:Contractor%29%20AND%20title:*".urlencode($string)."*&wt=json&indent=true";
  $url = $solr_base."/select?q=category:worker%20AND%20id:".urlencode($string)."&rows=30&wt=json&indent=true";
  $response_obj = drupal_http_request($url);
  $response = $response_obj->data;
  $docs = json_decode($response)->response->docs;

	foreach ($docs as $key => $value) {
   unset($docs[$key]->supervisorid);
	 unset($docs[$key]->usertype);
	 unset($docs[$key]->hastilde);
	 unset($docs[$key]->locationid);
	 unset($docs[$key]->category);
	 unset($docs[$key]->url);
	 unset($docs[$key]->_version_);
	 unset($docs[$key]->_version_);
	 $first_arr = explode("(",$docs[$key]->title[0]);
	 $docs[$key]->firstname = strstr($first_arr[0],' ',true);
	 $docs[$key]->lastname = strstr($first_arr[0],' ');
	 $docs[$key]->radio = "";
	 if(!isset($docs[$key]->email)) {
		$docs[$key]->email = "not defined";
	 }
	 //$docs[$key]->title[0] = $first_arr[0];
	}
	/*echo "<pre>";
	print_r($docs);
	exit;*/
  $numofrecords = json_decode($response)->response->numFound;
	drupal_json_output($docs);
}
/**
 * Returns the form for the second page of idm_request_assets_vroozi_profile_mgtt().
 */
function idm_request_assets_wireless_attributess_form_page_two($form, &$form_state) {

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));

  $name = isset($form_state['page_values']['1']['name']) ? $form_state['page_values']['1']['name'] : '';
  preg_match('/[\w\s]+\(([\d]+)\)*/', $name, $sso);
  $userid = isset($sso[1]) ? $sso[1] : $name;
  //$info = _idm_profile_get_user($userid);
	$info = idm_asset_profile_get_user($userid);
	/*echo "<pre>";
	print_r($info);*/
  /*$firstname = empty($info['displayname']) ? '' : $info['displayname'];
  $lastname = empty($info['preferred_name']) ? '' : $info['preferred_name'];
  $fullname = $lastname.', '.$firstname; 
  $email = empty($info['email']['work']) ? '' : $info['email']['work'];*/
	$firstname = empty($info['firstname']) ? '' : $info['firstname'];
	$lastname = empty($info['lastname']) ? '' : $info['lastname'];
	$fullname = $lastname.', '.$firstname;
	$email = empty($info['email']['work']) ? '' : $info['email']['work'];
  $info_wireless = _idm_profile_get_user_wireless($userid);
  
  $wirelessaccountcode = empty($info_wireless['telecomaccountcode']) ? '' : $info_wireless['telecomaccountcode']; 
  $wirelesscompanycode = empty($info_wireless['telecomcompanycode']) ? '' : $info_wireless['telecomcompanycode']; 
  $wirelesscostcenter = empty($info_wireless['telecomcostcenter']) ? '' : $info_wireless['telecomcostcenter']; 
  $wirelesscostobjecttype = empty($info_wireless['telecomcostobjecttype']) ? '' : $info_wireless['telecomcostobjecttype']; 
  $wirelesscurrency = empty($info_wireless['telecomcurrency']) ? '' : $info_wireless['telecomcurrency']; 
  $wirelessinternalorder = empty($info_wireless['telecominternalorder']) ? '' : $info_wireless['telecominternalorder']; 
  $wirelessmfc = empty($info_wireless['telecommfc']) ? '' : $info_wireless['telecommfc']; 
  $wirelessprofitcenter = empty($info_wireless['telecomprofitcenter']) ? '' : $info_wireless['telecomprofitcenter']; 
  $wirelesswbse = empty($info_wireless['telecomwbse']) ? '' : $info_wireless['telecomwbse']; 
  
  if(!empty($wirelesscostcenter)) {
	  $wirelesscostobject = 'Cost Center';
	  $wirelesscostcenter_display = 'block';
	  $wirelessinternalorder_display = 'none';
	  $wirelesswbse_display = 'none';
  } else if(!empty($wirelessinternalorder)) {
	  $wirelesscostobject = 'Internal Order';
	  $wirelesscostcenter_display = 'none';
	  $wirelessinternalorder_display = 'block';
	  $wirelesswbse_display = 'none';
  } else if(!empty($wirelesswbse)) {
      $wirelesscostobject = 'WBSE';
	  $wirelesscostcenter_display = 'none';
	  $wirelessinternalorder_display = 'none';
	  $wirelesswbse_display = 'block';
  }else if(empty($wirelesscostcenter)&&empty($wirelessinternalorder)&&empty($wirelesswbse)) {
      $wirelesscostobject = 'Cost Center';
	  $wirelesscostcenter_display = 'block';
	  $wirelessinternalorder_display = 'none';
	  $wirelesswbse_display = 'none';
  }
    $form['#attributes']['class'][] = 'myidentityform';
	$form['wireless'] =  array(
		  '#type' => 'fieldset',
		  '#attributes' => array (
			'class' => array (
				'wireless-info'
			)
		  ),
	);
	$form['wireless']['title'] = array(
	    '#markup' => 'Wireless Attributes',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    /*$form['wireless']['userid']=array(
        '#type'=>'textfield',
        '#title'=>t('User ID'),
        '#prefix' => '<div class="field-row userid"><span title="This field is required." class="form-required">*</span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label></div>',
        '#default_value' => $userid,
      );*/
	$form['wireless']['useridlabel'] = array(
	    '#type' => 'item',
	    '#title'=> t('User ID'),
	    '#markup'=> '<label>'.$userid.'</label>',
	    '#prefix' => '<div class="field-row userid"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['wireless']['userid'] = array(
	    '#type' => 'hidden',
	    '#default_value' => $userid,
	);
	$form['wireless']['firstname'] = array(
	    '#type' => 'item',
	    '#title'=> t('First Name'),
	    '#markup'=> '<label>'.$firstname.'</label>',
	    '#prefix' => '<div class="field-row firstname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['wireless']['lastname'] = array(
	    '#type' => 'item',
	    '#title'=> t('Last Name'),
	    '#markup'=> '<label>'.$lastname.'</label>',
	    '#prefix' => '<div class="field-row lastname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['wireless']['fullname'] = array(
	    '#type' => 'item',
	    '#title'=> t('Full Name'),
	    '#markup'=> '<label>'.$fullname.'</label>',
	    '#prefix' => '<div class="field-row fullname"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
	$form['wireless']['email'] = array(
	    '#type' => 'item',
	    '#title'=> t('Email'),
	    '#markup'=> '<label>'.$email.'</label>',
	    '#prefix' => '<div class="field-row email"><span title="This field is required." class="form-required"></span>',
	    '#suffix' => '</div>',
	);
    $form['wireless']['company_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Company Code'),
        '#prefix' => '<div class="field-row company-code">',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a companycode</label></div>',
        '#default_value' => $wirelesscompanycode,
        '#maxlength' => 4,
        '#minlength' => 4,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
    $form['wireless']['profit_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Profit Center'),
        '#prefix' => '<div class="field-row profit-center"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Profit center</label></div>',
        '#default_value' => $wirelessprofitcenter,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
	  $form['wireless']['wireless_cost_object'] = array(
	      '#title' => t('Wireless Cost Object'),
	      '#type' => 'radios',
	      '#required' => TRUE,
	      '#options' => array('Cost Center'=> t('Cost Center'), 'WBSE'=> t('WBSE'), 'Internal Order'=> t('Internal Order')),
	      '#default_value' => $wirelesscostobject,
	      '#prefix' => '<div class="field-row wireless-cost-object"><span title="This field is required." class="form-required"></span>',
	      '#suffix' => '</div>',
	      '#attributes' => array('class' => array('styled')),
	  );
    $form['wireless']['cost_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Cost Center'),
        '#prefix' => '<div class="field-row cost-center" style="display: '.$wirelesscostcenter_display.';"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Cost center</label></div>',
        '#default_value' => $wirelesscostcenter,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
    $form['wireless']['wbse_center']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless WBSE'),
        '#prefix' => '<div class="field-row wbse-center" style="display: '.$wirelesswbse_display.';"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a WBSE center</label></div>',
        '#default_value' => $wirelesswbse,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
    $form['wireless']['internal_order']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless Internal Order'),
        '#prefix' => '<div class="field-row internal-order" style="display: '.$wirelessinternalorder_display.';"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a Internal Order</label></div>',
        '#default_value' => $wirelessinternalorder,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
    $form['wireless']['gl_account_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Wireless GL Account Code'),
        '#prefix' => '<div class="field-row gl-account-code"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a GL Account Code</label></div>',
        '#default_value' => $wirelessaccountcode,
        '#attributes' => array('style' => "text-transform: uppercase;"),
      );
	$form['wireless']['wireless_costobjecttype'] = array(
	    '#type' => 'hidden',
	    '#default_value' => $wirelesscostobjecttype,
	    '#attributes' => array (
	      'id' => 'wireless_costobjecttype_id'
	    ),
	);
    $form['wireless']['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array('class' => array('small_button hover-blue wireless-submit-button')),
				'#prefix' => '<div class="submit-buttons-row submit-user-buttons">',
        '#submit' => array('idm_request_assets_wireless_attributess_form_page_two_submit'),
    );
    $form['wireless']['cancel'] = array (
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#attributes' => array('class' => array('small_button hover-grey')),
        '#suffix' => '</div>',
    );

    return $form;	
}

/**
 * Validate handler for submit the form page.
 */
/*function idm_request_assets_wireless_attributess_form_page_two_validate($form, &$form_state) {
	
	if(strlen($form_state['values']['company_code'])<4){
		form_set_error('company_code', t('Company code could not less than 4 characters'));
	}
}*/


/**
 * Validate handler for the next button on first page.
 */
function idm_request_assets_wireless_attributess_form_next_validate($form, &$form_state) {
//  $year_of_birth = $form_state['values']['year_of_birth'];
//  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    //form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
  //}  
}

/**
 * Submit handler for idm_request_assets_provisioning_request_form_form() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function idm_request_assets_wireless_attributess_form_next_submit($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  $form_state['page_values'][1] = $form_state['values'];

  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
}

/**
 * Back button handler submit handler.
 *
 * Since #limit_validation_errors = array() is set, values from page 2
 * will be discarded. We load the page 1 values instead.
 */
function idm_request_assets_wireless_attributess_form_page_two_back($form, &$form_state) {
  $form_state['values'] = $form_state['page_values'][1];
  $form_state['page_num'] = 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * The page 2 submit handler.
 *
 * This is the final submit handler. Gather all the data together and output
 * it in a drupal_set_message().
 */
function idm_request_assets_wireless_attributess_form_page_two_submit($form, &$form_state) {

  // Normally, some code would go here to alter the database with the data
  // collected from the form. Instead sets a message with drupal_set_message()
  // to validate that the code worked.
  $page_one_values = $form_state['page_values'][1];

  global $user;
  $request_info = new stdClass();
  $wireless_info = array();

  $requested_for = $form_state['values']['userid'];
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');
  $url .= '/workflow/request/'.$requested_for.'/WirelessApplicationRequest?requestor='.$user->name;

  $message = 'Request has been updated successfully';

  $request_info->schemas = array (
		'urn:scim:schemas:core:1.0'
	);
  $key = 0;
  $wireless_info[$key]['type'] = 'custom_telecomaccountcode';
  $wireless_info[$key++]['value'] = empty($form_state['values']['gl_account_code']) ? '' : $form_state['values']['gl_account_code'];
  $wireless_info[$key]['type'] = 'custom_telecomcompanycode';
  $wireless_info[$key++]['value'] = empty($form_state['values']['company_code']) ? '' : $form_state['values']['company_code'];
  //$wireless_info[$key]['type'] = 'custom_telecomcostobjecttype';
  //$wireless_info[$key++]['value'] = empty($form_state['values']['wireless_costobjecttype']) ? '' : $form_state['values']['wireless_costobjecttype'];'';
  //$wireless_info[$key]['type'] = 'custom_telecomcurrency';
  //$wireless_info[$key++]['value'] = 'USD';
  //$wireless_info[$key]['type'] = 'custom_telecommfc';
  //$wireless_info[$key++]['value'] = '124';
  $wireless_info[$key]['type'] = 'custom_telecomprofitcenter';
  $wireless_info[$key++]['value'] = empty($form_state['values']['profit_center']) ? '' : $form_state['values']['profit_center'];

  if(!empty($form_state['values']['wireless_cost_object'])) {
	if($form_state['values']['wireless_cost_object'] == 'Cost Center') {
	  $wireless_info[$key]['type'] = 'custom_telecomcostcenter';
	  $wireless_info[$key++]['value'] = empty($form_state['values']['cost_center']) ? '' : $form_state['values']['cost_center'];
	  $wireless_info[$key]['type'] = 'custom_telecomwbse';
	  $wireless_info[$key++]['value'] = '';
	  $wireless_info[$key]['type'] = 'custom_telecominternalorder';
	  $wireless_info[$key++]['value'] = '';
	} else if($form_state['values']['wireless_cost_object'] == 'WBSE') {
	  $wireless_info[$key]['type'] = 'custom_telecomcostcenter';
	  $wireless_info[$key++]['value'] = '';
	  $wireless_info[$key]['type'] = 'custom_telecomwbse';
	  $wireless_info[$key++]['value'] = empty($form_state['values']['wbse_center']) ? '' : $form_state['values']['wbse_center'];
	  $wireless_info[$key]['type'] = 'custom_telecominternalorder';
	  $wireless_info[$key++]['value'] = '';
	} else if($form_state['values']['wireless_cost_object'] == 'Internal Order') {
	  $wireless_info[$key]['type'] = 'custom_telecomcostcenter';
	  $wireless_info[$key++]['value'] = '';
	  $wireless_info[$key]['type'] = 'custom_telecomwbse';
	  $wireless_info[$key++]['value'] = '';
	  $wireless_info[$key]['type'] = 'custom_telecominternalorder';
	  $wireless_info[$key++]['value'] = empty($form_state['values']['internal_order']) ? '' : $form_state['values']['internal_order'];
	}
  }

  $request_info->id = $user->name;
  $request_info->userName = $requested_for;
  $entitlements = new stdClass();
  $entitlements->type = 'application';
  $entitlements->value = 'WirelessApplicationRequest';
  $entitlements->attributes = $wireless_info;
  $request_info->entitlements = array($entitlements);
  $user_json = json_encode($request_info);
  $method = 'POST';
  $result = idm_profile_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	// returning result

  if(isset($result_obj->taskState)){
    //drupal_set_message('Request has been submitted. Please allow up to 60 minutes for the data to flow to downstream applications.');
    //drupal_set_message($message);
    drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'. $message, $allowed_tags = array('img')));
    //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
    //drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
    //drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
    //drupal_goto('assets');
  }elseif(!PROD){
    form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Service Error !!!'));
    //form_set_error('', t('Service Error !!!'));
    drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
    drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
    drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
  }
}


function idm_request_assets_vroozi_profile_mgtt($form, &$form_state) {

  // Display page 2 if $form_state['page_num'] == 2
  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    return idm_request_assets_vroozi_profile_mgtt_form_page_two($form, $form_state);
  }

  // Otherwise we build page 1.
  $form_state['page_num'] = 1;

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));
  $form['vroozi'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'vroozi-info'
		)
	  ),
  );
  $form['vroozi']['title'] = array(
      '#markup' => 'Vroozi Profile Management',
      '#prefix' => '<div class="title"><h2>',
      '#suffix' => '</h2></div>'
  );
  $form['vroozi']['name'] = array(
      '#type' => 'textfield',
      '#title' => t("Search for a user"),
      '#autocomplete_path' => 'autocomplete/name',
      '#prefix' => '<div class="field-row search-name"><span title="This field is required." class="form-required"></span>',
      '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please select a user</label><div class="icon-search_icon"></div><button class="small_button hover-blue" onclick="javascript: return false;">Search</button></div>',
      '#default_value' => ''
  );
  $form['vroozi']['submit'] = array (
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array('class' => array('small_button hover-blue')),
	'#prefix' => '<div class="submit-buttons-row" >',
    '#submit' => array('idm_request_assets_vroozi_profile_mgtt_form_next_submit'),
    '#validate' => array('idm_request_assets_vroozi_profile_mgtt_form_next_validate'),
  );
  $form['vroozi']['cancel'] = array (
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('class' => array('small_button hover-grey')),
    '#suffix' => '</div>',
  );

 return $form;
}

/**
 * Method for get the Vroozi User Profile details.
 *
 * @param String $userid
 */
function _idm_profile_get_user_vroozi($userid) {

  global $user;
  $requestor = $user->name;
  if(empty($userid)) return;

  ctools_include('object-cache');
  $profile_data = ctools_object_cache_get('api', 'profile_data_vroozi'.$userid);
  if(!empty($profile_data_vroozi)){
    return $profile_data_vroozi;
  }
  $url = variable_get('rest_api_check_url').'/internal/users';
  $url_get = $url . '/' . $userid. '/' .'vroozi?requestor='.$requestor;
  $result = _idm_portal_get_api_data($url_get);
 // echo '<pre>';
  //print_r($result);
  $return = _idm_profile_format_user_info_vroozi(json_decode($result->data));
  ctools_object_cache_set('api', 'profile_data_vroozi'.$userid, $return);
  return $return;
}

function _idm_profile_format_user_info_vroozi($data) {
  global $user;
  $userinfo = array();
  $userinfo['id'] = !empty($data->id) ? $data->id : "";
  $userinfo['vroozicompanycode'] = (empty($data->vroozicompanycode)) ? '' : $data->vroozicompanycode;
  $userinfo['vroozicontentgroup'] = (empty($data->vroozicontentgroup)) ? '' : $data->vroozicontentgroup;
  $userinfo['vroozifeeddate'] = (empty($data->vroozifeeddate)) ? '' : $data->vroozifeeddate;

  if(!empty($data->vroozirole)){
    foreach($data->vroozirole as $vroozirole){
		$userinfo['vroozirole'][] = $vroozirole->value;
    }
  }
  $userinfo['vrooziwbse'] = (empty($data->vrooziwbse)) ? '' : $data->vrooziwbse;
  $userinfo['vroozimfc'] = (empty($data->vroozimfc)) ? '' : $data->vroozimfc;
  $userinfo['vroozicostcenter'] = (empty($data->vroozicostcenter)) ? '' : $data->vroozicostcenter;

  return $userinfo;
}


/**
 * Returns the form for the second page of idm_request_assets_vroozi_profile_mgtt().
 */
function idm_request_assets_vroozi_profile_mgtt_form_page_two($form, &$form_state) {

  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js', array('weight' => -1));
  drupal_add_js($path . '/js/validate.js', array('weight' => 1));

   $name = isset($form_state['page_values']['1']['name']) ? $form_state['page_values']['1']['name'] : '';
   preg_match('/[\w\s]+\(([\d]+)\)*/', $name, $sso);
   $userid = isset($sso[1]) ? $sso[1] : $name;
   //$info = _idm_profile_get_user($userid);
	 $info = idm_asset_profile_get_user($userid);
   $info_vroozi = _idm_profile_get_user_vroozi($userid);
   //echo '<pre>';
   //print_r($info_vroozi);
   //$firstname = empty($info['displayname']) ? '' : $info['displayname'];
   //$lastname = empty($info['preferred_name']) ? '' : $info['preferred_name'];
	 $firstname = empty($info['firstname']) ? '' : $info['firstname'];
   $lastname = empty($info['lastname']) ? '' : $info['lastname'];
   $email = empty($info['email']['work']) ? '' : $info['email']['work'];
   $managername = empty($info['managerfullname']) ? '' : $info['managerfullname'];
   $address_work_streetaddress = empty($info['address']['work']['streetaddress']) ? '' : $info['address']['work']['streetaddress'];
   $location_work_building = empty($info['location']['work']['building']) ? '' : $info['location']['work']['building'];
   $location_work_floor = empty($info['location']['work']['floor']) ? '' : $info['location']['work']['floor'];
   $location_work_building = empty($info['location']['work']['building']) ? '' : $info['location']['work']['building'];
   $address_work_city = empty($info['address']['work']['city']) ? '' : $info['address']['work']['city'];
   $address_work_state = empty($info['address']['work']['state']) ? '' : $info['address']['work']['state'];
   $address_work_country = empty($info['address']['work']['country']) ? '' : $info['address']['work']['country'];
   $address_work_zip = empty($info['address']['work']['zip']) ? '' : $info['address']['work']['zip'];

   $vroozicompanycode = empty($info_vroozi['vroozicompanycode']) ? '' : $info_vroozi['vroozicompanycode'];
   $vroozicontentgroup = empty($info_vroozi['vroozicontentgroup']) ? '' : $info_vroozi['vroozicontentgroup'];
   $vrooziwbse = empty($info_vroozi['vrooziwbse']) ? '' : $info_vroozi['vrooziwbse'];
   $vroozicostcenter = empty($info_vroozi['vroozicostcenter']) ? '' : $info_vroozi['vroozicostcenter'];
   $vroozimfc = empty($info_vroozi['vroozimfc']) ? '' : $info_vroozi['vroozimfc'];
   $vroozifeeddate = empty($info_vroozi['vroozifeeddate']) ? '' : $info_vroozi['vroozifeeddate'];

   if($vrooziwbse) {
	$alternativecostobject = $vrooziwbse;
	$alternativecostobjecttype = 'WBSE';
   } else if($vroozicostcenter) {
    $alternativecostobject = $vroozicostcenter;
    $alternativecostobjecttype = 'Cost Center';
   } else if($vroozimfc) {
    $alternativecostobject = $vroozimfc;
    $alternativecostobjecttype = 'Internal Order';
   } else {
    $alternativecostobjecttype = '';
   }

   $vroozirole = empty($info_vroozi['vroozirole']) ? array() : $info_vroozi['vroozirole'];

   if(!empty($info_vroozi['vrooziwbse']) || !empty($info_vroozi['vroozicostcenter']) || !empty($info_vroozi['vroozimfc'])) {
    $usealternativecostobject = 'Yes';
    $style_display = "block";
   } else {
    $usealternativecostobject = 'No';
    $style_display = "none";
   }

    $form['#attributes']['class'][] = 'myidentityform';
	$form['vroozi'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'vroozi-info'
		)
	  ),
	);
	/*$form['vroozi'] = array(
      '#type' => 'fieldset',
      '#attributes' => array (
      'class' => array (
           'employee-info'
       )
      ),
    );*/
	$form['vroozi']['title'] = array(
	    '#markup' => 'General Employee Data',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    $form['vroozi']['firstname']=array(
        '#type'=>'textfield',
        '#title'=>t('First Name'),
        '#prefix' => '<div class="field-row firstname"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter first name</label></div>',
        '#default_value' => $firstname,
        '#disabled' => TRUE,
    );
    $form['vroozi']['lastname']=array(
        '#type'=>'textfield',
        '#title'=>t('Last Name'),
        '#prefix' => '<div class="field-row lastname"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter last name</label></div>',
        '#default_value' => $lastname,
        '#disabled' => TRUE,
    );
    $form['vroozi']['userid']=array(
        '#type'=>'textfield',
        '#title'=>t('User ID'),
        '#prefix' => '<div class="field-row userid"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter user id</label></div>',
        '#default_value' => $userid,
        '#disabled' => TRUE,
    );
    $form['vroozi']['email']=array(
        '#type'=>'textfield',
        '#title'=>t('Email'),
        '#prefix' => '<div class="field-row email"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter email</label></div>',
        '#default_value' => $email,
        '#disabled' => TRUE,
    );
    $form['vroozi']['manager_name']=array(
        '#type'=>'textfield',
        '#title'=>t('Manager Name'),
        '#prefix' => '<div class="field-row manager-name"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Manager name</label></div>',
        '#default_value' => $managername,
        '#disabled' => TRUE,
    );
    $form['vroozi']['servicenow_ticket']=array(
        '#type'=>'textfield',
        '#title'=>t('Service-Now Ticket'),
        '#prefix' => '<div class="field-row servicenow-ticket"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Service Now Requestor</label></div>',
        '#default_value' => $vroozifeeddate,
        //'#disabled' => TRUE,
    );
   $form['address'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'employee-info'
		)
	  ),
	);
	$form['address']['title'] = array(
	    '#markup' => 'Address Data',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    $form['address']['address']=array(
        '#type'=>'textfield',
        '#title'=>t('Address'),
        '#prefix' => '<div class="field-row address"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Address</label></div>',
        '#default_value' => $address_work_streetaddress,
        '#disabled' => TRUE,
    );
    $form['address']['building']=array(
        '#type'=>'textfield',
        '#title'=>t('Building'),
        '#prefix' => '<div class="field-row building"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter building</label></div>',
        '#default_value' => $location_work_building,
        '#disabled' => TRUE,
    );
    $form['address']['floor']=array(
        '#type'=>'textfield',
        '#title'=>t('Floor'),
        '#prefix' => '<div class="field-row floor"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter floor</label></div>',
        '#default_value' => $location_work_floor,
        '#disabled' => TRUE,
    );
    $form['address']['city']=array(
        '#type'=>'textfield',
        '#title'=>t('City'),
        '#prefix' => '<div class="field-row city"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter city</label></div>',
        '#default_value' => $address_work_city,
        '#disabled' => TRUE,
    );
    $form['address']['state']=array(
        '#type'=>'textfield',
        '#title'=>t('State'),
        '#prefix' => '<div class="field-row state"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter state</label></div>',
        '#default_value' => $address_work_state,
        '#disabled' => TRUE,
    );
    $form['address']['postal_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Postal Code'),
        '#prefix' => '<div class="field-row postal-code"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter postal code</label></div>',
        '#default_value' => $address_work_zip,
        '#disabled' => TRUE,
    );
    $form['address']['country']=array(
        '#type'=>'textfield',
        '#title'=>t('Country'),
        '#prefix' => '<div class="field-row country"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter country</label></div>',
        '#default_value' => $address_work_country,
        '#disabled' => TRUE,
    );
   $form['accounting'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'accounting-info'
		)
	  ),
	);
	$form['accounting']['title'] = array(
	    '#markup' => 'Accounting',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    /*$form['accounting']['company_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Default Company Code'),
        '#prefix' => '<div class="field-row company-code"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Company Code</label></div>',
        '#default_value' => '',
        '#disabled' => TRUE,
    );
    $form['accounting']['cost_object_type']=array(
        '#type'=>'textfield',
        '#title'=>t('Default Cost Object Type'),
        '#prefix' => '<div class="field-row cost-object-type"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Cost Object Type</label></div>',
        '#default_value' => '',
        '#disabled' => TRUE,
    );
    $form['accounting']['cost_object']=array(
        '#type'=>'textfield',
        '#title'=>t('Default Cost Object'),
        '#prefix' => '<div class="field-row cost-object"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Cost Object</label></div>',
        '#default_value' => '',
        '#disabled' => TRUE,
    );*/
	$form['accounting']['use_alternative_cost_object'] = array(
		 '#title' => t('Use Alternative Cost Object'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select', 'Yes' => 'Yes', 'No' => 'No'),
		 '#default_value' => $usealternativecostobject,
		 '#prefix' => '<div class="field-row use-alternative-cost-object"><span title="This field is required." class="form-required"></span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	);
    $form['accounting']['alternative_company_code']=array(
        '#type'=>'textfield',
        '#title'=>t('Alteranative Company Code'),
        '#prefix' => '<div class="field-row alternative-company-code" style="display: '.$style_display.';"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Alteranative Company Code</label></div>',
        '#default_value' => $vroozicompanycode,
        '#disabled' => FALSE,
    );
	$form['accounting']['alternative_cost_object_type'] = array(
		 '#title' => t('Alternative Cost Object Type'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select', 'Cost Center' => 'Cost Center', 'WBSE' => 'WBSE', 'Internal Order' => 'Internal Order'),
		 '#default_value' => $alternativecostobjecttype,
		 '#prefix' => '<div class="field-row alternative-cost-object-type" style="display: '.$style_display.';"><span title="This field is required." class="form-required"></span>',
		 '#suffix' => '</div>',
		 '#chosen' => TRUE,
	);
    $form['accounting']['alternative_cost_object']=array(
        '#type'=>'textfield',
        '#title'=>t('Alteranative Cost Object'),
        '#prefix' => '<div class="field-row alternative-cost-object" style="display: '.$style_display.';"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '<label class="error" for="edit-name" generated="true" style="display: none;">Please enter Alteranative Cost Object</label></div>',
        '#default_value' => empty($alternativecostobject) ? '' : $alternativecostobject,
        '#disabled' => FALSE,
    );
   $form['security'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'security-info'
		)
	  ),
	);
	$form['security']['title'] = array(
	    '#markup' => 'Purchase Manager Security Values',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    $form['security']['manager_roles'] = array(
	    '#title' => t('Purchase Manager Roles'),
        '#type' => 'checkboxes',
        '#default_value' => $vroozirole,
        '#options' => array('Shopper' => t('Shopper'),'Sourcing Approver' => t('Sourcing Approver'),'Central Receiver' => t('Central Receiver'),'Admin' => t('Admin')),
        '#prefix' => '<div class="field-row manager-roles"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('styled')),
    );
	$form['security']['content_group'] = array(
		 '#title' => t('Content Group'),
		 '#type' => 'select',
		 '#options' => array('' => 'Select', 'ADMIN' => 'ADMIN',
		                   'East_North_Central' => 'East_North_Central',
		                   'East_South_Central' => 'East_South_Central',
		                   'Med_MidAtl' => 'Med_MidAtl',
		                   'Med_OrlandoPark' => 'Med_OrlandoPark',
		                   'Med_Pacific' => 'Med_Pacific',
		                   'Mid Atlantic - En Pointe Exec' => 'Mid Atlantic - En Pointe Exec',
		                   'Mid-Atlantic' => 'Mid-Atlantic',
		                   'Mountain' => 'Mountain',
		                   'New_England' => 'New_England',
		                   'Orlando_Park' => 'Orlando_Park',
		                   'Pacific' => 'Pacific',
		                   'Pacific - En Pointe Executive Access' => 'Pacific - En Pointe Executive Access',
		                   'South_Atlantic' => 'South_Atlantic',
		                   'West_North_Central' => 'West_North_Central',
		                   'West_South_Central' => 'West_South_Central',
		                   'PacificEA' => 'PacificEA',
		                   'Mid_AtlEA' => 'Mid_AtlEA',
		                   ),
		 '#prefix' => '<div class="field-row content-group"><span title="This field is required." class="form-required"></span>',
		 '#suffix' => '</div>',
		 '#default_value' => $vroozicontentgroup,
		 '#chosen' => TRUE,
	);
   /*$form['data_mgt'] =  array(
		'#type' => 'fieldset',
		'#attributes' => array (
		'class' => array (
			'data-mgt-info'
		)
	  ),
	);
	$form['data_mgt']['title'] = array(
	    '#markup' => 'Data Management',
	    '#prefix' => '<div class="title"><h2>',
	    '#suffix' => '</h2></div>'
	);
    $form['data_mgt']['purchase_manager'] = array(
	    '#title' => t('Send/Resend to Purchase Manager'),
        '#type' => 'checkbox',
        '#prefix' => '<div class="field-row purchase-manager"><span title="This field is required." class="form-required"></span>',
        '#suffix' => '</div>',
        '#attributes' => array('class' => array('styled')),
    );*/
    $form['security']['submit'] = array (
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array('class' => array('small_button hover-blue vroozi-submit-button')),
	    '#prefix' => '<div class="submit-buttons-row" >',
        '#submit' => array('idm_request_assets_vroozi_profile_mgtt_form_page_two_submit'),
    );
    $form['security']['cancel'] = array (
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#attributes' => array('class' => array('small_button hover-grey')),
        '#suffix' => '</div>',
    );

/*  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('idm_request_assets_provisioning_request_form_page_two_submit'),
  );*/
 /* $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('<< Back'),
    '#submit' => array('idm_request_assets_provisioning_request_form_page_two_back'),
    // We won't bother validating the required 'color' field, since they
    // have to come back to this page to submit anyway.
    '#limit_validation_errors' => array(),
  );*/
  return $form;
}


/**
 * Validate handler for the next button on first page.
 */
function idm_request_assets_vroozi_profile_mgtt_form_next_validate($form, &$form_state) {
//  $year_of_birth = $form_state['values']['year_of_birth'];
//  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    //form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
  //}
}

/**
 * Submit handler for idm_request_assets_provisioning_request_form_form() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 */
function idm_request_assets_vroozi_profile_mgtt_form_next_submit($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  $form_state['page_values'][1] = $form_state['values'];

  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
}

/**
 * Back button handler submit handler.
 *
 * Since #limit_validation_errors = array() is set, values from page 2
 * will be discarded. We load the page 1 values instead.
 */
function idm_request_assets_vroozi_profile_mgtt_form_page_two_back($form, &$form_state) {
  $form_state['values'] = $form_state['page_values'][1];
  $form_state['page_num'] = 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * The page 2 submit handler.
 *
 * This is the final submit handler. Gather all the data together and output
 * it in a drupal_set_message().
 */
function idm_request_assets_vroozi_profile_mgtt_form_page_two_submit($form, &$form_state) {
  // Normally, some code would go here to alter the database with the data
  // collected from the form. Instead sets a message with drupal_set_message()
  // to validate that the code worked.
  $page_one_values = $form_state['page_values'][1];

  global $user;
  $request_info = new stdClass();
  $vroozi_info = array();

  $requested_for = $form_state['values']['userid'];
  $url = variable_get('rest_api_check_url', 'http://3.3.175.127:8080/idm-api/rest');
  $url .= '/workflow/request/'.$requested_for.'/VrooziProfileManagement?requestor='.$user->name;

  $message = 'Request has been updated successfully';

  $request_info->schemas = array (
		'urn:scim:schemas:core:1.0'
	);
  $key = 0;
  //$vroozi_info[$key] = new stdClass();
  $vroozi_info[$key]['type'] = 'custom_altCostObject';
  $vroozi_info[$key++]['value'] = empty($form_state['values']['use_alternative_cost_object']) ? '' : $form_state['values']['use_alternative_cost_object'];

  $vroozi_info[$key]['type'] = 'custom_serviceNowTicket';
  $vroozi_info[$key++]['value'] = empty($form_state['values']['servicenow_ticket']) ? '' : $form_state['values']['servicenow_ticket'];

  if(!empty($form_state['values']['use_alternative_cost_object']) && $form_state['values']['use_alternative_cost_object'] == 'Yes') {
	  $vroozi_info[$key]['type']  = 'custom_altCompCode';
	  $vroozi_info[$key++]['value'] = empty($form_state['values']['alternative_company_code']) ? '' :$form_state['values']['alternative_company_code'];
	  $costobjtype = array();
	  $costobjtype[0] = new stdClass();
	  if(!empty($form_state['values']['alternative_cost_object_type'])) {
        if($form_state['values']['alternative_cost_object_type'] == 'WBSE') {
		  $costobjtype[0]->type = 'custom_wbse';
        } else if($form_state['values']['alternative_cost_object_type'] == 'Cost Center') {
		  $costobjtype[0]->type = 'custom_costCenter';
        } else if($form_state['values']['alternative_cost_object_type'] == 'Internal Order') {
		  $costobjtype[0]->type = 'custom_internalOrder';
        }
	  }
	  //$costobjtype[0]->type = 'custom_wbse';
	  $costobjtype[0]->value = $form_state['values']['alternative_cost_object'];
	  $vroozi_info[$key]['type'] = 'custom_altCostObjType';
	  $vroozi_info[$key++]['value'] = $costobjtype;
  }

  $vroozi_info[$key]['type'] = 'custom_purchaseMgrRoles';
  $manager_roles = empty($form_state['values']['manager_roles']) ? '' : $form_state['values']['manager_roles'];
  $mgrroles = implode(',', $manager_roles);
  $mgrroles = rtrim($mgrroles,",0");
  $vroozi_info[$key++]['value'][] = $mgrroles;
  $vroozi_info[$key]['type'] = 'custom_contentGroup';
  $vroozi_info[$key++]['value'] = $form_state['values']['content_group'];
  $vroozi_info[$key]['type'] = 'custom_sendResendToMgr';
  $vroozi_info[$key++]['value'] = 'true';

  $request_info->id = $requested_for;
  $request_info->userName = $requested_for;
  $entitlements = new stdClass();
  $entitlements->type = 'application';
  $entitlements->value = 'VrooziProfileManagement';
  $entitlements->attributes = $vroozi_info;
  $request_info->entitlements = array($entitlements);

  $user_json = json_encode($request_info);
  $method = 'POST';

  $result = idm_profile_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	// returning result

  if(isset($result_obj->custom_transactionId)){
    //drupal_set_message($message);
    drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'. $message, $allowed_tags = array('img')));
    //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
    //drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
    //drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
    drupal_goto('assets');
  }elseif(!PROD){
    form_set_error('', '<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.t('Service Error !!!'));
    //drupal_set_message('DEBUG Info<br>URL<pre>' . print_r($url, TRUE) . '</pre>');
    //drupal_set_message('USER JSON<pre>' . print_r($user_json, TRUE) . '</pre>');
    //drupal_set_message('RESULT<pre>' . print_r($result, TRUE) . '</pre>');
  }
}

function idm_assets_worker_device_account_validation($string) {
  global $user;
  $matches = array();
  $solr_base = variable_get('emp_dir_solr','http://dev.idmportal.inbcu.com:8080/solr/collection1');
  $url = $solr_base."/select?q=category:worker%20AND%20id:".urlencode($string)."&wt=json&indent=true";
  $response_obj = drupal_http_request($url);
  $response = $response_obj->data;
  $docs = json_decode($response)->response->docs;
  foreach ($docs as $value ) {
    //echo $value->usersubpersontype;
    //echo $value->usertype;
  }
  $returnArray = array();
  $returnArray[] = $value->usertype;
  $returnArray[] = $value->usersubpersontype;
  return $returnArray;
}

function idm_asset_profile_get_user($userid) {
  if(empty($userid)) return;

  ctools_include('object-cache');
  $profile_data = ctools_object_cache_get('api', 'asset_profile_data'.$userid);
  if(!empty($profile_data)){
    return $profile_data;
  }
  $url = variable_get('rest_api_check_url').'/internal/users';
  $url_get = $url . '/' . $userid;
  $result = _idm_portal_get_api_data($url_get);
  $return = _idm_asset_profile_format_user_info(json_decode($result->data));
  ctools_object_cache_set('api', 'asset_profile_data'.$userid, $return);
  return $return;
}

function _idm_asset_profile_format_user_info($data) {
  global $user;
  $displayName = "";
  $userinfo = array();
	$userinfo['firstname'] = ucfirst($data->name->givenName);
	$userinfo['lastname'] = ucfirst($data->name->familyName);
	$userinfo['fullname'] = ucfirst($data->name->givenName).' '.ucfirst($data->name->familyName);
	if(!empty($data->emails)){
    foreach($data->emails as $email){
      $userinfo['email'][$email->type] = $email->value;
    }
  }
	 if(!empty($data->addresses)){
    foreach($data->addresses as $address){
      $userinfo['address'][$address->type]['streetaddress'] = (empty($address->streetAddress)) ? '' : $address->streetAddress;
      $userinfo['address'][$address->type]['streetaddress2'] = (empty($address->custom_addressLine2)) ? '' : $address->custom_addressLine2;
      $userinfo['address'][$address->type]['city'] = (empty($address->locality)) ? '' : ucwords(strtolower($address->locality));
      $userinfo['address'][$address->type]['state'] = (empty($address->region)) ? '' : $address->region;
      $userinfo['address'][$address->type]['country'] = (empty($address->country)) ? '' : $address->country ;
      $userinfo['address'][$address->type]['zip'] = (empty($address->postalCode)) ? '' : $address->postalCode;
    }
  }
	if(!empty($data->addresses)){
    foreach($data->addresses as $address){
      $userinfo['location'][$address->type]['building'] = (empty($address->custom_building)) ? '' : $address->custom_building;
      $userinfo['location'][$address->type]['floor'] = (empty($address->custom_floor)) ? '' : $address->custom_floor;
      $userinfo['location'][$address->type]['station'] = (empty($address->custom_office)) ? '' : $address->custom_office;
    }
  }
	 if(!empty($data->manager->custom_managerfullname)){
   $managerfullname = explode(",", $data->manager->custom_managerfullname);
   $userinfo['managerfullname'] = trim($managerfullname[1]).' '.trim($managerfullname[0]);
  }
  return $userinfo;
}

/**
  * Function to manager approval form for sailpoint
  */
function idm_rsa_manager_approval_sailpoint($form, &$form_state) {
  global $user;
  $loggedinuserid = empty($user->name) ? '' : $user->name;
	$workitem_id = arg(1);
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
	$url .= "/identityiq/rest/Custom/custom/getWorkItemDetail/".$workitem_id;
	$method = 'GET';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);	
	$result_obj = json_decode($result);

	if($result_obj->identityRequesterId!='') {
		$identityRequesterId = $result_obj->identityRequesterId;
	} else {
		$identityRequesterId = "";
	}
	if($result_obj->deviceType!='') {
		$deviceType = $result_obj->deviceType;
	} else {
		$deviceType = "Not Available";
	}
	if($result_obj->date!='') {
		$reqdate = date("M j, Y", strtotime($result_obj->date));
	} else {
		$reqdate = "Not Available";
	}
	if($result_obj->requestType!='') {
		$requestType = $result_obj->requestType;
	} else {
		$requestType = "Not Available";
	}
	
	if($result_obj->identityName!='') {
		$identityName = $result_obj->identityName;
	} else {
		$identityName = "Not Available";
	}
	
	/*if($result_obj->comments!='') {
		$comments = $result_obj->comments;
	} else {
		$comments = "";
	}*/
	
	if($result_obj->requesterFromRSA!='') {
		$req_info = _idm_profile_get_user($result_obj->requesterFromRSA);
		/*echo "<pre>";
		print_r($req_info['displayname']);
		exit;*/
		if($req_info['formatted']!='') {
			$requested_by = $req_info['formatted']."(".$req_info['sso'].")";
		} else {
			$requested_by = "None";
		}
		
		/*$req_name_split = explode(" ",$req_info['displayname']);
		$firstname = $req_name_split[0];
		$lastname = $req_name_split[1];*/
	
	}
	
	/*echo "<pre>";
	print_r($result_obj);
	exit;*/
	
	$request_profile = _idm_profile_get_user($result_obj->identityName);
	/*echo "<pre>";
	print_r($request_profile);
	exit;*/
	if($request_profile['sso']!='') {
		$req_sso = $request_profile['sso'];
	} else {
		$req_sso = "Not Available";
	}
	
	if($request_profile['displayname']!='') {
		$req_name_split = explode(" ",$request_profile['displayname']);
		$firstname = $req_name_split[0];
		$lastname = $req_name_split[1];
	} else {
		$firstname = "Not Available";
		$lastname = "Not Available";
	}
	
	if($request_profile['email']['work']!='') {
		$req_email = $request_profile['email']['work'];
	} else {
		$req_email = "Not Available";
	}
	
	if($request_profile['managerfullname']!='') {
		$req_manager = $request_profile['managerfullname'];
	} else {
		$req_manager = "Not Available";
	}
	
	if($request_profile['phone']['mobile']!='') {
		$req_phone = $request_profile['phone']['mobile'];
	} else {
		$req_phone = "Not Available";
	}
	
	if($request_profile['job_function']!='') {
		$req_jobfunction = $request_profile['job_function'];
	} else {
		$req_jobfunction = "Not Available";
	}
	
	if($request_profile['title']!='') {
		$req_title = $request_profile['title'];
	} else {
		$req_title = "Not Available";
	}
	if($request_profile['managerid']!='') {
		$req_manager_id = $request_profile['managerid'];
	} else {
		$req_manager_id = "Not Available";
	}
	if(isset($result_obj->WorkItemId)!='') {
		if($request_profile['managerid']!='') {
			if($req_manager_id==$loggedinuserid) {
		$supplier_name = $request_profile['custom_company'];
  $worker_device_account_flag_array = idm_assets_worker_device_account_validation($loggedinuserid);
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  $form['request_profile'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );
  $rsa_help_link = variable_get("rsa_help_link","https://wiki.nbcuni.ge.com/pages/viewpage.action?pageId=80946512&preview=/80946512/80946514/New%20RSA%20Token%20Request%20Process_Ver1.1.docx");
  $form['request_profile']['title'] = array(
    '#markup' => 'Request Profile',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );

	 $form['request_profile']['requestid'] = array(
    '#markup' => 'Requestid',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$identityRequesterId.'</div></div>'
  );

	 $form['request_profile']['applicationname'] = array(
    '#markup' => 'Application Name',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">RSA Soft Token</div></div>'
  );

	$form['request_profile']['requestdate'] = array(
    '#markup' => 'Request Date',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$reqdate.'</div></div>'
  );

	 $form['request_profile']['devicetype'] = array(
    '#markup' => 'Device Type',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$deviceType.'</div></div>'
  );
	
	$form['request_profile']['requestedby'] = array(
    '#markup' => 'Requested By',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$requested_by.'</div></div>'
  );

	 $form['request_profile']['requesttype'] = array(
    '#markup' => 'Request Type',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$requestType.'</div></div>'
  );
	
	$form['request_profile']['tokentype'] = array(
    '#markup' => 'Token Type',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">Soft Token</div></div>'
  );
	
	
	
	
	$form['user_profile'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );

  $form['user_profile']['title'] = array(
    '#markup' => 'User Profile',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );

	 $form['user_profile']['ssoid'] = array(
    '#markup' => 'SSO Id',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_sso.'</div></div>'
  );

	 $form['user_profile']['managersponser'] = array(
    '#markup' => 'Manager/Sponsor',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_manager.'</div></div>'
  );

	$form['user_profile']['firstname'] = array(
    '#markup' => 'First Name',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$firstname.'</div></div>'
  );

	 $form['user_profile']['directphone'] = array(
    '#markup' => 'Direct Phone',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_phone.'</div></div>'
  );
	
	$form['user_profile']['lastname'] = array(
    '#markup' => 'Last Name',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$lastname.'</div></div>'
  );

	 $form['user_profile']['jobfunction'] = array(
    '#markup' => 'Job Function',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_jobfunction.'</div></div>'
  );
	
	$form['user_profile']['email'] = array(
    '#markup' => 'Email',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_email.'</div></div>'
  );

	 $form['user_profile']['jobtitle'] = array(
    '#markup' => 'Job Title',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_title.'</div></div>'
  );

	$form['predefined_approval_process'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );

  $form['predefined_approval_process']['title'] = array(
    '#markup' => 'Predefined Approval Process',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );

	 $form['predefined_approval_process']['pre_approval_ssoid'] = array(
    '#markup' => 'SSO Id',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_manager_id.'</div></div>'
  );

	 $form['predefined_approval_process']['current_status'] = array(
    '#markup' => 'Current Status',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">Manager Approval</div></div>'
  );

	$form['prior_action'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );

  $form['prior_action']['title'] = array(
    '#markup' => 'Please Verify the access request details and take an action',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );
	
	 $form['prior_action']['prior_action'] = array(
    '#markup' => 'Prior Action(s)',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">:</div></div>'
  );

	
	if($request_profile['usertype']=='employee') {
		$field_set_value = "Comments";
	}elseif($request_profile['usertype']=='contractor' && $check_status_supplier=='supplier not found') {
		$field_set_value = "Please confirm if users supplier information is correct";
	} else {
		$field_set_value = "Supplier Information";
	}
	if($request_profile['usertype']=='employee') {
		$hide_current_supplier_title = "style='display:none;'";
	} else {
		$hide_current_supplier_title = "";
	}
	
	
	 $form['supplier_information'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );

  $form['supplier_information']['title'] = array(
    '#markup' => $field_set_value,
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );
	$form['supplier_information']['hidden_employee_type'] = array(
      '#type' => 'hidden',
      '#default_value' => $request_profile['usertype'],
      '#attributes' => array (
       'id' => 'hidden_employee_type'
      ),
    );
	 $form['supplier_information']['supplier_information'] = array(
    '#markup' => 'Current supplier',
    '#prefix' => '<div class="request-profile" '.$hide_current_supplier_title.'><div class="profile-label" style="font-weight:bold">',
    '#suffix' => '</div><div class="profile-value" style="font-weight:bold">'.$supplier_name.'</div></div>'
  );
	$check_status_supplier = check_approved_suppliers($supplier_name);
	if($request_profile['usertype']=='contractor' && $check_status_supplier=='supplier not found') {
		$form['supplier_information']['hidden_radiobuttonoption_suppliername'] = array(
      '#type' => 'hidden',
      '#default_value' =>'show',
      '#attributes' => array (
       'id' => 'hidden_radiobuttonoption_suppliername'
      ),
    );
	} else {
		$form['supplier_information']['hidden_radiobuttonoption_suppliername'] = array(
      '#type' => 'hidden',
      '#default_value' =>'hide',
      '#attributes' => array (
       'id' => 'hidden_radiobuttonoption_suppliername'
      ),
    );
	}
	
	if($request_profile['usertype']=='contractor' && $check_status_supplier=='supplier not found') {
	$form['supplier_information']['vendor_option'] = array(
    '#type' => 'radios',
    '#title' => t(''),
		'#options' => array(1 => t('Yes I want to update supplier name'),2 => t('No, supplier name is correct')),
		'#prefix' => '<div style="clear:both"></div><div style="clear:both;margin-top:2em" class="profile-value" id="do-you-want-update">Do You want to update the supplier name of the user ?.</div><div class="request-profile supplier-name-update-option">',
    '#suffix' => '</div>',
	  '#attributes' => array('class' => array('styled')),
  );
	$form['supplier_information']['vendorname'] = array(
				'#title' => t('Vendor Name'),
        '#type' => 'select',
				'#options' => array(''=>'Select', 'Birlasoft'=>'Birlasoft','Capgemini'=>'Capgemini','Cognizant'=>'Cognizant','Compucom'=>'Compucom','EPAM'=>'EPAM','Genpact'=>'Genpact','HCL'=>'HCL','HP'=>'HP','Infocepts'=>'Infocepts','Madiba'=>'Madiba','Microland'=>'Microland','SDG'=>'SDG','Softtek'=>'Softtek','TCS'=>'TCS','Tech Mahindra'=>'Tech Mahindra','Teradata'=>'Teradata','Wipro'=>'Wipro','Other Vendor'=>'Other Vendor'),
        '#prefix' => '<div style="clear:both"></div><div class="request-profile rsa-manager-approval-vendor-name" style="display:none">',
        '#suffix' => '</div>',
				'#chosen' => TRUE
    );
		$form['supplier_information']['othervendor'] = array(
				'#title' => t('Other Vendor'),
        '#type' => 'select',
				'#options' => get_othervendors_list(false),
        '#prefix' => '<div style="clear:both"></div><div class="request-profile rsa-manager-approval-other-vendor" style="display:none">',
        '#suffix' => '</div>',
				'#chosen' => TRUE
    );
		$form['supplier_information']['others'] = array(
				'#title' => t('Others'),
        '#type' => 'textfield',
        '#prefix' => '<div style="clear:both"></div><div class="request-profile rsa-manager-approval-others" style="display:none">',
        '#suffix' => '</div>'
    );
		}
		$form['supplier_information']['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
		'#prefix' => '<div style="clear:both"></div><div class="request-profile request-profile-comments">',
    '#suffix' => '</div>',
  );
	$form['supplier_information']['hidden_workitemid'] = array(
      '#type' => 'hidden',
      '#default_value' => $workitem_id,
      '#attributes' => array (
       'id' => 'hidden_workitemid'
      ),
    );
		$form['supplier_information']['hidden_identityRequesterId'] = array(
      '#type' => 'hidden',
      '#default_value' => $identityRequesterId,
      '#attributes' => array (
       'id' => 'hidden_identityRequesterId'
      ),
    );
		$form['supplier_information']['hidden_suppliername'] = array(
      '#type' => 'hidden',
      '#default_value' => $supplier_name,
      '#attributes' => array (
       'id' => 'hidden_suppliername'
      ),
    );
		
	$form['supplier_information']['approve'] = array (
      '#type' => 'submit',
      '#value' => t('Approve'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-approve-leg'),
			'#prefix' => '<div style="clear:both"></div><div class="request-profile">',
	  );
		$form['supplier_information']['reject'] = array (
      '#type' => 'submit',
      '#value' => t('Reject'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-reject-leg'),
	  );
		$form['supplier_information']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	
	} else {
		 $form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">You are not authorized person to view this request</div></div>'
		);
	}
		} else {
			$form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">There is some issue with IDM API please contact IDM Team </div></div>'
		);
	 }
		
	} else {
		$form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">Workitem not found</div></div>'
		);
	}
	
	
	
	
  return $form;
}


function idm_rsa_manager_approval_sailpoint_validate($form, $form_state) {
	date_default_timezone_set(variable_get('default_timezone', DEFAULT_TIME_ZONE));
		/*echo "<pre>";
		print_r($form_state['values']);*/
		//exit;
		if($form_state['values']['remoteaccess']==0){
			preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['someoneelse'], $sso);
			$request_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['someoneelse'];
		}
		if($form_state['values']['remoteaccess']==1){
			$request_sso = $user->name;
		}
		
		if($form_state['values']['othervendor']=='0'){
			$othervendor = "Others";
		} else {
			$othervendor = (isset($form_state['values']['othervendor'])) ? $form_state['values']['othervendor'] : '';
		}
		
		if($form_state['values']['vendor_option']==1){
			$vendorUpdateDecision = "Yes";
		} 
		if($form_state['values']['vendor_option']==2){
			$vendorUpdateDecision = "No";
		} 
		if(!isset($form_state['values']['vendor_option'])){
			$vendorUpdateDecision = "";
		} 
		
		if($form_state['values']['hidden_employee_type']=='employee'){
			$selectedVendorName = "";
			$selectedOtherVendors = "";
			$unListedVendorName = "";
		} else {
			$selectedVendorName = (isset($form_state['values']['vendorname'])) ? $form_state['values']['vendorname'] : '';
			$selectedOtherVendors = $othervendor;
			$unListedVendorName = (isset($form_state['values']['others'])) ? $form_state['values']['others'] : '';
		}
		
		if($form_state['values']['op']=='Approve') {
			$op_value = "Approved";
		}
		if($form_state['values']['op']=='Reject') {
			$op_value = "Rejected";
		}
	
		$account = new stdClass();
		$name = new stdClass();
		$name->workITMState = $op_value;
		$name->workITMName = $form_state['values']['hidden_workitemid'];
		$name->workITMcomments = $form_state['values']['comments'];
		$name->vendorName = $form_state['values']['hidden_suppliername'];
		$name->selectedVendorName = $selectedVendorName;
		$name->selectedOtherVendors = $selectedOtherVendors;
		$name->unListedVendorName = $unListedVendorName;
		$name->vendorUpdateDecision = $vendorUpdateDecision;
		$name->identityRequesterId  = $form_state['values']['hidden_identityRequesterId'];
		//$account->workflowArgs = $name;
		$user_json = json_encode($name);
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
  $url .= '/identityiq/rest/Custom/custom/firstLevelApproval';
	$method = 'POST';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	/*echo "<pre>";
	print_r($result_obj);
	exit;*/
	if($op_value=='Approved') {
		if($result_obj=='Success') {
		 $success_message = "Request has been approved and you will recieve an email with further details";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		drupal_goto('rsa/approvals/list');
	} else {
		drupal_goto('rsa/approvals/list');
	}
	}
	if($op_value=='Rejected') {
		if($result_obj=='Success') {
		 $success_message = "Request has been submitted";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		drupal_goto('rsa/approvals/list');
	} else {
		drupal_goto('rsa/approvals/list');
	}
	}
	
	if($result_obj->requestID=='Failure') {
		 $success_message = "Error occurred while submitting the form";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		//drupal_set_message(t('Error occurred while submitting the form'), 'warning');
	}
	if($result_obj->errors!='') {
		drupal_set_message(t($result_obj->errors[0]), 'warning');
	}

}

/**
  * Function to VPN supplier approval form for sailpoint
  */
function idm_rsa_vpnsupplier_approval_sailpoint($form, &$form_state) {
  global $user;
  $loggedinuserid = empty($user->name) ? '' : $user->name;
	$workitem_id = arg(1);
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
	$url .= "/identityiq/rest/Custom/custom/getWorkItemDetail/".$workitem_id;
	$method = 'GET';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	/*echo "<pre>";
	print_r($result_obj);
	exit;*/
	if($result_obj->identityRequesterId!='') {
		$identityRequesterId = $result_obj->identityRequesterId;
	} else {
		$identityRequesterId = "";
	}
	if($result_obj->deviceType!='') {
		$deviceType = $result_obj->deviceType;
	} else {
		$deviceType = "Not Available";
	}
	if($result_obj->date!='') {
		$reqdate = date("M j, Y", strtotime($result_obj->date));
	} else {
		$reqdate = "Not Available";
	}
	if($result_obj->requestType!='') {
		$requestType = $result_obj->requestType;
	} else {
		$requestType = "Not Available";
	}
	
	if($result_obj->identityName!='') {
		$identityName = $result_obj->identityName;
	} else {
		$identityName = "Not Available";
	}
	
	if($result_obj->requesterFromRSA!='') {
		$req_info = _idm_profile_get_user($result_obj->requesterFromRSA);
		if($req_info['formatted']!='') {
			$requested_by = $req_info['formatted']."(".$req_info['sso'].")";
		} else {
			$requested_by = "None";
		}
	}

	/*if($result_obj->comments!='') {
		$comments = $result_obj->comments;
	} else {
		$comments = "";
	}*/

	
	$request_profile = _idm_profile_get_user($result_obj->identityName);
	
	if($request_profile['sso']!='') {
		$req_sso = $request_profile['sso'];
	} else {
		$req_sso = "Not Available";
	}
	
	if($request_profile['displayname']!='') {
		$req_name_split = explode(" ",$request_profile['displayname']);
		$firstname = $req_name_split[0];
		$lastname = $req_name_split[1];
	} else {
		$firstname = "Not Available";
		$lastname = "Not Available";
	}
	
	if($request_profile['email']['work']!='') {
		$req_email = $request_profile['email']['work'];
	} else {
		$req_email = "Not Available";
	}
	
	if($request_profile['managerfullname']!='') {
		$req_manager = $request_profile['managerfullname'];
	} else {
		$req_manager = "Not Available";
	}
	
	if($request_profile['phone']['mobile']!='') {
		$req_phone = $request_profile['phone']['mobile'];
	} else {
		$req_phone = "Not Available";
	}
	
	if($request_profile['job_function']!='') {
		$req_jobfunction = $request_profile['job_function'];
	} else {
		$req_jobfunction = "Not Available";
	}
	
	if($request_profile['title']!='') {
		$req_title = $request_profile['title'];
	} else {
		$req_title = "Not Available";
	}
	if($request_profile['managerid']!='') {
		$req_manager_id = $request_profile['managerid'];
	} else {
		$req_manager_id = "Not Available";
	}
	
	if(isset($result_obj->WorkItemId)!='') {
		if($request_profile['managerid']!='') {
			if($req_manager_id==$loggedinuserid) {
		$worker_device_account_flag_array = idm_assets_worker_device_account_validation($loggedinuserid);
  drupal_add_js(drupal_get_path('module', 'idm_assets').'/js/assets.js');
  $form['#attributes']['class'][] = 'myidentityform';
  $path = drupal_get_path('theme', 'idmtheme');
  drupal_add_js($path . '/js/jquery.maskedinput.min.js');
  drupal_add_js($path . '/js/jquery.validate.min.js');
  drupal_add_js($path . '/js/validate.js');
  $form['request_profile'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );
  $rsa_help_link = variable_get("rsa_help_link","https://wiki.nbcuni.ge.com/pages/viewpage.action?pageId=80946512&preview=/80946512/80946514/New%20RSA%20Token%20Request%20Process_Ver1.1.docx");
  $form['request_profile']['title'] = array(
    '#markup' => 'Request Profile',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );

	 $form['request_profile']['requestid'] = array(
    '#markup' => 'Requestid',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$identityRequesterId.'</div></div>'
  );

	 $form['request_profile']['applicationname'] = array(
    '#markup' => 'Application Name',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">RSA Soft Token</div></div>'
  );

	$form['request_profile']['requestdate'] = array(
    '#markup' => 'Request Date',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$reqdate.'</div></div>'
  );

	 $form['request_profile']['devicetype'] = array(
    '#markup' => 'Device Type',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$deviceType.'</div></div>'
  );
	
	$form['request_profile']['requestedby'] = array(
    '#markup' => 'Requested By',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$requested_by.'</div></div>'
  );

	 $form['request_profile']['requesttype'] = array(
    '#markup' => 'Request Type',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$requestType.'</div></div>'
  );
	
	$form['request_profile']['tokentype'] = array(
    '#markup' => 'Token Type',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">Soft Token</div></div>'
  );
	
	
	
	
	$form['user_profile'] =  array(
	  '#type' => 'fieldset',
	  '#attributes' => array (
		'class' => array (
			'remote-access-info'
		)
	  ),
  );

  $form['user_profile']['title'] = array(
    '#markup' => 'VPN supplier Details',
    '#prefix' => '<div class="title"><h2>',
    '#suffix' => '</h2></div>'
  );

	 $form['user_profile']['ssoid'] = array(
    '#markup' => 'SSO Id',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_sso.'</div></div>'
  );

	 $form['user_profile']['managersponser'] = array(
    '#markup' => 'Manager/Sponsor',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_manager.'</div></div>'
  );

	$form['user_profile']['firstname'] = array(
    '#markup' => 'First Name',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$firstname.'</div></div>'
  );

	 $form['user_profile']['directphone'] = array(
    '#markup' => 'Direct Phone',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_phone.'</div></div>'
  );
	
	$form['user_profile']['lastname'] = array(
    '#markup' => 'Last Name',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$lastname.'</div></div>'
  );

	 $form['user_profile']['jobfunction'] = array(
    '#markup' => 'Job Function',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_jobfunction.'</div></div>'
  );
	
	$form['user_profile']['email'] = array(
    '#markup' => 'Email',
    '#prefix' => '<div style="clear:both"></div><div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_email.'</div></div>'
  );

	 $form['user_profile']['jobtitle'] = array(
    '#markup' => 'Job Title',
    '#prefix' => '<div class="request-profile"><div class="profile-label">',
    '#suffix' => '</div><div class="profile-value">'.$req_title.'</div></div>'
  );

	$form['user_profile']['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
		'#prefix' => '<div style="clear:both"></div><div class="request-profile request-profile-comments">',
    '#suffix' => '</div>',
  );
	$form['user_profile']['hidden_workitemid'] = array(
      '#type' => 'hidden',
      '#default_value' => $workitem_id,
      '#attributes' => array (
       'id' => 'hidden_workitemid'
      ),
    );
		$form['user_profile']['hidden_identityRequesterId'] = array(
      '#type' => 'hidden',
      '#default_value' => $identityRequesterId,
      '#attributes' => array (
       'id' => 'hidden_identityRequesterId'
      ),
    );
	$form['user_profile']['skipreview'] = array (
      '#type' => 'submit',
      '#value' => t('Skip Review'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-skipreview-leg'),
			'#prefix' => '<div style="clear:both"></div><div class="request-profile">',
	  );
		/*$form['user_profile']['reject'] = array (
      '#type' => 'submit',
      '#value' => t('Reject'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-reject-leg'),
	  );*/
		$form['user_profile']['cancel'] = array (
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('class' => array('small_button hover-grey'), 'id' => 'edit-cancel-leg'),
      '#suffix' => '</div>',
	  );
	} else {
		$form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">You are not authorized person to view this request</div></div>'
		);
	}
		} else {
			$form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">There is some issue with IDM API please contact IDM Team</div></div>'
		);
		}
	} else {
		$form['request_profile'] = array(
    '#markup' => '',
    '#prefix' => '<div>',
    '#suffix' => '<div style="text-align:center;color:#ed541d">Workitem not found</div></div>'
		);
	
	}
	
	
  

  return $form;
}

function idm_rsa_vpnsupplier_approval_sailpoint_validate($form, $form_state) {
	date_default_timezone_set(variable_get('default_timezone', DEFAULT_TIME_ZONE));
		/*echo "<pre>";
		print_r($form_state['values']);*/
		//exit;
		if($form_state['values']['remoteaccess']==0){
			preg_match('/[\w\s]+\(([\d]+)\)*/', $form_state['values']['someoneelse'], $sso);
			$request_sso = isset($sso[1]) ? $sso[1] : $form_state['values']['someoneelse'];
		}
		if($form_state['values']['remoteaccess']==1){
			$request_sso = $user->name;
		}
		if($form_state['values']['op']=='Skip Review') {
			$workITMState = "SkipProcess";
		} 
		if($form_state['values']['op']=='Reject') {
			$workITMState = "Cancelled";
		}
		
		$account = new stdClass();
		$name = new stdClass();
		$name->workITMState = $workITMState;
		$name->workITMName = $form_state['values']['hidden_workitemid'];
		$name->identityRequesterId  = $form_state['values']['hidden_identityRequesterId'];
		$user_json = json_encode($name);
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
	$url .= '/identityiq/rest/Custom/custom/secondLevelApproval';
	$method = 'POST';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);
	if($workITMState=='SkipProcess') {
		if($result_obj=='Success') {
		 $success_message = "Approval has been skipped and you will recieve an email with further details";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		drupal_goto('rsa/approvals/list');
	} else {
		drupal_goto('rsa/approvals/list');
	}
	}
	if($workITMState=='Cancelled') {
		if($result_obj=='Success') {
		 $success_message = "Request has been submitted";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
		drupal_goto('rsa/approvals/list');
	} else {
		drupal_goto('rsa/approvals/list');
	}
	}
	
	if($result_obj->requestID=='Failure') {
		 $success_message = "Error occurred while submitting the form";
		drupal_set_message(filter_xss('<img width="20" src="/sites/all/themes/idmtheme/images/close_red.png">'.$success_message, $allowed_tags = array('img')));
	}
	if($result_obj->errors!='') {
		drupal_set_message(t($result_obj->errors[0]), 'warning');
	}

}


function rsa_approvals_list() {
	drupal_add_js(drupal_get_path('module', 'idm_employees') . '/js/jquery.sticky.js');
    $content['info'] = array (
      '#type' => 'markup',
      '#markup' => get_rsa_approvals_list(),
      '#prefix' => '<div id="mgr_employees">',
      '#suffix' => '</div>'
    );
    return $content;
}

function get_rsa_approvals_list() {
  global $user;
  $userid = empty($user->name) ? '' : $user->name;
	$url = variable_get('rest_api_check_sailpoint_url', 'http://stg.identity.inbcu.com');
	$url .= '/identityiq/rest/Custom/custom/getWorkItem/'.$userid;
	$method = 'GET';
	$result = idm_assets_sailpoint_execute_curl($url, $user_json, $method);
  $result_obj = json_decode($result);		
	$var['rsa_approval'] = $result_obj;
  return theme('get_rsa_approvals_list', $var);
}

function get_othervendors_list($invited = false) {
  /*$other_database = array(
      'database' => 'IDMdev',
      'username' => 'idmdevusr',
      'password' => 'Paw&$dfrd73',
      'host' => '3.3.167.45',
      'driver' => 'mysql',
  );*/
	$other_database = array(
      'database' => 'IDMProd',
      'username' => 'idmprodusr',
      'password' => 'S@$$dfrd34',
      'host' => '3.3.167.45',
      'driver' => 'mysql',
  );
  Database::addConnectionInfo('othervendordb', 'default', $other_database);
  db_set_active('othervendordb');

  // execute queries here
  
	/*$result = db_query("SELECT T1.T001_SUPPLIER,T1.T001_STATUS,T1.T001_DATEREV_COMP,T1.T001_RISK,T1.T001_SUPPLIER_STATUS FROM T001_VPN_Supplier_Table T1 WHERE T1.T001_SUPPLIER_STATUS LIKE 'Approved%' AND T001_LAST_UPDATEDDATE = (SELECT MAX(T001_LAST_UPDATEDDATE) FROM T001_VPN_Supplier_Table WHERE T001_SUPPLIER = T1.T001_SUPPLIER GROUP BY T001_SUPPLIER)");*/

	$result = db_query("SELECT T1.T001_SUPPLIER,T1.T001_STATUS,T1.T001_DATEREV_COMP,T1.T001_RISK,T1.T001_SUPPLIER_STATUS FROM T001_VPN_Supplier_Table T1 WHERE T1.T001_SUPPLIER_STATUS LIKE 'Approved%' AND T001_LAST_UPDATEDDATE = (SELECT MAX(T001_LAST_UPDATEDDATE) FROM T001_VPN_Supplier_Table WHERE T001_SUPPLIER = T1.T001_SUPPLIER GROUP BY T001_SUPPLIER) AND T1.T001_DATEREV_COMP >= now() - INTERVAL 24 MONTH AND T1.T001_RISK !='Tier1' AND T1.T001_RISK !='Tier 1' AND T1.T001_RISK !='Tier2' AND T1.T001_RISK !='Tier 2' order by T1.T001_SUPPLIER");

  $retval = array();
  foreach ($result as $row) {
    $retval[$row->T001_SUPPLIER] = $row->T001_SUPPLIER;
  }
	
	$array1 = array(""=>"Select");
	$result = array_merge($array1, $retval);
	
  //db_close();
  //Switch back to the default connection when finished.
  db_set_active('default');
  //watchdog("dropbox", "%emailtimestamp - The queries have been made  on ", array('%emailtimestamp' => date('l jS \of F Y h:i:s A')));
	array_push($result, "Others");
  return $result;
}

function check_approved_suppliers($supplier_name) {

$primary_vendor = array("Birlasoft"=>"Birlasoft","Capgemini"=>"Capgemini","Cognizant"=>"Cognizant","Compucom"=>"Compucom","EPAM"=>"EPAM","Genpact"=>"Genpact","HCL"=>"HCL","HP"=>"HP","Infocepts"=>"Infocepts","Madiba"=>"Madiba","Microland"=>"Microland","SDG"=>"SDG","Softtek"=>"Softtek","TCS"=>"TCS","Tech Mahindra"=>"Tech Mahindra","Teradata"=>"Teradata","Wipro"=>"Wipro");
$get_othervendors = get_othervendors_list(false);

$primary_othervendors = array_merge($primary_vendor,$get_othervendors);
unset($primary_othervendors['']);
unset($primary_othervendors[0]);

if(in_array($supplier_name, array_values($primary_othervendors))) {
	$record_status="supplier found";
} else {
	$record_status="supplier not found";
}
return $record_status;
}

function idm_assets_sailpoint_execute_curl($url, $user_json = '', $method = 'GET') {
	$userid = variable_get('rest_api_check_sailpoint_http_auth_username', 'spadmin');
    $pass = variable_get('rest_api_check_sailpoint_http_auth_pass', 'admin');

	// open connection
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
	curl_setopt($ch, CURLOPT_USERPWD, $userid . ":" . $pass);
	curl_setopt($ch, CURLOPT_UNRESTRICTED_AUTH, TRUE);
	curl_setopt($ch, CURLOPT_HTTPHEADER, array (
		"Content-Type: application/json;"
	));
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  if($method != 'GET'){
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $user_json);
  }
	//curl_setopt($ch, CURLOPT_HEADER, 1);
  if(LOCAL_DEV || variable_get('no_proxy', 1)){
    curl_setopt($ch, CURLOPT_PROXY, "");
  }
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, variable_get('api_connection_timeout', 15));
  curl_setopt($ch, CURLOPT_TIMEOUT, variable_get('api_call_timeout',180));
	// execute post
$starttime = microtime(true);
	$result = curl_exec($ch);
$endtime = microtime(true);
$elapsed = sprintf("%.6f", $endtime - $starttime);
//watchdog("iam_api_call", "took $elapsed seconds to $method $url");
 watchdog("idm_api_sailpoint_call", "$elapsed seconds to Call %url with data %data and has recieved the response %response", array('%url' => $url, '%data' => $user_json, '%response' => $result ));
	return $result;
}
